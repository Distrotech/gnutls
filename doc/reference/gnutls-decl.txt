<MACRO>
<NAME>HAVE_SSIZE_T</NAME>
#define HAVE_SSIZE_T
</MACRO>
<TYPEDEF>
<NAME>ssize_t</NAME>
typedef int ssize_t;
</TYPEDEF>
<MACRO>
<NAME>memxor</NAME>
# define memxor gl_memxor
</MACRO>
<MACRO>
<NAME>likely</NAME>
#  define likely(x)      __builtin_expect((x), 1)
</MACRO>
<MACRO>
<NAME>unlikely</NAME>
#  define unlikely(x)    __builtin_expect((x), 0)
</MACRO>
<MACRO>
<NAME>MAX_HANDSHAKE_PACKET_SIZE</NAME>
#define MAX_HANDSHAKE_PACKET_SIZE 48*1024
</MACRO>
<MACRO>
<NAME>TLS_MAX_SESSION_ID_SIZE</NAME>
#define TLS_MAX_SESSION_ID_SIZE 32
</MACRO>
<MACRO>
<NAME>MAX_HASH_SIZE</NAME>
#define MAX_HASH_SIZE 64
</MACRO>
<MACRO>
<NAME>MAX_CIPHER_BLOCK_SIZE</NAME>
#define MAX_CIPHER_BLOCK_SIZE 16
</MACRO>
<MACRO>
<NAME>MAX_CIPHER_KEY_SIZE</NAME>
#define MAX_CIPHER_KEY_SIZE 32
</MACRO>
<MACRO>
<NAME>MAX_USERNAME_SIZE</NAME>
#define MAX_USERNAME_SIZE 128
</MACRO>
<MACRO>
<NAME>MAX_SERVER_NAME_SIZE</NAME>
#define MAX_SERVER_NAME_SIZE 128
</MACRO>
<MACRO>
<NAME>SESSION_TICKET_KEY_NAME_SIZE</NAME>
#define SESSION_TICKET_KEY_NAME_SIZE 16
</MACRO>
<MACRO>
<NAME>SESSION_TICKET_KEY_SIZE</NAME>
#define SESSION_TICKET_KEY_SIZE 16
</MACRO>
<MACRO>
<NAME>SESSION_TICKET_IV_SIZE</NAME>
#define SESSION_TICKET_IV_SIZE 16
</MACRO>
<MACRO>
<NAME>SESSION_TICKET_MAC_SECRET_SIZE</NAME>
#define SESSION_TICKET_MAC_SECRET_SIZE 32
</MACRO>
<MACRO>
<NAME>AEAD_EXPLICIT_DATA_SIZE</NAME>
#define AEAD_EXPLICIT_DATA_SIZE 8
</MACRO>
<MACRO>
<NAME>AEAD_IMPLICIT_DATA_SIZE</NAME>
#define AEAD_IMPLICIT_DATA_SIZE 4
</MACRO>
<MACRO>
<NAME>GNUTLS_MASTER_SIZE</NAME>
#define GNUTLS_MASTER_SIZE 48
</MACRO>
<MACRO>
<NAME>GNUTLS_RANDOM_SIZE</NAME>
#define GNUTLS_RANDOM_SIZE 32
</MACRO>
<MACRO>
<NAME>DTLS_RECORD_WINDOW_SIZE</NAME>
#define DTLS_RECORD_WINDOW_SIZE 64
</MACRO>
<MACRO>
<NAME>MAX_EXT_TYPES</NAME>
#define MAX_EXT_TYPES 32
</MACRO>
<ENUM>
<NAME>gnutls_ext_parse_type_t</NAME>
  typedef enum
  {
    GNUTLS_EXT_ANY = 0,
    GNUTLS_EXT_APPLICATION = 1,
    GNUTLS_EXT_TLS = 2,
    GNUTLS_EXT_MANDATORY = 3,
    GNUTLS_EXT_NONE = 4
  } gnutls_ext_parse_type_t;
</ENUM>
<MACRO>
<NAME>DEFAULT_EXPIRE_TIME</NAME>
#define DEFAULT_EXPIRE_TIME 3600
</MACRO>
<ENUM>
<NAME>transport_t</NAME>
typedef enum transport_t
{
  GNUTLS_STREAM,
  GNUTLS_DGRAM
} transport_t;
</ENUM>
<MACRO>
<NAME>IS_DTLS</NAME>
#define IS_DTLS(session) (session->internals.transport == GNUTLS_DGRAM)
</MACRO>
<MACRO>
<NAME>DEFAULT_MAX_RECORD_SIZE</NAME>
#define DEFAULT_MAX_RECORD_SIZE 16384
</MACRO>
<MACRO>
<NAME>TLS_RECORD_HEADER_SIZE</NAME>
#define TLS_RECORD_HEADER_SIZE 5
</MACRO>
<MACRO>
<NAME>DTLS_RECORD_HEADER_SIZE</NAME>
#define DTLS_RECORD_HEADER_SIZE (TLS_RECORD_HEADER_SIZE+8)
</MACRO>
<MACRO>
<NAME>RECORD_HEADER_SIZE</NAME>
#define RECORD_HEADER_SIZE(session) (IS_DTLS(session) ? DTLS_RECORD_HEADER_SIZE : TLS_RECORD_HEADER_SIZE)
</MACRO>
<MACRO>
<NAME>MAX_RECORD_HEADER_SIZE</NAME>
#define MAX_RECORD_HEADER_SIZE DTLS_RECORD_HEADER_SIZE
</MACRO>
<MACRO>
<NAME>MAX_RECORD_SEND_SIZE</NAME>
#define MAX_RECORD_SEND_SIZE(session) (IS_DTLS(session)?((size_t)gnutls_dtls_get_data_mtu(session)):(size_t)session->security_parameters.max_record_send_size)
</MACRO>
<MACRO>
<NAME>MAX_RECORD_RECV_SIZE</NAME>
#define MAX_RECORD_RECV_SIZE(session) ((size_t)session->security_parameters.max_record_recv_size)
</MACRO>
<MACRO>
<NAME>MAX_PAD_SIZE</NAME>
#define MAX_PAD_SIZE 255
</MACRO>
<MACRO>
<NAME>EXTRA_COMP_SIZE</NAME>
#define EXTRA_COMP_SIZE 2048
</MACRO>
<MACRO>
<NAME>MAX_RECORD_OVERHEAD</NAME>
#define MAX_RECORD_OVERHEAD (MAX_CIPHER_BLOCK_SIZE/*iv*/+MAX_PAD_SIZE+EXTRA_COMP_SIZE+MAX_HASH_SIZE/*MAC*/)
</MACRO>
<MACRO>
<NAME>MAX_RECV_SIZE</NAME>
#define MAX_RECV_SIZE(session) (MAX_RECORD_OVERHEAD+MAX_RECORD_RECV_SIZE(session)+RECORD_HEADER_SIZE(session))
</MACRO>
<MACRO>
<NAME>TLS_HANDSHAKE_HEADER_SIZE</NAME>
#define TLS_HANDSHAKE_HEADER_SIZE 4
</MACRO>
<MACRO>
<NAME>DTLS_HANDSHAKE_HEADER_SIZE</NAME>
#define DTLS_HANDSHAKE_HEADER_SIZE (TLS_HANDSHAKE_HEADER_SIZE+8)
</MACRO>
<MACRO>
<NAME>HANDSHAKE_HEADER_SIZE</NAME>
#define HANDSHAKE_HEADER_SIZE(session) (IS_DTLS(session) ? DTLS_HANDSHAKE_HEADER_SIZE : TLS_HANDSHAKE_HEADER_SIZE)
</MACRO>
<MACRO>
<NAME>MAX_HANDSHAKE_HEADER_SIZE</NAME>
#define MAX_HANDSHAKE_HEADER_SIZE DTLS_HANDSHAKE_HEADER_SIZE
</MACRO>
<MACRO>
<NAME>DTLS_DEFAULT_MTU</NAME>
#define DTLS_DEFAULT_MTU 1200
</MACRO>
<MACRO>
<NAME>DTLS_MAX_COOKIE_SIZE</NAME>
#define DTLS_MAX_COOKIE_SIZE 32
</MACRO>
<MACRO>
<NAME>MAX_HANDSHAKE_HELLO_VERIFY_REQUESTS</NAME>
#define MAX_HANDSHAKE_HELLO_VERIFY_REQUESTS 5
</MACRO>
<MACRO>
<NAME>DEFAULT_MAX_VERIFY_DEPTH</NAME>
#define DEFAULT_MAX_VERIFY_DEPTH 16
</MACRO>
<MACRO>
<NAME>DEFAULT_MAX_VERIFY_BITS</NAME>
#define DEFAULT_MAX_VERIFY_BITS 16*1024
</MACRO>
<MACRO>
<NAME>MAX_VERIFY_DEPTH</NAME>
#define MAX_VERIFY_DEPTH 4096
</MACRO>
<MACRO>
<NAME>MEMSUB</NAME>
#define MEMSUB(x,y) ((ssize_t)((ptrdiff_t)x-(ptrdiff_t)y))
</MACRO>
<MACRO>
<NAME>DECR_LEN</NAME>
#define DECR_LEN(len, x) do { len-=x; if (len<0) {gnutls_assert(); return GNUTLS_E_UNEXPECTED_PACKET_LENGTH;} } while (0)
</MACRO>
<MACRO>
<NAME>DECR_LENGTH_RET</NAME>
#define DECR_LENGTH_RET(len, x, RET) do { len-=x; if (len<0) {gnutls_assert(); return RET;} } while (0)
</MACRO>
<MACRO>
<NAME>DECR_LENGTH_COM</NAME>
#define DECR_LENGTH_COM(len, x, COM) do { len-=x; if (len<0) {gnutls_assert(); COM;} } while (0)
</MACRO>
<MACRO>
<NAME>GNUTLS_POINTER_TO_INT</NAME>
#define GNUTLS_POINTER_TO_INT(_) ((int) GNUTLS_POINTER_TO_INT_CAST (_))
</MACRO>
<MACRO>
<NAME>GNUTLS_INT_TO_POINTER</NAME>
#define GNUTLS_INT_TO_POINTER(_) ((void*) GNUTLS_POINTER_TO_INT_CAST (_))
</MACRO>
<ENUM>
<NAME>handshake_state_t</NAME>
typedef enum handshake_state_t
{ STATE0 = 0, STATE1, STATE2,
  STATE3, STATE4, STATE5, STATE6, STATE7, STATE8, 
  STATE9, STATE10, STATE11, STATE12, STATE13, STATE14,
  STATE15, STATE16, STATE17,
  STATE20 = 20, STATE21, STATE22,
  STATE30 = 30, STATE31, STATE40 = 40, STATE41, STATE50 = 50,
  STATE60 = 60, STATE61, STATE62, STATE70, STATE71
} handshake_state_t;
</ENUM>
<ENUM>
<NAME>heartbeat_state_t</NAME>
typedef enum heartbeat_state_t
{  
  SHB_SEND1 = 0, 
  SHB_SEND2, 
  SHB_RECV, 
} heartbeat_state_t;
</ENUM>
<ENUM>
<NAME>recv_state_t</NAME>
typedef enum recv_state_t
{  
  RECV_STATE_0 = 0, 
  RECV_STATE_DTLS_RETRANSMIT,
} recv_state_t;
</ENUM>
<MACRO>
<NAME>MAX_ALGOS</NAME>
#define MAX_ALGOS GNUTLS_MAX_ALGORITHM_NUM
</MACRO>
<ENUM>
<NAME>extensions_t</NAME>
typedef enum extensions_t
{
  GNUTLS_EXTENSION_SERVER_NAME = 0,
  GNUTLS_EXTENSION_MAX_RECORD_SIZE = 1,
  GNUTLS_EXTENSION_STATUS_REQUEST = 5,
  GNUTLS_EXTENSION_CERT_TYPE = 9,
  GNUTLS_EXTENSION_SUPPORTED_ECC = 10,
  GNUTLS_EXTENSION_SUPPORTED_ECC_PF = 11,
  GNUTLS_EXTENSION_SRP = 12,
  GNUTLS_EXTENSION_SIGNATURE_ALGORITHMS = 13,
  GNUTLS_EXTENSION_SRTP = 14,
  GNUTLS_EXTENSION_HEARTBEAT = 15,
  GNUTLS_EXTENSION_SESSION_TICKET = 35,
  GNUTLS_EXTENSION_SAFE_RENEGOTIATION = 65281   /* aka: 0xff01 */
} extensions_t;
</ENUM>
<ENUM>
<NAME>cipher_type_t</NAME>
typedef enum
{ CIPHER_STREAM, CIPHER_BLOCK } cipher_type_t;
</ENUM>
<MACRO>
<NAME>RESUME_TRUE</NAME>
#define RESUME_TRUE 1
</MACRO>
<MACRO>
<NAME>RESUME_FALSE</NAME>
#define RESUME_FALSE 0
</MACRO>
<ENUM>
<NAME>content_type_t</NAME>
typedef enum content_type_t
{
  GNUTLS_CHANGE_CIPHER_SPEC = 20, GNUTLS_ALERT,
  GNUTLS_HANDSHAKE, GNUTLS_APPLICATION_DATA,
  GNUTLS_HEARTBEAT
} content_type_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_PK_ANY</NAME>
#define GNUTLS_PK_ANY (gnutls_pk_algorithm_t)-1
</MACRO>
<MACRO>
<NAME>GNUTLS_PK_NONE</NAME>
#define GNUTLS_PK_NONE (gnutls_pk_algorithm_t)-2
</MACRO>
<MACRO>
<NAME>MAX_HANDSHAKE_MSGS</NAME>
#define MAX_HANDSHAKE_MSGS 6
</MACRO>
<TYPEDEF>
<NAME>gnutls_key_st</NAME>
typedef struct gnutls_key_st gnutls_key_st;
</TYPEDEF>
<TYPEDEF>
<NAME>record_state_st</NAME>
typedef struct record_state_st record_state_st;
</TYPEDEF>
<TYPEDEF>
<NAME>record_parameters_st</NAME>
typedef struct record_parameters_st record_parameters_st;
</TYPEDEF>
<MACRO>
<NAME>MAX_SIGNATURE_ALGORITHMS</NAME>
#define MAX_SIGNATURE_ALGORITHMS 16
</MACRO>
<MACRO>
<NAME>MAX_SIGN_ALGO_SIZE</NAME>
#define MAX_SIGN_ALGO_SIZE (2 + MAX_SIGNATURE_ALGORITHMS * 2)
</MACRO>
<MACRO>
<NAME>MAX_VERIFY_DATA_SIZE</NAME>
#define MAX_VERIFY_DATA_SIZE 36 /* in SSL 3.0, 12 in TLS 1.0 */
</MACRO>
<MACRO>
<NAME>EPOCH_READ_CURRENT</NAME>
#define EPOCH_READ_CURRENT  70000
</MACRO>
<MACRO>
<NAME>EPOCH_WRITE_CURRENT</NAME>
#define EPOCH_WRITE_CURRENT 70001
</MACRO>
<MACRO>
<NAME>EPOCH_NEXT</NAME>
#define EPOCH_NEXT          70002
</MACRO>
<ENUM>
<NAME>safe_renegotiation_t</NAME>
typedef enum
{
  SR_DISABLED,
  SR_UNSAFE,
  SR_PARTIAL,
  SR_SAFE
} safe_renegotiation_t;
</ENUM>
<MACRO>
<NAME>ENABLE_COMPAT</NAME>
#define ENABLE_COMPAT(x) \
              (x)->no_padding = 1; \
              (x)->allow_large_records = 1; \
              (x)->allow_weak_keys = 1
</MACRO>
<MACRO>
<NAME>MAX_EPOCH_INDEX</NAME>
#define MAX_EPOCH_INDEX 16
</MACRO>
<MACRO>
<NAME>set_adv_version</NAME>
#define set_adv_version( session, major, minor) \
	session->internals.adv_version_major = major; \
	session->internals.adv_version_minor = minor
</MACRO>
<MACRO>
<NAME>gnutls_protocol_get_version</NAME>
#define gnutls_protocol_get_version _gnutls_protocol_get_version
</MACRO>
<STRUCT>
<NAME>record_parameters_st</NAME>
struct record_parameters_st;
</STRUCT>
<STRUCT>
<NAME>record_state_st</NAME>
struct record_state_st;
</STRUCT>
<VARIABLE>
<NAME>array</NAME>
  gnutls_str_array_t array = head;
</VARIABLE>
<FUNCTION>
<NAME>gnutls_assert_val</NAME>
<RETURNS>return  </RETURNS>
GNUTLS_E_MEMORY_ERROR 
</FUNCTION>
<VARIABLE>
<NAME>crypto_pk_prio</NAME>
extern int crypto_pk_prio;
</VARIABLE>
<FUNCTION>
<NAME>encode_ber_digest_info</NAME>
<RETURNS>int </RETURNS>
gnutls_digest_algorithm_t hash, const gnutls_datum_t * digest, gnutls_datum_t * output 
</FUNCTION>
<FUNCTION>
<NAME>decode_ber_digest_info</NAME>
<RETURNS>int </RETURNS>
const gnutls_datum_t * info, gnutls_digest_algorithm_t * hash, uint8_t * digest, unsigned int *digest_size 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_server_certificate</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, gnutls_buffer_st*
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_client_certificate</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, gnutls_buffer_st*
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_server_kx</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, gnutls_buffer_st*
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_client_kx</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, gnutls_buffer_st*
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_client_crt_vrfy</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, gnutls_buffer_st *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_generate_server_crt_request</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t,
                                                     gnutls_buffer_st *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_server_certificate</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, uint8_t *,
                                            size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_client_certificate</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, uint8_t *,
                                            size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_server_kx</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, uint8_t *, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_client_kx</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, uint8_t *, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_client_crt_vrfy</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t, uint8_t *, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_process_server_crt_request</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t,
                                                    uint8_t *, size_t
</USER_FUNCTION>
<MACRO>
<NAME>STATE</NAME>
#define STATE session->internals.handshake_state
</MACRO>
<MACRO>
<NAME>FINAL_STATE</NAME>
#define FINAL_STATE session->internals.handshake_final_state
</MACRO>
<MACRO>
<NAME>AGAIN</NAME>
#define AGAIN(target) (STATE==target?1:0)
</MACRO>
<MACRO>
<NAME>FAGAIN</NAME>
#define FAGAIN(target) (FINAL_STATE==target?1:0)
</MACRO>
<MACRO>
<NAME>AGAIN2</NAME>
#define AGAIN2(state, target) (state==target?1:0)
</MACRO>
<VARIABLE>
<NAME>now</NAME>
      time_t now = gnutls_time(0);
</VARIABLE>
<FUNCTION>
<NAME>gnutls_assert_val</NAME>
<RETURNS>return  </RETURNS>
GNUTLS_E_TIMEDOUT 
</FUNCTION>
<MACRO>
<NAME>gnutls_crypto_single_cipher_st</NAME>
# define gnutls_crypto_single_cipher_st gnutls_crypto_cipher_st
</MACRO>
<MACRO>
<NAME>gnutls_crypto_single_mac_st</NAME>
# define gnutls_crypto_single_mac_st gnutls_crypto_mac_st
</MACRO>
<MACRO>
<NAME>gnutls_crypto_single_digest_st</NAME>
# define gnutls_crypto_single_digest_st gnutls_crypto_digest_st
</MACRO>
<USER_FUNCTION>
<NAME>init</NAME>
<RETURNS>int </RETURNS>
gnutls_cipher_algorithm_t, void **ctx, int enc
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>setkey</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *key, size_t keysize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>setiv</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *iv, size_t ivsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>encrypt</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *plain, size_t plainsize,
                    void *encr, size_t encrsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>decrypt</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *encr, size_t encrsize,
                    void *plain, size_t plainsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>auth</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *data, size_t datasize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>tag</NAME>
<RETURNS>void </RETURNS>
void *ctx, void *tag, size_t tagsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>deinit</NAME>
<RETURNS>void </RETURNS>
void *ctx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>exists</NAME>
<RETURNS>int </RETURNS>
gnutls_cipher_algorithm_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>reset</NAME>
<RETURNS>void </RETURNS>
void *ctx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hash</NAME>
<RETURNS>int </RETURNS>
void *ctx, const void *text, size_t textsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>output</NAME>
<RETURNS>int </RETURNS>
void *src_ctx, void *digest, size_t digestsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>fast</NAME>
<RETURNS>int </RETURNS>
gnutls_mac_algorithm_t, const void *key, size_t keysize, const void *text, size_t textsize, void *digest
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>rnd</NAME>
<RETURNS>int </RETURNS>
void *ctx, int level, void *data, size_t datasize
</USER_FUNCTION>
<TYPEDEF>
<NAME>bigint_t</NAME>
  typedef void *bigint_t;
</TYPEDEF>
<ENUM>
<NAME>gnutls_bigint_format_t</NAME>
  typedef enum
  {
    /* raw unsigned integer format */
    GNUTLS_MPI_FORMAT_USG = 0,
    /* raw signed integer format - always a leading zero when positive */
    GNUTLS_MPI_FORMAT_STD = 1,
    /* the pgp integer format */
    GNUTLS_MPI_FORMAT_PGP = 2
  } gnutls_bigint_format_t;
</ENUM>
<USER_FUNCTION>
<NAME>bigint_new</NAME>
<RETURNS>bigint_t </RETURNS>
int nbits
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_release</NAME>
<RETURNS>void </RETURNS>
bigint_t n
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_cmp</NAME>
<RETURNS>int </RETURNS>
const bigint_t m1, const bigint_t m2
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_cmp_ui</NAME>
<RETURNS>int </RETURNS>
const bigint_t m1, unsigned long m2
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_mod</NAME>
<RETURNS>bigint_t </RETURNS>
const bigint_t a, const bigint_t b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_set</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t a, const bigint_t b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_set_ui</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t a, unsigned long b
</USER_FUNCTION>
<FUNCTION>
<NAME>int</NAME>
<RETURNS>unsigned  </RETURNS>
*bigint_get_nbits) (const bigint_t a 
</FUNCTION>
<USER_FUNCTION>
<NAME>bigint_powm</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t b,
                               const bigint_t e, const bigint_t m
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_addm</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a,
                               const bigint_t b, const bigint_t m
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_subm</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a, const bigint_t b,
                               const bigint_t m
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_mulm</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a, const bigint_t b,
                               const bigint_t m
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_mul</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a, const bigint_t b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_add_ui</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a,
                                 unsigned long b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_sub_ui</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a,
                                 unsigned long b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_mul_ui</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t w, const bigint_t a,
                                 unsigned long b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_div</NAME>
<RETURNS>bigint_t </RETURNS>
bigint_t q, const bigint_t a, const bigint_t b
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_prime_check</NAME>
<RETURNS>int </RETURNS>
const bigint_t pp
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_generate_group</NAME>
<RETURNS>int </RETURNS>
gnutls_group_st * gg, unsigned int bits
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_scan</NAME>
<RETURNS>bigint_t </RETURNS>
const void *buf, size_t buf_size,
                               gnutls_bigint_format_t format
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>bigint_print</NAME>
<RETURNS>int </RETURNS>
const bigint_t a, void *buf, size_t * buf_size,
                         gnutls_bigint_format_t format
</USER_FUNCTION>
<MACRO>
<NAME>GNUTLS_MAX_PK_PARAMS</NAME>
#define GNUTLS_MAX_PK_PARAMS 16
</MACRO>
<ENUM>
<NAME>gnutls_pk_flag_t</NAME>
  typedef enum
  {
    GNUTLS_PK_FLAG_NONE = 0
  } gnutls_pk_flag_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pk_params_release</NAME>
<RETURNS>void  </RETURNS>
gnutls_pk_params_st * p 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_params_init</NAME>
<RETURNS>void  </RETURNS>
gnutls_pk_params_st * p 
</FUNCTION>
<MACRO>
<NAME>MAX_PUBLIC_PARAMS_SIZE</NAME>
#define MAX_PUBLIC_PARAMS_SIZE 4        /* ok for RSA and DSA */
</MACRO>
<MACRO>
<NAME>DSA_PUBLIC_PARAMS</NAME>
#define DSA_PUBLIC_PARAMS 4
</MACRO>
<MACRO>
<NAME>RSA_PUBLIC_PARAMS</NAME>
#define RSA_PUBLIC_PARAMS 2
</MACRO>
<MACRO>
<NAME>ECC_PUBLIC_PARAMS</NAME>
#define ECC_PUBLIC_PARAMS 8
</MACRO>
<MACRO>
<NAME>MAX_PRIV_PARAMS_SIZE</NAME>
#define MAX_PRIV_PARAMS_SIZE GNUTLS_MAX_PK_PARAMS       /* ok for RSA and DSA */
</MACRO>
<MACRO>
<NAME>DSA_PRIVATE_PARAMS</NAME>
#define DSA_PRIVATE_PARAMS 5
</MACRO>
<MACRO>
<NAME>RSA_PRIVATE_PARAMS</NAME>
#define RSA_PRIVATE_PARAMS 8
</MACRO>
<MACRO>
<NAME>ECC_PRIVATE_PARAMS</NAME>
#define ECC_PRIVATE_PARAMS 9
</MACRO>
<MACRO>
<NAME>ECC_PRIME</NAME>
#define ECC_PRIME 0
</MACRO>
<MACRO>
<NAME>ECC_ORDER</NAME>
#define ECC_ORDER 1
</MACRO>
<MACRO>
<NAME>ECC_A</NAME>
#define ECC_A 2
</MACRO>
<MACRO>
<NAME>ECC_B</NAME>
#define ECC_B 3
</MACRO>
<MACRO>
<NAME>ECC_GX</NAME>
#define ECC_GX 4
</MACRO>
<MACRO>
<NAME>ECC_GY</NAME>
#define ECC_GY 5
</MACRO>
<MACRO>
<NAME>ECC_X</NAME>
#define ECC_X 6
</MACRO>
<MACRO>
<NAME>ECC_Y</NAME>
#define ECC_Y 7
</MACRO>
<MACRO>
<NAME>ECC_K</NAME>
#define ECC_K 8
</MACRO>
<MACRO>
<NAME>DSA_P</NAME>
#define DSA_P 0
</MACRO>
<MACRO>
<NAME>DSA_Q</NAME>
#define DSA_Q 1
</MACRO>
<MACRO>
<NAME>DSA_G</NAME>
#define DSA_G 2
</MACRO>
<MACRO>
<NAME>DSA_Y</NAME>
#define DSA_Y 3
</MACRO>
<MACRO>
<NAME>DSA_X</NAME>
#define DSA_X 4
</MACRO>
<MACRO>
<NAME>RSA_MODULUS</NAME>
#define RSA_MODULUS 0
</MACRO>
<MACRO>
<NAME>RSA_PUB</NAME>
#define RSA_PUB 1
</MACRO>
<MACRO>
<NAME>RSA_PRIV</NAME>
#define RSA_PRIV 2
</MACRO>
<MACRO>
<NAME>RSA_PRIME1</NAME>
#define RSA_PRIME1 3
</MACRO>
<MACRO>
<NAME>RSA_PRIME2</NAME>
#define RSA_PRIME2 4
</MACRO>
<MACRO>
<NAME>RSA_COEF</NAME>
#define RSA_COEF 5
</MACRO>
<MACRO>
<NAME>RSA_E1</NAME>
#define RSA_E1 6
</MACRO>
<MACRO>
<NAME>RSA_E2</NAME>
#define RSA_E2 7
</MACRO>
<ENUM>
<NAME>gnutls_direction_t</NAME>
  typedef enum
  {
    GNUTLS_IMPORT = 0,
    GNUTLS_EXPORT = 1
  } gnutls_direction_t;
</ENUM>
<USER_FUNCTION>
<NAME>sign</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, gnutls_datum_t * signature,
                 const gnutls_datum_t * data,
                 const gnutls_pk_params_st * priv
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>verify</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, const gnutls_datum_t * data,
                   const gnutls_datum_t * sig,
                   const gnutls_pk_params_st * pub
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>hash_algorithm</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, 
                   const gnutls_datum_t * sig,
                   gnutls_pk_params_st * issuer_params,
                   gnutls_digest_algorithm_t*
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>verify_params</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, 
                          const gnutls_pk_params_st * pub
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>generate</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, unsigned int nbits,
                     gnutls_pk_params_st *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>pk_fixup_private_params</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, gnutls_direction_t,
                                    gnutls_pk_params_st *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>derive</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t, gnutls_datum_t * out,
                   const gnutls_pk_params_st * priv,
                   const gnutls_pk_params_st * pub
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_single_cipher_register</NAME>
<RETURNS>int  </RETURNS>
gnutls_cipher_algorithm_t algorithm, int priority, const gnutls_crypto_single_cipher_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_single_mac_register</NAME>
<RETURNS>int  </RETURNS>
gnutls_mac_algorithm_t algorithm, int priority, const gnutls_crypto_single_mac_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_single_digest_register</NAME>
<RETURNS>int  </RETURNS>
gnutls_digest_algorithm_t algorithm, int priority, const gnutls_crypto_single_digest_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_cipher_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_cipher_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_mac_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_mac_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_digest_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_digest_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_rnd_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_rnd_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_pk_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_pk_st * s 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_bigint_register</NAME>
<RETURNS>int  </RETURNS>
int priority, const gnutls_crypto_bigint_st * s 
</FUNCTION>
<VARIABLE>
<NAME>ret</NAME>
  mbuffer_st *ret = _mbuffer_alloc (HANDSHAKE_HEADER_SIZE(session) + size,
</VARIABLE>
<TYPEDEF>
<NAME>svoid</NAME>
typedef void svoid;             /* for functions that allocate using gnutls_secure_malloc */
</TYPEDEF>
<USER_FUNCTION>
<NAME>_gnutls_is_secure_memory</NAME>
<RETURNS>int </RETURNS>
const void *
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_realloc_fast</NAME>
<RETURNS>void  *</RETURNS>
void *ptr, size_t size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_secure_calloc</NAME>
<RETURNS>svoid  *</RETURNS>
size_t nmemb, size_t size 
</FUNCTION>
<VARIABLE>
<NAME>crypto_rnd_prio</NAME>
extern int crypto_rnd_prio;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_rnd_ctx</NAME>
extern void* gnutls_rnd_ctx;
</VARIABLE>
<FUNCTION>
<NAME>pubkey_to_bits</NAME>
<RETURNS>int  </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_pk_params_st* params 
</FUNCTION>
<FUNCTION>
<NAME>pubkey_verify_hashed_data</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t algo, const gnutls_datum_t * hash, const gnutls_datum_t * signature, gnutls_pk_params_st * issuer_params 
</FUNCTION>
<FUNCTION>
<NAME>pubkey_verify_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t algo, const gnutls_datum_t * data, const gnutls_datum_t * signature, gnutls_pk_params_st * issuer_params 
</FUNCTION>
<MACRO>
<NAME>PEM_CERT_SEP2</NAME>
#define PEM_CERT_SEP2 "-----BEGIN X509 CERTIFICATE"
</MACRO>
<MACRO>
<NAME>PEM_CERT_SEP</NAME>
#define PEM_CERT_SEP "-----BEGIN CERTIFICATE"
</MACRO>
<MACRO>
<NAME>PEM_CRL_SEP</NAME>
#define PEM_CRL_SEP "-----BEGIN X509 CRL"
</MACRO>
<MACRO>
<NAME>PEM_KEY_RSA_SEP</NAME>
#define PEM_KEY_RSA_SEP "-----BEGIN RSA"
</MACRO>
<MACRO>
<NAME>PEM_KEY_DSA_SEP</NAME>
#define PEM_KEY_DSA_SEP "-----BEGIN DSA"
</MACRO>
<FUNCTION>
<NAME>system_errno</NAME>
<RETURNS>int  </RETURNS>
gnutls_transport_ptr_t 
</FUNCTION>
<FUNCTION>
<NAME>system_recv_timeout</NAME>
<RETURNS>int  </RETURNS>
gnutls_transport_ptr_t ptr, unsigned int ms 
</FUNCTION>
<FUNCTION>
<NAME>system_write</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_transport_ptr_t ptr, const void *data, size_t data_size 
</FUNCTION>
<MACRO>
<NAME>HAVE_WRITEV</NAME>
#define HAVE_WRITEV
</MACRO>
<FUNCTION>
<NAME>system_writev</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_transport_ptr_t ptr, const giovec_t * iovec, int iovec_cnt 
</FUNCTION>
<FUNCTION>
<NAME>system_read</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_transport_ptr_t ptr, void *data, size_t data_size 
</FUNCTION>
<MACRO>
<NAME>HAVE_WIN32_LOCKS</NAME>
#define HAVE_WIN32_LOCKS
</MACRO>
<MACRO>
<NAME>HAVE_PTHREAD_LOCKS</NAME>
#define HAVE_PTHREAD_LOCKS
</MACRO>
<MACRO>
<NAME>HAVE_NO_LOCKS</NAME>
#define HAVE_NO_LOCKS
</MACRO>
<VARIABLE>
<NAME>gnutls_time</NAME>
extern gnutls_time_func gnutls_time;
</VARIABLE>
<FUNCTION>
<NAME>gnutls_system_global_init</NAME>
<RETURNS>int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_system_global_deinit</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<MACRO>
<NAME>CRYPTOKI_GNU</NAME>
#define CRYPTOKI_GNU
</MACRO>
<MACRO>
<NAME>PKCS11_ID_SIZE</NAME>
#define PKCS11_ID_SIZE 128
</MACRO>
<MACRO>
<NAME>PKCS11_LABEL_SIZE</NAME>
#define PKCS11_LABEL_SIZE 128
</MACRO>
<TYPEDEF>
<NAME>ck_bool_t</NAME>
typedef unsigned char ck_bool_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>find_func_t</NAME>
<RETURNS>int </RETURNS>
struct pkcs11_session_info*,
                            struct token_info * tinfo, struct ck_info *,
                            void *input
</USER_FUNCTION>
<FUNCTION>
<NAME>pkcs11_rv_to_err</NAME>
<RETURNS>int  </RETURNS>
ck_rv_t rv 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_url_to_info</NAME>
<RETURNS>int  </RETURNS>
const char *url, struct p11_kit_uri **info 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_find_slot</NAME>
<RETURNS>int </RETURNS>
struct ck_function_list ** module, ck_slot_id_t * slot, struct p11_kit_uri *info, struct token_info *_tinfo 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_read_pubkey</NAME>
<RETURNS>int  </RETURNS>
struct ck_function_list *module, ck_session_handle_t pks, ck_object_handle_t obj, ck_key_type_t key_type, gnutls_datum_t * pubkey 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_info</NAME>
<RETURNS>int  </RETURNS>
struct p11_kit_uri *info, gnutls_pkcs11_obj_info_t itype, void *output, size_t * output_size 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_login</NAME>
<RETURNS>int  </RETURNS>
struct pkcs11_session_info * sinfo, struct pin_info_st* pin_info, const struct token_info *tokinfo, struct p11_kit_uri *info, int so 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_call_token_func</NAME>
<RETURNS>int  </RETURNS>
struct p11_kit_uri *info, const unsigned retry 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_rescan_slots</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_info_to_url</NAME>
<RETURNS>int  </RETURNS>
struct p11_kit_uri *info, gnutls_pkcs11_url_type_t detailed, char **url 
</FUNCTION>
<MACRO>
<NAME>SESSION_WRITE</NAME>
#define SESSION_WRITE (1<<0)
</MACRO>
<MACRO>
<NAME>SESSION_LOGIN</NAME>
#define SESSION_LOGIN (1<<1)
</MACRO>
<MACRO>
<NAME>SESSION_SO</NAME>
#define SESSION_SO (1<<2)       /* security officer session */
</MACRO>
<FUNCTION>
<NAME>pkcs11_open_session</NAME>
<RETURNS>int  </RETURNS>
struct pkcs11_session_info* sinfo, struct pin_info_st* pin_info, struct p11_kit_uri *info, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_strtype_to_class</NAME>
<RETURNS>ck_object_class_t  </RETURNS>
const char *type 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_token_matches_info</NAME>
<RETURNS>int  </RETURNS>
struct p11_kit_uri *info, struct ck_token_info *tinfo, struct ck_info *lib_info 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_obj_flags_to_int</NAME>
<RETURNS>unsigned int  </RETURNS>
unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>if</NAME>
<RETURNS>else  </RETURNS>
pk == GNUTLS_PK_EC) return CKM_ECDSA; else return CKM_RSA_PKCS; } static inline gnutls_pk_algorithm_t mech_to_pk(ck_key_type_t m) { if (m == CKK_RSA) return GNUTLS_PK_RSA; else if (m == CKK_DSA) return GNUTLS_PK_DSA; else  if (m == CKK_ECDSA) return GNUTLS_PK_EC; else return GNUTLS_PK_UNKNOWN; } static inline int pk_to_genmech(gnutls_pk_algorithm_t pk) { if (pk == GNUTLS_PK_DSA) return CKM_DSA_KEY_PAIR_GEN; else if (pk == GNUTLS_PK_EC) return CKM_ECDSA_KEY_PAIR_GEN; else return CKM_RSA_PKCS_KEY_PAIR_GEN; } ck_rv_t pkcs11_generate_key_pair (struct ck_function_list *module, ck_session_handle_t sess, struct ck_mechanism *mechanism, struct ck_attribute *pub_templ, unsigned long pub_templ_count, struct ck_attribute *priv_templ, unsigned long priv_templ_count, ck_object_handle_t *pub, ck_object_handle_t *priv 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_slot_list</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list * module, unsigned char token_present, ck_slot_id_t *slot_list, unsigned long *count 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_module_info</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list * module, struct ck_info * info 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_slot_info</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list * module, ck_slot_id_t slot_id, struct ck_slot_info *info 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_token_info</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list * module, ck_slot_id_t slot_id, struct ck_token_info *info 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_find_objects_init</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, struct ck_attribute *templ, unsigned long count 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_find_objects</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, ck_object_handle_t *objects, unsigned long max_object_count, unsigned long *object_count 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_find_objects_final</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct pkcs11_session_info* 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_close_session</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct pkcs11_session_info * 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_attribute_value</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, ck_object_handle_t object, struct ck_attribute *templ, unsigned long count 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_get_mechanism_list</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_slot_id_t slot_id, ck_mechanism_type_t *mechanism_list, unsigned long *count 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_sign_init</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, struct ck_mechanism *mechanism, ck_object_handle_t key 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_sign</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, unsigned char *data, unsigned long data_len, unsigned char *signature, unsigned long *signature_len 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_decrypt_init</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, struct ck_mechanism *mechanism, ck_object_handle_t key 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_decrypt</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, unsigned char *encrypted_data, unsigned long encrypted_data_len, unsigned char *data, unsigned long *data_len 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_create_object</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, struct ck_attribute *templ, unsigned long count, ck_object_handle_t *object 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_destroy_object</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, ck_object_handle_t object 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_init_token</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_slot_id_t slot_id, unsigned char *pin, unsigned long pin_len, unsigned char *label 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_init_pin</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, unsigned char *pin, unsigned long pin_len 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_set_pin</NAME>
<RETURNS>ck_rv_t </RETURNS>
struct ck_function_list *module, ck_session_handle_t sess, const char *old_pin, unsigned long old_len, const char *new_pin, unsigned long new_len 
</FUNCTION>
<FUNCTION>
<NAME>pkcs11_strerror</NAME>
<RETURNS>const char  *</RETURNS>
ck_rv_t rv 
</FUNCTION>
<VARIABLE>
<NAME>crypto_mac_prio</NAME>
extern int crypto_mac_prio;
</VARIABLE>
<VARIABLE>
<NAME>crypto_digest_prio</NAME>
extern int crypto_digest_prio;
</VARIABLE>
<USER_FUNCTION>
<NAME>hash_func</NAME>
<RETURNS>int </RETURNS>
void *handle, const void *text, size_t size
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>reset_func</NAME>
<RETURNS>void </RETURNS>
void *ctx
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>output_func</NAME>
<RETURNS>int </RETURNS>
void *src_ctx, void *digest, size_t digestsize
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>deinit_func</NAME>
<RETURNS>void </RETURNS>
void *handle
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_calc_dh_secret</NAME>
<RETURNS>int  </RETURNS>
bigint_t* ret_y, bigint_t * ret_x, bigint_t g, bigint_t, unsigned int q_bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_calc_dh_key</NAME>
<RETURNS>int  </RETURNS>
bigint_t* key, bigint_t f, bigint_t x, bigint_t prime 
</FUNCTION>
<VARIABLE>
<NAME>crypto_cipher_prio</NAME>
extern int crypto_cipher_prio;
</VARIABLE>
<USER_FUNCTION>
<NAME>cipher_encrypt_func</NAME>
<RETURNS>int </RETURNS>
void *hd, const void *plaintext, size_t,
                                    void *ciphertext, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cipher_decrypt_func</NAME>
<RETURNS>int </RETURNS>
void *hd, const void *ciphertext, size_t,
                                    void *plaintext, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cipher_deinit_func</NAME>
<RETURNS>void </RETURNS>
void *hd
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cipher_auth_func</NAME>
<RETURNS>int </RETURNS>
void *hd, const void *data, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cipher_setiv_func</NAME>
<RETURNS>int </RETURNS>
void *hd, const void *iv, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>cipher_tag_func</NAME>
<RETURNS>void </RETURNS>
void *hd, void *tag, size_t
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_is_secure_memory</NAME>
<RETURNS>int  </RETURNS>
const void *mem 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_init</NAME>
<RETURNS>int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_crypto_deinit</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_E_INT_RET_0</NAME>
#define GNUTLS_E_INT_RET_0 -1251
</MACRO>
<MACRO>
<NAME>gnutls_assert</NAME>
#define gnutls_assert() _gnutls_debug_log( "ASSERT: %s:%d\n", __FILE__,__LINE__);
</MACRO>
<MACRO>
<NAME>LEVEL</NAME>
#define LEVEL(l, ...) do { if (unlikely(_gnutls_log_level >= l)) \
      _gnutls_log( l, __VA_ARGS__); } while(0)
</MACRO>
<MACRO>
<NAME>LEVEL_EQ</NAME>
#define LEVEL_EQ(l, ...) do { if (unlikely(_gnutls_log_level == l || _gnutls_log_level > 9)) \
      _gnutls_log( l, __VA_ARGS__); } while(0)
</MACRO>
<FUNCTION>
<NAME>gnutls_assert_val_int</NAME>
<RETURNS>int  </RETURNS>
int val, const char *file, int line) { _gnutls_debug_log ("ASSERT: %s:%d\n", file, line 
</FUNCTION>
<MACRO>
<NAME>gnutls_assert_val</NAME>
#define gnutls_assert_val(x) gnutls_assert_val_int(x, __FILE__, __LINE__)
</MACRO>
<MACRO>
<NAME>gnutls_assert_val_fatal</NAME>
#define gnutls_assert_val_fatal(x) (((x)!=GNUTLS_E_AGAIN && (x)!=GNUTLS_E_INTERRUPTED)?gnutls_assert_val_int(x, __FILE__, __LINE__):(x))
</MACRO>
<MACRO>
<NAME>_</NAME>
#define _(String) dgettext (PACKAGE, String)
</MACRO>
<MACRO>
<NAME>MAX_CN</NAME>
#define MAX_CN 256
</MACRO>
<MACRO>
<NAME>MAX_DN</NAME>
#define MAX_DN 1024
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND</NAME>
#define BUFFER_APPEND(b, x, s) { \
        ret = _gnutls_buffer_append_data(b, x, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND_PFX4</NAME>
#define BUFFER_APPEND_PFX4(b, x, s) { \
        ret = _gnutls_buffer_append_data_prefix(b, 32, x, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND_PFX3</NAME>
#define BUFFER_APPEND_PFX3(b, x, s) { \
        ret = _gnutls_buffer_append_data_prefix(b, 24, x, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND_PFX2</NAME>
#define BUFFER_APPEND_PFX2(b, x, s) { \
        ret = _gnutls_buffer_append_data_prefix(b, 16, x, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND_PFX1</NAME>
#define BUFFER_APPEND_PFX1(b, x, s) { \
        ret = _gnutls_buffer_append_data_prefix(b, 8, x, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_APPEND_NUM</NAME>
#define BUFFER_APPEND_NUM(b, s) { \
        ret = _gnutls_buffer_append_prefix(b, 32, s); \
        if (ret < 0) { \
            gnutls_assert(); \
            return ret; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_POP</NAME>
#define BUFFER_POP(b, x, s) { \
        size_t is = s; \
        _gnutls_buffer_pop_data(b, x, &is); \
        if (is != s) { \
            ret = GNUTLS_E_PARSING_ERROR; \
            gnutls_assert(); \
            goto error; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_POP_DATUM</NAME>
#define BUFFER_POP_DATUM(b, o) { \
        gnutls_datum_t d; \
        ret = _gnutls_buffer_pop_datum_prefix(b, &d); \
        if (ret >= 0) \
            ret = _gnutls_set_datum (o, d.data, d.size); \
        if (ret < 0) { \
            gnutls_assert(); \
            goto error; \
        } \
    }
</MACRO>
<MACRO>
<NAME>BUFFER_POP_NUM</NAME>
#define BUFFER_POP_NUM(b, o) { \
        size_t s; \
        ret = _gnutls_buffer_pop_prefix(b, &s, 0); \
        if (ret < 0) { \
            gnutls_assert(); \
            goto error; \
        } \
        o = s; \
    }
</MACRO>
<VARIABLE>
<NAME>crypto_bigint_prio</NAME>
extern int crypto_bigint_prio;
</VARIABLE>
<MACRO>
<NAME>CHECK_AUTH</NAME>
#define CHECK_AUTH(auth, ret) if (gnutls_auth_get_type(session) != auth) { \
	gnutls_assert(); \
	return ret; \
	}
</MACRO>
<MACRO>
<NAME>DEFAULT_CERT_TYPE</NAME>
#define DEFAULT_CERT_TYPE GNUTLS_CRT_X509
</MACRO>
<MACRO>
<NAME>GNUTLS_RENEGO_PROTECTION_REQUEST_MAJOR</NAME>
#define GNUTLS_RENEGO_PROTECTION_REQUEST_MAJOR 0x00
</MACRO>
<MACRO>
<NAME>GNUTLS_RENEGO_PROTECTION_REQUEST_MINOR</NAME>
#define GNUTLS_RENEGO_PROTECTION_REQUEST_MINOR 0xFF
</MACRO>
<MACRO>
<NAME>MAX_CIPHERSUITE_SIZE</NAME>
#define MAX_CIPHERSUITE_SIZE 512
</MACRO>
<MACRO>
<NAME>GNUTLS_DISTINCT_PK_ALGORITHMS</NAME>
#define GNUTLS_DISTINCT_PK_ALGORITHMS 3
</MACRO>
<TYPEDEF>
<NAME>gnutls_ecc_curve_entry_st</NAME>
typedef struct gnutls_ecc_curve_entry_st gnutls_ecc_curve_entry_st;
</TYPEDEF>
<MACRO>
<NAME>MAX_ECC_CURVE_SIZE</NAME>
#define MAX_ECC_CURVE_SIZE 66
</MACRO>
<MACRO>
<NAME>SRP_MAX_HASH_SIZE</NAME>
#define SRP_MAX_HASH_SIZE 24
</MACRO>
<USER_FUNCTION>
<NAME>gnutls_ext_recv_func</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t session,
                                       const unsigned char *data, size_t len
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_ext_send_func</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t session,
                                       gnutls_buffer_st *extdata
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_ext_deinit_data_func</NAME>
<RETURNS>void </RETURNS>
extension_priv_data_t data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_ext_pack_func</NAME>
<RETURNS>int </RETURNS>
extension_priv_data_t data,
                                     gnutls_buffer_st * packed_data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_ext_unpack_func</NAME>
<RETURNS>int </RETURNS>
gnutls_buffer_st * packed_data,
                                       extension_priv_data_t * data
</USER_FUNCTION>
<MACRO>
<NAME>UINT64DATA</NAME>
# define UINT64DATA(x) ((x).i)
</MACRO>
<VARIABLE>
<NAME>gnutls_mutex_init</NAME>
extern mutex_init_func gnutls_mutex_init;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_mutex_deinit</NAME>
extern mutex_deinit_func gnutls_mutex_deinit;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_mutex_lock</NAME>
extern mutex_lock_func gnutls_mutex_lock;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_mutex_unlock</NAME>
extern mutex_unlock_func gnutls_mutex_unlock;
</VARIABLE>
<MACRO>
<NAME>MAX_DTLS_TIMEOUT</NAME>
#define MAX_DTLS_TIMEOUT 60000
</MACRO>
<MACRO>
<NAME>RETURN_DTLS_EAGAIN_OR_TIMEOUT</NAME>
#define RETURN_DTLS_EAGAIN_OR_TIMEOUT(session, r) { \
  struct timespec now; \
  unsigned int diff; \
  gettime(&now); \
   \
  diff = _dtls_timespec_sub_ms(&now, &session->internals.dtls.handshake_start_time); \
  if (diff > session->internals.dtls.total_timeout_ms) \
    { \
      _gnutls_dtls_log("Session timeout: %u ms\n", diff); \
      return gnutls_assert_val(GNUTLS_E_TIMEDOUT); \
    } \
  else \
    { \
      int rr; \
      if (r != GNUTLS_E_INTERRUPTED) rr = GNUTLS_E_AGAIN; \
      else rr = r; \
      if (session->internals.dtls.blocking != 0) \
        millisleep(50); \
      return gnutls_assert_val(rr); \
    } \
  }
</MACRO>
<VARIABLE>
<NAME>now</NAME>
      time_t now = time(0);
</VARIABLE>
<MACRO>
<NAME>MBUFFER_FLUSH</NAME>
#define MBUFFER_FLUSH 1
</MACRO>
<MACRO>
<NAME>GNUTLS_COMP_FAILED</NAME>
#define GNUTLS_COMP_FAILED NULL
</MACRO>
<TYPEDEF>
<NAME>gnutls_compression_entry</NAME>
typedef struct gnutls_compression_entry gnutls_compression_entry;
</TYPEDEF>
<MACRO>
<NAME>B64SIZE</NAME>
#define B64SIZE( data_size) ((data_size%3==0)?((data_size*4)/3):(4+((data_size/3)*4)))
</MACRO>
<MACRO>
<NAME>B64FSIZE</NAME>
#define B64FSIZE( hsize, dsize) \
	(B64SIZE(dsize) + (hsize) + /*newlines*/ \
	B64SIZE(dsize)/64 + (((B64SIZE(dsize) % 64) > 0) ? 1 : 0))
</MACRO>
<FUNCTION>
<NAME>pk_prepare_hash</NAME>
<RETURNS>int  </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t hash, gnutls_datum_t * output 
</FUNCTION>
<FUNCTION>
<NAME>pk_hash_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t hash, gnutls_pk_params_st * params, const gnutls_datum_t * data, gnutls_datum_t * digest 
</FUNCTION>
<MACRO>
<NAME>HEARTBEAT_REQUEST</NAME>
#define HEARTBEAT_REQUEST 1
</MACRO>
<MACRO>
<NAME>HEARTBEAT_RESPONSE</NAME>
#define HEARTBEAT_RESPONSE 2
</MACRO>
<MACRO>
<NAME>MAX_HEARTBEAT_LENGTH</NAME>
#define MAX_HEARTBEAT_LENGTH DEFAULT_MAX_RECORD_SIZE
</MACRO>
<MACRO>
<NAME>LOCAL_ALLOWED_TO_SEND</NAME>
#define LOCAL_ALLOWED_TO_SEND (1<<2)
</MACRO>
<MACRO>
<NAME>LOCAL_NOT_ALLOWED_TO_SEND</NAME>
#define LOCAL_NOT_ALLOWED_TO_SEND (1<<3)
</MACRO>
<MACRO>
<NAME>HEARTBEAT_DEFAULT_POLICY</NAME>
#define HEARTBEAT_DEFAULT_POLICY PEER_NOT_ALLOWED_TO_SEND
</MACRO>
<VARIABLE>
<NAME>ext_mod_heartbeat</NAME>
extern extension_entry_st ext_mod_heartbeat;
</VARIABLE>
<TYPEDEF>
<NAME>heartbeat_policy_t</NAME>
typedef uint8_t heartbeat_policy_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_heartbeat_timeout</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, int check_only 
</FUNCTION>
<VARIABLE>
<NAME>ext_mod_supported_ecc</NAME>
extern extension_entry_st ext_mod_supported_ecc;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_supported_ecc_pf</NAME>
extern extension_entry_st ext_mod_supported_ecc_pf;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_status_request</NAME>
extern extension_entry_st ext_mod_status_request;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_cert_type</NAME>
extern extension_entry_st ext_mod_cert_type;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_session_ticket</NAME>
extern extension_entry_st ext_mod_session_ticket;
</VARIABLE>
<MACRO>
<NAME>MAX_SRTP_PROFILES</NAME>
#define MAX_SRTP_PROFILES 4
</MACRO>
<VARIABLE>
<NAME>ext_mod_srtp</NAME>
extern extension_entry_st ext_mod_srtp;
</VARIABLE>
<MACRO>
<NAME>IS_SRP_KX</NAME>
#define IS_SRP_KX(kx) ((kx == GNUTLS_KX_SRP || (kx == GNUTLS_KX_SRP_RSA) || \
          kx == GNUTLS_KX_SRP_DSS)?1:0)
</MACRO>
<VARIABLE>
<NAME>ext_mod_srp</NAME>
extern extension_entry_st ext_mod_srp;
</VARIABLE>
<MACRO>
<NAME>MAX_SERVER_NAME_EXTENSIONS</NAME>
#define MAX_SERVER_NAME_EXTENSIONS 3
</MACRO>
<VARIABLE>
<NAME>ext_mod_server_name</NAME>
extern extension_entry_st ext_mod_server_name;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_sr</NAME>
extern extension_entry_st ext_mod_sr;
</VARIABLE>
<VARIABLE>
<NAME>ext_mod_sig</NAME>
extern extension_entry_st ext_mod_sig;
</VARIABLE>
<FUNCTION>
<NAME>gnutls_sign_algorithm_set</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t session, gnutls_sign_algorithm_t sign
</FUNCTION>
<VARIABLE>
<NAME>ext_mod_max_record_size</NAME>
extern extension_entry_st ext_mod_max_record_size;
</VARIABLE>
<MACRO>
<NAME>ECC_SECP_CURVES_ONLY</NAME>
#define ECC_SECP_CURVES_ONLY
</MACRO>
<MACRO>
<NAME>PK_PRIVATE</NAME>
#define PK_PRIVATE 1
</MACRO>
<MACRO>
<NAME>PK_PUBLIC</NAME>
#define PK_PUBLIC 2
</MACRO>
<MACRO>
<NAME>ECC_BUF_SIZE</NAME>
#define ECC_BUF_SIZE 512
</MACRO>
<MACRO>
<NAME>ECC_MAXSIZE</NAME>
#define ECC_MAXSIZE  66
</MACRO>
<MACRO>
<NAME>WMNAF_WINSIZE</NAME>
#define WMNAF_WINSIZE 4
</MACRO>
<MACRO>
<NAME>WMNAF_PRECOMPUTED_LENGTH</NAME>
#define WMNAF_PRECOMPUTED_LENGTH (1 << (WMNAF_WINSIZE - 1))
</MACRO>
<STRUCT>
<NAME>ecc_set_type</NAME>
typedef struct {
   /** The size of the curve in octets */
   int size;

   /** name of curve */
   const char *name; 

   /** The prime that defines the field the curve is in (encoded in hex) */
   const char *prime;

   /** The fields A param (hex) */
   const char *A;

   /** The fields B param (hex) */
   const char *B;

   /** The order of the curve (hex) */
   const char *order;

   /** The x co-ordinate of the base point on the curve (hex) */
   const char *Gx;

   /** The y co-ordinate of the base point on the curve (hex) */
   const char *Gy;
} ecc_set_type;
</STRUCT>
<STRUCT>
<NAME>ecc_point</NAME>
typedef struct {
    /** The x co-ordinate */
    mpz_t x;

    /** The y co-ordinate */
    mpz_t y;

    /** The z co-ordinate */
    mpz_t z;
} ecc_point;
</STRUCT>
<STRUCT>
<NAME>ecc_key</NAME>
typedef struct {
    /** Type of key, PK_PRIVATE or PK_PUBLIC */
    int type;

    mpz_t prime;
    mpz_t order;
    mpz_t A;
    mpz_t B;
    mpz_t Gx;
    mpz_t Gy;

    /** The public key */
    ecc_point pubkey;

    /** The private key */
    mpz_t k;
} ecc_key;
</STRUCT>
<FUNCTION>
<NAME>ecc_sizes</NAME>
<RETURNS>void  </RETURNS>
int *low, int *high 
</FUNCTION>
<FUNCTION>
<NAME>ecc_get_size</NAME>
<RETURNS>int   </RETURNS>
ecc_key *key 
</FUNCTION>
<FUNCTION>
<NAME>ecc_make_key</NAME>
<RETURNS>int  </RETURNS>
void *random_ctx, nettle_random_func random, ecc_key *key, const ecc_set_type *dp, gnutls_ecc_curve_t id 
</FUNCTION>
<FUNCTION>
<NAME>ecc_make_key_ex</NAME>
<RETURNS>int  </RETURNS>
void *random_ctx, nettle_random_func random, ecc_key *key, mpz_t prime, mpz_t order, mpz_t A, mpz_t B, mpz_t Gx, mpz_t Gy, gnutls_ecc_curve_t id, int timing_res 
</FUNCTION>
<FUNCTION>
<NAME>ecc_free</NAME>
<RETURNS>void  </RETURNS>
ecc_key *key 
</FUNCTION>
<FUNCTION>
<NAME>ecc_shared_secret</NAME>
<RETURNS>int   </RETURNS>
ecc_key *private_key, ecc_key *public_key, unsigned char *out, unsigned long *outlen 
</FUNCTION>
<FUNCTION>
<NAME>ecc_sign_hash</NAME>
<RETURNS>int  </RETURNS>
const unsigned char *in,  unsigned long inlen, struct dsa_signature *signature, void *random_ctx, nettle_random_func random, ecc_key *key, gnutls_ecc_curve_t id 
</FUNCTION>
<FUNCTION>
<NAME>ecc_verify_hash</NAME>
<RETURNS>int   </RETURNS>
struct dsa_signature * signature, const unsigned char *hash, unsigned long hashlen, int *stat, ecc_key *key, gnutls_ecc_curve_t id 
</FUNCTION>
<FUNCTION>
<NAME>ecc_new_point</NAME>
<RETURNS>ecc_point  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>ecc_del_point</NAME>
<RETURNS>void        </RETURNS>
ecc_point *p 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_negate_point</NAME>
<RETURNS>int  </RETURNS>
ecc_point *P, ecc_point *R, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_dbl_point</NAME>
<RETURNS>int  </RETURNS>
ecc_point *P, ecc_point *R, mpz_t a,  mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_add_point</NAME>
<RETURNS>int  </RETURNS>
ecc_point *P, ecc_point *Q, ecc_point *R, mpz_t A, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_madd</NAME>
<RETURNS>int  </RETURNS>
ecc_point* P, ecc_point* Q, ecc_point* R, mpz_t a, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_wMNAF</NAME>
<RETURNS>signed char * </RETURNS>
mpz_t x, size_t *ret_len 
</FUNCTION>
<FUNCTION>
<NAME>ecc_mulmod</NAME>
<RETURNS>int  </RETURNS>
mpz_t k, ecc_point *G, ecc_point *R, mpz_t a, mpz_t modulus, int map 
</FUNCTION>
<FUNCTION>
<NAME>ecc_wmnaf_cache_init</NAME>
<RETURNS>int   </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>ecc_wmnaf_cache_free</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>ecc_mulmod_cached</NAME>
<RETURNS>int  </RETURNS>
mpz_t k, gnutls_ecc_curve_t id, ecc_point * R, mpz_t a, mpz_t modulus, int map 
</FUNCTION>
<FUNCTION>
<NAME>ecc_mulmod_cached_timing</NAME>
<RETURNS>int  </RETURNS>
mpz_t k, gnutls_ecc_curve_t id, ecc_point * R, mpz_t a, mpz_t modulus, int map 
</FUNCTION>
<FUNCTION>
<NAME>ecc_mulmod_cached_lookup</NAME>
<RETURNS>int  </RETURNS>
mpz_t k, ecc_point *G, ecc_point *R, mpz_t a, mpz_t modulus, int map 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_isneutral</NAME>
<RETURNS>int  </RETURNS>
ecc_point *P, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_map</NAME>
<RETURNS>int  </RETURNS>
ecc_point *P, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>ecc_projective_check_point</NAME>
<RETURNS>int  </RETURNS>
ecc_point * P, mpz_t b, mpz_t modulus 
</FUNCTION>
<FUNCTION>
<NAME>mp_init_multi</NAME>
<RETURNS>int  </RETURNS>
mpz_t *a, ... 
</FUNCTION>
<FUNCTION>
<NAME>mp_clear_multi</NAME>
<RETURNS>void  </RETURNS>
mpz_t *a, ... 
</FUNCTION>
<MACRO>
<NAME>PRIME_CHECK_PARAM</NAME>
#define PRIME_CHECK_PARAM 8
</MACRO>
<MACRO>
<NAME>Estrcpy</NAME>
#define Estrcpy(x,y) _asn1_str_cpy(x,ASN1_MAX_ERROR_DESCRIPTION_SIZE,y)
</MACRO>
<MACRO>
<NAME>Estrcat</NAME>
#define Estrcat(x,y) _asn1_str_cat(x,ASN1_MAX_ERROR_DESCRIPTION_SIZE,y)
</MACRO>
<MACRO>
<NAME>ASN1_API</NAME>
#   define ASN1_API __attribute__((__visibility__("default")))
</MACRO>
<MACRO>
<NAME>ASN1_VERSION</NAME>
#define ASN1_VERSION "3.0"
</MACRO>
<MACRO>
<NAME>ASN1_SUCCESS</NAME>
#define ASN1_SUCCESS			0
</MACRO>
<MACRO>
<NAME>ASN1_FILE_NOT_FOUND</NAME>
#define ASN1_FILE_NOT_FOUND		1
</MACRO>
<MACRO>
<NAME>ASN1_ELEMENT_NOT_FOUND</NAME>
#define ASN1_ELEMENT_NOT_FOUND		2
</MACRO>
<MACRO>
<NAME>ASN1_IDENTIFIER_NOT_FOUND</NAME>
#define ASN1_IDENTIFIER_NOT_FOUND	3
</MACRO>
<MACRO>
<NAME>ASN1_DER_ERROR</NAME>
#define ASN1_DER_ERROR			4
</MACRO>
<MACRO>
<NAME>ASN1_VALUE_NOT_FOUND</NAME>
#define ASN1_VALUE_NOT_FOUND		5
</MACRO>
<MACRO>
<NAME>ASN1_GENERIC_ERROR</NAME>
#define ASN1_GENERIC_ERROR		6
</MACRO>
<MACRO>
<NAME>ASN1_VALUE_NOT_VALID</NAME>
#define ASN1_VALUE_NOT_VALID		7
</MACRO>
<MACRO>
<NAME>ASN1_TAG_ERROR</NAME>
#define ASN1_TAG_ERROR			8
</MACRO>
<MACRO>
<NAME>ASN1_TAG_IMPLICIT</NAME>
#define ASN1_TAG_IMPLICIT		9
</MACRO>
<MACRO>
<NAME>ASN1_ERROR_TYPE_ANY</NAME>
#define ASN1_ERROR_TYPE_ANY		10
</MACRO>
<MACRO>
<NAME>ASN1_SYNTAX_ERROR</NAME>
#define ASN1_SYNTAX_ERROR		11
</MACRO>
<MACRO>
<NAME>ASN1_MEM_ERROR</NAME>
#define ASN1_MEM_ERROR			12
</MACRO>
<MACRO>
<NAME>ASN1_MEM_ALLOC_ERROR</NAME>
#define ASN1_MEM_ALLOC_ERROR		13
</MACRO>
<MACRO>
<NAME>ASN1_DER_OVERFLOW</NAME>
#define ASN1_DER_OVERFLOW		14
</MACRO>
<MACRO>
<NAME>ASN1_NAME_TOO_LONG</NAME>
#define ASN1_NAME_TOO_LONG		15
</MACRO>
<MACRO>
<NAME>ASN1_ARRAY_ERROR</NAME>
#define ASN1_ARRAY_ERROR		16
</MACRO>
<MACRO>
<NAME>ASN1_ELEMENT_NOT_EMPTY</NAME>
#define ASN1_ELEMENT_NOT_EMPTY		17
</MACRO>
<MACRO>
<NAME>ASN1_PRINT_NAME</NAME>
#define ASN1_PRINT_NAME			1
</MACRO>
<MACRO>
<NAME>ASN1_PRINT_NAME_TYPE</NAME>
#define ASN1_PRINT_NAME_TYPE		2
</MACRO>
<MACRO>
<NAME>ASN1_PRINT_NAME_TYPE_VALUE</NAME>
#define ASN1_PRINT_NAME_TYPE_VALUE	3
</MACRO>
<MACRO>
<NAME>ASN1_PRINT_ALL</NAME>
#define ASN1_PRINT_ALL			4
</MACRO>
<MACRO>
<NAME>ASN1_CLASS_UNIVERSAL</NAME>
#define ASN1_CLASS_UNIVERSAL		0x00	/* old: 1 */
</MACRO>
<MACRO>
<NAME>ASN1_CLASS_APPLICATION</NAME>
#define ASN1_CLASS_APPLICATION		0x40	/* old: 2 */
</MACRO>
<MACRO>
<NAME>ASN1_CLASS_CONTEXT_SPECIFIC</NAME>
#define ASN1_CLASS_CONTEXT_SPECIFIC	0x80	/* old: 3 */
</MACRO>
<MACRO>
<NAME>ASN1_CLASS_PRIVATE</NAME>
#define ASN1_CLASS_PRIVATE		0xC0	/* old: 4 */
</MACRO>
<MACRO>
<NAME>ASN1_CLASS_STRUCTURED</NAME>
#define ASN1_CLASS_STRUCTURED		0x20
</MACRO>
<MACRO>
<NAME>ASN1_TAG_BOOLEAN</NAME>
#define ASN1_TAG_BOOLEAN		0x01
</MACRO>
<MACRO>
<NAME>ASN1_TAG_INTEGER</NAME>
#define ASN1_TAG_INTEGER		0x02
</MACRO>
<MACRO>
<NAME>ASN1_TAG_SEQUENCE</NAME>
#define ASN1_TAG_SEQUENCE		0x10
</MACRO>
<MACRO>
<NAME>ASN1_TAG_SET</NAME>
#define ASN1_TAG_SET			0x11
</MACRO>
<MACRO>
<NAME>ASN1_TAG_OCTET_STRING</NAME>
#define ASN1_TAG_OCTET_STRING		0x04
</MACRO>
<MACRO>
<NAME>ASN1_TAG_BIT_STRING</NAME>
#define ASN1_TAG_BIT_STRING		0x03
</MACRO>
<MACRO>
<NAME>ASN1_TAG_UTCTime</NAME>
#define ASN1_TAG_UTCTime		0x17
</MACRO>
<MACRO>
<NAME>ASN1_TAG_GENERALIZEDTime</NAME>
#define ASN1_TAG_GENERALIZEDTime	0x18
</MACRO>
<MACRO>
<NAME>ASN1_TAG_OBJECT_ID</NAME>
#define ASN1_TAG_OBJECT_ID		0x06
</MACRO>
<MACRO>
<NAME>ASN1_TAG_ENUMERATED</NAME>
#define ASN1_TAG_ENUMERATED		0x0A
</MACRO>
<MACRO>
<NAME>ASN1_TAG_NULL</NAME>
#define ASN1_TAG_NULL			0x05
</MACRO>
<MACRO>
<NAME>ASN1_TAG_GENERALSTRING</NAME>
#define ASN1_TAG_GENERALSTRING		0x1B
</MACRO>
<TYPEDEF>
<NAME>asn1_node_st</NAME>
  typedef struct asn1_node_st asn1_node_st;
</TYPEDEF>
<TYPEDEF>
<NAME>asn1_node</NAME>
  typedef asn1_node_st *asn1_node;
</TYPEDEF>
<MACRO>
<NAME>ASN1_MAX_NAME_SIZE</NAME>
#define ASN1_MAX_NAME_SIZE 64
</MACRO>
<TYPEDEF>
<NAME>asn1_static_node</NAME>
  typedef struct asn1_static_node_st asn1_static_node;
</TYPEDEF>
<MACRO>
<NAME>ASN1_ETYPE_CONSTANT</NAME>
#define ASN1_ETYPE_CONSTANT       1
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_IDENTIFIER</NAME>
#define ASN1_ETYPE_IDENTIFIER     2
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_INTEGER</NAME>
#define ASN1_ETYPE_INTEGER        3
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_BOOLEAN</NAME>
#define ASN1_ETYPE_BOOLEAN        4
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_SEQUENCE</NAME>
#define ASN1_ETYPE_SEQUENCE       5
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_BIT_STRING</NAME>
#define ASN1_ETYPE_BIT_STRING     6
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_OCTET_STRING</NAME>
#define ASN1_ETYPE_OCTET_STRING   7
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_TAG</NAME>
#define ASN1_ETYPE_TAG            8
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_DEFAULT</NAME>
#define ASN1_ETYPE_DEFAULT        9
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_SIZE</NAME>
#define ASN1_ETYPE_SIZE          10
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_SEQUENCE_OF</NAME>
#define ASN1_ETYPE_SEQUENCE_OF   11
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_OBJECT_ID</NAME>
#define ASN1_ETYPE_OBJECT_ID     12
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_ANY</NAME>
#define ASN1_ETYPE_ANY           13
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_SET</NAME>
#define ASN1_ETYPE_SET           14
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_SET_OF</NAME>
#define ASN1_ETYPE_SET_OF        15
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_DEFINITIONS</NAME>
#define ASN1_ETYPE_DEFINITIONS   16
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_TIME</NAME>
#define ASN1_ETYPE_TIME          17
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_CHOICE</NAME>
#define ASN1_ETYPE_CHOICE        18
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_IMPORTS</NAME>
#define ASN1_ETYPE_IMPORTS       19
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_NULL</NAME>
#define ASN1_ETYPE_NULL          20
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_ENUMERATED</NAME>
#define ASN1_ETYPE_ENUMERATED    21
</MACRO>
<MACRO>
<NAME>ASN1_ETYPE_GENERALSTRING</NAME>
#define ASN1_ETYPE_GENERALSTRING 27
</MACRO>
<TYPEDEF>
<NAME>asn1_data_node_st</NAME>
  typedef struct asn1_data_node_st asn1_data_node_st;
</TYPEDEF>
<MACRO>
<NAME>ASN1_MAX_ERROR_DESCRIPTION_SIZE</NAME>
#define ASN1_MAX_ERROR_DESCRIPTION_SIZE 128
</MACRO>
<FUNCTION>
<NAME>asn1_parser2tree</NAME>
<RETURNS>int </RETURNS>
const char *file_name, asn1_node * definitions, char *errorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_parser2array</NAME>
<RETURNS>int </RETURNS>
const char *inputFileName, const char *outputFileName, const char *vectorName, char *errorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_array2tree</NAME>
<RETURNS>int </RETURNS>
const asn1_static_node * array, asn1_node * definitions, char *errorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_print_structure</NAME>
<RETURNS>void </RETURNS>
FILE * out, asn1_node structure, const char *name, int mode 
</FUNCTION>
<FUNCTION>
<NAME>asn1_create_element</NAME>
<RETURNS>int </RETURNS>
asn1_node definitions, const char *source_name, asn1_node * element 
</FUNCTION>
<FUNCTION>
<NAME>asn1_delete_structure</NAME>
<RETURNS>int  </RETURNS>
asn1_node * structure 
</FUNCTION>
<FUNCTION>
<NAME>asn1_delete_element</NAME>
<RETURNS>int </RETURNS>
asn1_node structure, const char *element_name 
</FUNCTION>
<FUNCTION>
<NAME>asn1_write_value</NAME>
<RETURNS>int </RETURNS>
asn1_node node_root, const char *name, const void *ivalue, int len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_read_value</NAME>
<RETURNS>int </RETURNS>
asn1_node root, const char *name, void *ivalue, int *len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_read_node_value</NAME>
<RETURNS>int </RETURNS>
asn1_node node, asn1_data_node_st* data 
</FUNCTION>
<FUNCTION>
<NAME>asn1_number_of_elements</NAME>
<RETURNS>int </RETURNS>
asn1_node element, const char *name, int *num 
</FUNCTION>
<FUNCTION>
<NAME>asn1_der_coding</NAME>
<RETURNS>int </RETURNS>
asn1_node element, const char *name, void *ider, int *len, char *ErrorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_der_decoding</NAME>
<RETURNS>int </RETURNS>
asn1_node * element, const void *ider, int len, char *errorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_der_decoding_element</NAME>
<RETURNS>int </RETURNS>
asn1_node * structure, const char *elementName, const void *ider, int len, char *errorDescription 
</FUNCTION>
<FUNCTION>
<NAME>asn1_der_decoding_startEnd</NAME>
<RETURNS>int </RETURNS>
asn1_node element, const void *ider, int len, const char *name_element, int *start, int *end 
</FUNCTION>
<FUNCTION>
<NAME>asn1_expand_any_defined_by</NAME>
<RETURNS>int </RETURNS>
asn1_node definitions, asn1_node * element 
</FUNCTION>
<FUNCTION>
<NAME>asn1_expand_octet_string</NAME>
<RETURNS>int </RETURNS>
asn1_node definitions, asn1_node * element, const char *octetName, const char *objectName 
</FUNCTION>
<FUNCTION>
<NAME>asn1_read_tag</NAME>
<RETURNS>int </RETURNS>
asn1_node root, const char *name, int *tagValue, int *classValue 
</FUNCTION>
<FUNCTION>
<NAME>asn1_find_structure_from_oid</NAME>
<RETURNS>const char  *</RETURNS>
asn1_node definitions, const char *oidValue 
</FUNCTION>
<FUNCTION>
<NAME>asn1_check_version</NAME>
<RETURNS>const char  *</RETURNS>
const char *req_version 
</FUNCTION>
<FUNCTION>
<NAME>asn1_strerror</NAME>
<RETURNS>const char  *</RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>asn1_perror</NAME>
<RETURNS>void  </RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>asn1_get_tag_der</NAME>
<RETURNS>int </RETURNS>
const unsigned char *der, int der_len, unsigned char *cls, int *len, unsigned long *tag 
</FUNCTION>
<FUNCTION>
<NAME>asn1_octet_der</NAME>
<RETURNS>void </RETURNS>
const unsigned char *str, int str_len, unsigned char *der, int *der_len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_get_octet_der</NAME>
<RETURNS>int </RETURNS>
const unsigned char *der, int der_len, int *ret_len, unsigned char *str, int str_size, int *str_len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_bit_der</NAME>
<RETURNS>void  </RETURNS>
const unsigned char *str, int bit_len, unsigned char *der, int *der_len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_get_bit_der</NAME>
<RETURNS>int </RETURNS>
const unsigned char *der, int der_len, int *ret_len, unsigned char *str, int str_size, int *bit_len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_get_length_der</NAME>
<RETURNS>long </RETURNS>
const unsigned char *der, int der_len, int *len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_get_length_ber</NAME>
<RETURNS>long </RETURNS>
const unsigned char *ber, int ber_len, int *len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_length_der</NAME>
<RETURNS>void </RETURNS>
unsigned long int len, unsigned char *ans, int *ans_len 
</FUNCTION>
<FUNCTION>
<NAME>asn1_find_node</NAME>
<RETURNS>asn1_node </RETURNS>
asn1_node pointer, const char *name 
</FUNCTION>
<FUNCTION>
<NAME>asn1_copy_node</NAME>
<RETURNS>int </RETURNS>
asn1_node dst, const char *dst_name, asn1_node src, const char *src_name 
</FUNCTION>
<TYPEDEF>
<NAME>asn1_retCode</NAME>
typedef int asn1_retCode;	/* type returned by libtasn1 functions */
</TYPEDEF>
<MACRO>
<NAME>node_asn_struct</NAME>
#define node_asn_struct asn1_node_st
</MACRO>
<MACRO>
<NAME>node_asn</NAME>
#define node_asn asn1_node_st
</MACRO>
<MACRO>
<NAME>ASN1_TYPE</NAME>
#define ASN1_TYPE asn1_node
</MACRO>
<MACRO>
<NAME>ASN1_TYPE_EMPTY</NAME>
#define ASN1_TYPE_EMPTY NULL
</MACRO>
<MACRO>
<NAME>static_struct_asn</NAME>
#define static_struct_asn asn1_static_node_st
</MACRO>
<MACRO>
<NAME>ASN1_ARRAY_TYPE</NAME>
#define ASN1_ARRAY_TYPE asn1_static_node
</MACRO>
<MACRO>
<NAME>asn1_static_node_t</NAME>
#define asn1_static_node_t asn1_static_node
</MACRO>
<MACRO>
<NAME>node_data_struct</NAME>
#define node_data_struct asn1_data_node_st
</MACRO>
<MACRO>
<NAME>ASN1_DATA_NODE</NAME>
#define ASN1_DATA_NODE asn1_data_node_st
</MACRO>
<MACRO>
<NAME>DER_LEN</NAME>
#define DER_LEN 16
</MACRO>
<MACRO>
<NAME>ASN1_SMALL_VALUE_SIZE</NAME>
#define ASN1_SMALL_VALUE_SIZE 16
</MACRO>
<MACRO>
<NAME>MAX_LOG_SIZE</NAME>
#define MAX_LOG_SIZE 1024	/* maximum number of characters of a log message */
</MACRO>
<MACRO>
<NAME>UP</NAME>
#define UP     1
</MACRO>
<MACRO>
<NAME>RIGHT</NAME>
#define RIGHT  2
</MACRO>
<MACRO>
<NAME>DOWN</NAME>
#define DOWN   3
</MACRO>
<MACRO>
<NAME>type_field</NAME>
#define type_field(x)     (x&0xFF)
</MACRO>
<MACRO>
<NAME>TYPE_CONSTANT</NAME>
#define TYPE_CONSTANT      ASN1_ETYPE_CONSTANT
</MACRO>
<MACRO>
<NAME>TYPE_IDENTIFIER</NAME>
#define TYPE_IDENTIFIER    ASN1_ETYPE_IDENTIFIER
</MACRO>
<MACRO>
<NAME>TYPE_INTEGER</NAME>
#define TYPE_INTEGER       ASN1_ETYPE_INTEGER
</MACRO>
<MACRO>
<NAME>TYPE_BOOLEAN</NAME>
#define TYPE_BOOLEAN       ASN1_ETYPE_BOOLEAN
</MACRO>
<MACRO>
<NAME>TYPE_SEQUENCE</NAME>
#define TYPE_SEQUENCE      ASN1_ETYPE_SEQUENCE
</MACRO>
<MACRO>
<NAME>TYPE_BIT_STRING</NAME>
#define TYPE_BIT_STRING    ASN1_ETYPE_BIT_STRING
</MACRO>
<MACRO>
<NAME>TYPE_OCTET_STRING</NAME>
#define TYPE_OCTET_STRING  ASN1_ETYPE_OCTET_STRING
</MACRO>
<MACRO>
<NAME>TYPE_TAG</NAME>
#define TYPE_TAG           ASN1_ETYPE_TAG
</MACRO>
<MACRO>
<NAME>TYPE_DEFAULT</NAME>
#define TYPE_DEFAULT       ASN1_ETYPE_DEFAULT
</MACRO>
<MACRO>
<NAME>TYPE_SIZE</NAME>
#define TYPE_SIZE          ASN1_ETYPE_SIZE
</MACRO>
<MACRO>
<NAME>TYPE_SEQUENCE_OF</NAME>
#define TYPE_SEQUENCE_OF   ASN1_ETYPE_SEQUENCE_OF
</MACRO>
<MACRO>
<NAME>TYPE_OBJECT_ID</NAME>
#define TYPE_OBJECT_ID     ASN1_ETYPE_OBJECT_ID
</MACRO>
<MACRO>
<NAME>TYPE_ANY</NAME>
#define TYPE_ANY           ASN1_ETYPE_ANY
</MACRO>
<MACRO>
<NAME>TYPE_SET</NAME>
#define TYPE_SET           ASN1_ETYPE_SET
</MACRO>
<MACRO>
<NAME>TYPE_SET_OF</NAME>
#define TYPE_SET_OF        ASN1_ETYPE_SET_OF
</MACRO>
<MACRO>
<NAME>TYPE_DEFINITIONS</NAME>
#define TYPE_DEFINITIONS   ASN1_ETYPE_DEFINITIONS
</MACRO>
<MACRO>
<NAME>TYPE_TIME</NAME>
#define TYPE_TIME          ASN1_ETYPE_TIME
</MACRO>
<MACRO>
<NAME>TYPE_CHOICE</NAME>
#define TYPE_CHOICE        ASN1_ETYPE_CHOICE
</MACRO>
<MACRO>
<NAME>TYPE_IMPORTS</NAME>
#define TYPE_IMPORTS       ASN1_ETYPE_IMPORTS
</MACRO>
<MACRO>
<NAME>TYPE_NULL</NAME>
#define TYPE_NULL          ASN1_ETYPE_NULL
</MACRO>
<MACRO>
<NAME>TYPE_ENUMERATED</NAME>
#define TYPE_ENUMERATED    ASN1_ETYPE_ENUMERATED
</MACRO>
<MACRO>
<NAME>TYPE_GENERALSTRING</NAME>
#define TYPE_GENERALSTRING ASN1_ETYPE_GENERALSTRING
</MACRO>
<MACRO>
<NAME>CONST_UNIVERSAL</NAME>
#define CONST_UNIVERSAL   (1<<8)
</MACRO>
<MACRO>
<NAME>CONST_PRIVATE</NAME>
#define CONST_PRIVATE     (1<<9)
</MACRO>
<MACRO>
<NAME>CONST_APPLICATION</NAME>
#define CONST_APPLICATION (1<<10)
</MACRO>
<MACRO>
<NAME>CONST_EXPLICIT</NAME>
#define CONST_EXPLICIT    (1<<11)
</MACRO>
<MACRO>
<NAME>CONST_IMPLICIT</NAME>
#define CONST_IMPLICIT    (1<<12)
</MACRO>
<MACRO>
<NAME>CONST_TAG</NAME>
#define CONST_TAG         (1<<13)	/*  Used in ASN.1 assignement  */
</MACRO>
<MACRO>
<NAME>CONST_OPTION</NAME>
#define CONST_OPTION      (1<<14)
</MACRO>
<MACRO>
<NAME>CONST_DEFAULT</NAME>
#define CONST_DEFAULT     (1<<15)
</MACRO>
<MACRO>
<NAME>CONST_TRUE</NAME>
#define CONST_TRUE        (1<<16)
</MACRO>
<MACRO>
<NAME>CONST_FALSE</NAME>
#define CONST_FALSE       (1<<17)
</MACRO>
<MACRO>
<NAME>CONST_LIST</NAME>
#define CONST_LIST        (1<<18)	/*  Used with TYPE_INTEGER and TYPE_BIT_STRING  */
</MACRO>
<MACRO>
<NAME>CONST_MIN_MAX</NAME>
#define CONST_MIN_MAX     (1<<19)
</MACRO>
<MACRO>
<NAME>CONST_1_PARAM</NAME>
#define CONST_1_PARAM     (1<<20)
</MACRO>
<MACRO>
<NAME>CONST_SIZE</NAME>
#define CONST_SIZE        (1<<21)
</MACRO>
<MACRO>
<NAME>CONST_DEFINED_BY</NAME>
#define CONST_DEFINED_BY  (1<<22)
</MACRO>
<MACRO>
<NAME>CONST_GENERALIZED</NAME>
#define CONST_GENERALIZED (1<<23)
</MACRO>
<MACRO>
<NAME>CONST_UTC</NAME>
#define CONST_UTC         (1<<24)
</MACRO>
<MACRO>
<NAME>CONST_NOT_USED</NAME>
#define CONST_NOT_USED    (1<<26)
</MACRO>
<MACRO>
<NAME>CONST_SET</NAME>
#define CONST_SET         (1<<27)
</MACRO>
<MACRO>
<NAME>CONST_ASSIGN</NAME>
#define CONST_ASSIGN      (1<<28)
</MACRO>
<MACRO>
<NAME>CONST_DOWN</NAME>
#define CONST_DOWN        (1<<29)
</MACRO>
<MACRO>
<NAME>CONST_RIGHT</NAME>
#define CONST_RIGHT       (1<<30)
</MACRO>
<MACRO>
<NAME>MAX_CRQ_EXTENSIONS_SIZE</NAME>
#define MAX_CRQ_EXTENSIONS_SIZE 8*1024
</MACRO>
<MACRO>
<NAME>MAX_OID_SIZE</NAME>
#define MAX_OID_SIZE 128
</MACRO>
<MACRO>
<NAME>HASH_OID_SHA1</NAME>
#define HASH_OID_SHA1 "1.3.14.3.2.26"
</MACRO>
<MACRO>
<NAME>HASH_OID_MD5</NAME>
#define HASH_OID_MD5 "1.2.840.113549.2.5"
</MACRO>
<MACRO>
<NAME>HASH_OID_MD2</NAME>
#define HASH_OID_MD2 "1.2.840.113549.2.2"
</MACRO>
<MACRO>
<NAME>HASH_OID_RMD160</NAME>
#define HASH_OID_RMD160 "1.3.36.3.2.1"
</MACRO>
<MACRO>
<NAME>HASH_OID_SHA224</NAME>
#define HASH_OID_SHA224 "2.16.840.1.101.3.4.2.4"
</MACRO>
<MACRO>
<NAME>HASH_OID_SHA256</NAME>
#define HASH_OID_SHA256 "2.16.840.1.101.3.4.2.1"
</MACRO>
<MACRO>
<NAME>HASH_OID_SHA384</NAME>
#define HASH_OID_SHA384 "2.16.840.1.101.3.4.2.2"
</MACRO>
<MACRO>
<NAME>HASH_OID_SHA512</NAME>
#define HASH_OID_SHA512 "2.16.840.1.101.3.4.2.3"
</MACRO>
<MACRO>
<NAME>OID_X520_COUNTRY_NAME</NAME>
#define OID_X520_COUNTRY_NAME		"2.5.4.6"
</MACRO>
<MACRO>
<NAME>OID_X520_ORGANIZATION_NAME</NAME>
#define OID_X520_ORGANIZATION_NAME	"2.5.4.10"
</MACRO>
<MACRO>
<NAME>OID_X520_ORGANIZATIONAL_UNIT_NAME</NAME>
#define OID_X520_ORGANIZATIONAL_UNIT_NAME "2.5.4.11"
</MACRO>
<MACRO>
<NAME>OID_X520_COMMON_NAME</NAME>
#define OID_X520_COMMON_NAME		"2.5.4.3"
</MACRO>
<MACRO>
<NAME>OID_X520_LOCALITY_NAME</NAME>
#define OID_X520_LOCALITY_NAME		"2.5.4.7"
</MACRO>
<MACRO>
<NAME>OID_X520_STATE_OR_PROVINCE_NAME</NAME>
#define OID_X520_STATE_OR_PROVINCE_NAME	"2.5.4.8"
</MACRO>
<MACRO>
<NAME>OID_LDAP_DC</NAME>
#define OID_LDAP_DC			"0.9.2342.19200300.100.1.25"
</MACRO>
<MACRO>
<NAME>OID_LDAP_UID</NAME>
#define OID_LDAP_UID			"0.9.2342.19200300.100.1.1"
</MACRO>
<MACRO>
<NAME>OID_PKCS9_EMAIL</NAME>
#define OID_PKCS9_EMAIL			"1.2.840.113549.1.9.1"
</MACRO>
<FUNCTION>
<NAME>gnutls_x509_crt_is_issuer</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_crt_t issuer 
</FUNCTION>
<MACRO>
<NAME>MAX_BAG_ELEMENTS</NAME>
#define MAX_BAG_ELEMENTS 32
</MACRO>
<MACRO>
<NAME>BAG_PKCS8_KEY</NAME>
#define BAG_PKCS8_KEY "1.2.840.113549.1.12.10.1.1"
</MACRO>
<MACRO>
<NAME>BAG_PKCS8_ENCRYPTED_KEY</NAME>
#define BAG_PKCS8_ENCRYPTED_KEY "1.2.840.113549.1.12.10.1.2"
</MACRO>
<MACRO>
<NAME>BAG_CERTIFICATE</NAME>
#define BAG_CERTIFICATE "1.2.840.113549.1.12.10.1.3"
</MACRO>
<MACRO>
<NAME>BAG_CRL</NAME>
#define BAG_CRL "1.2.840.113549.1.12.10.1.4"
</MACRO>
<MACRO>
<NAME>BAG_SECRET</NAME>
#define BAG_SECRET "1.2.840.113549.1.12.10.1.5"
</MACRO>
<MACRO>
<NAME>DATA_OID</NAME>
#define DATA_OID "1.2.840.113549.1.7.1"
</MACRO>
<MACRO>
<NAME>ENC_DATA_OID</NAME>
#define ENC_DATA_OID "1.2.840.113549.1.7.6"
</MACRO>
<MACRO>
<NAME>FRIENDLY_NAME_OID</NAME>
#define FRIENDLY_NAME_OID "1.2.840.113549.1.9.20"
</MACRO>
<MACRO>
<NAME>KEY_ID_OID</NAME>
#define KEY_ID_OID "1.2.840.113549.1.9.21"
</MACRO>
<ENUM>
<NAME>schema_id</NAME>
typedef enum schema_id
{
  PBES2_GENERIC,                /* when the algorithm is unknown, temporal use when reading only */
  PBES2_3DES,                   /* the stuff in PKCS #5 */
  PBES2_AES_128,
  PBES2_AES_192,
  PBES2_AES_256,
  PKCS12_3DES_SHA1,             /* the stuff in PKCS #12 */
  PKCS12_ARCFOUR_SHA1,
  PKCS12_RC2_40_SHA1
} schema_id;
</ENUM>
<MACRO>
<NAME>MAX_STRING_LEN</NAME>
#define MAX_STRING_LEN 512
</MACRO>
<MACRO>
<NAME>GNUTLS_XML_SHOW_ALL</NAME>
#define GNUTLS_XML_SHOW_ALL 1
</MACRO>
<MACRO>
<NAME>PEM_CRL</NAME>
#define PEM_CRL "X509 CRL"
</MACRO>
<MACRO>
<NAME>PEM_X509_CERT</NAME>
#define PEM_X509_CERT "X509 CERTIFICATE"
</MACRO>
<MACRO>
<NAME>PEM_X509_CERT2</NAME>
#define PEM_X509_CERT2 "CERTIFICATE"
</MACRO>
<MACRO>
<NAME>PEM_PKCS7</NAME>
#define PEM_PKCS7 "PKCS7"
</MACRO>
<MACRO>
<NAME>PEM_PKCS12</NAME>
#define PEM_PKCS12 "PKCS12"
</MACRO>
<MACRO>
<NAME>PK_PKIX1_RSA_OID</NAME>
#define PK_PKIX1_RSA_OID "1.2.840.113549.1.1.1"
</MACRO>
<MACRO>
<NAME>PK_X509_RSA_OID</NAME>
#define PK_X509_RSA_OID "2.5.8.1.1"
</MACRO>
<MACRO>
<NAME>PK_DSA_OID</NAME>
#define PK_DSA_OID "1.2.840.10040.4.1"
</MACRO>
<MACRO>
<NAME>PK_GOST_R3410_94_OID</NAME>
#define PK_GOST_R3410_94_OID "1.2.643.2.2.20"
</MACRO>
<MACRO>
<NAME>PK_GOST_R3410_2001_OID</NAME>
#define PK_GOST_R3410_2001_OID "1.2.643.2.2.19"
</MACRO>
<MACRO>
<NAME>SIG_DSA_SHA1_OID</NAME>
#define SIG_DSA_SHA1_OID "1.2.840.10040.4.3"
</MACRO>
<MACRO>
<NAME>SIG_DSA_SHA224_OID</NAME>
#define SIG_DSA_SHA224_OID "2.16.840.1.101.3.4.3.1"
</MACRO>
<MACRO>
<NAME>SIG_DSA_SHA256_OID</NAME>
#define SIG_DSA_SHA256_OID "2.16.840.1.101.3.4.3.2"
</MACRO>
<MACRO>
<NAME>SIG_RSA_MD5_OID</NAME>
#define SIG_RSA_MD5_OID "1.2.840.113549.1.1.4"
</MACRO>
<MACRO>
<NAME>SIG_RSA_MD2_OID</NAME>
#define SIG_RSA_MD2_OID "1.2.840.113549.1.1.2"
</MACRO>
<MACRO>
<NAME>SIG_RSA_SHA1_OID</NAME>
#define SIG_RSA_SHA1_OID "1.2.840.113549.1.1.5"
</MACRO>
<MACRO>
<NAME>SIG_RSA_SHA224_OID</NAME>
#define SIG_RSA_SHA224_OID "1.2.840.113549.1.1.14"
</MACRO>
<MACRO>
<NAME>SIG_RSA_SHA256_OID</NAME>
#define SIG_RSA_SHA256_OID "1.2.840.113549.1.1.11"
</MACRO>
<MACRO>
<NAME>SIG_RSA_SHA384_OID</NAME>
#define SIG_RSA_SHA384_OID "1.2.840.113549.1.1.12"
</MACRO>
<MACRO>
<NAME>SIG_RSA_SHA512_OID</NAME>
#define SIG_RSA_SHA512_OID "1.2.840.113549.1.1.13"
</MACRO>
<MACRO>
<NAME>SIG_RSA_RMD160_OID</NAME>
#define SIG_RSA_RMD160_OID "1.3.36.3.3.1.2"
</MACRO>
<MACRO>
<NAME>SIG_GOST_R3410_94_OID</NAME>
#define SIG_GOST_R3410_94_OID "1.2.643.2.2.4"
</MACRO>
<MACRO>
<NAME>SIG_GOST_R3410_2001_OID</NAME>
#define SIG_GOST_R3410_2001_OID "1.2.643.2.2.3"
</MACRO>
<MACRO>
<NAME>ASN1_NULL</NAME>
#define ASN1_NULL "\x05\x00"
</MACRO>
<MACRO>
<NAME>ASN1_NULL_SIZE</NAME>
#define ASN1_NULL_SIZE 2
</MACRO>
<ENUM>
<NAME>x509_string_type</NAME>
typedef enum x509_string_type {
  RV_RAW,
  RV_OCTET_STRING,
  RV_BIT_STRING,
  RV_IA5STRING,
  RV_UTF8STRING
} x509_string_type;
</ENUM>
<FUNCTION>
<NAME>check_if_same_cert</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_crt_t cert1, gnutls_x509_crt_t cert2 
</FUNCTION>
<FUNCTION>
<NAME>get_extension</NAME>
<RETURNS>int  </RETURNS>
ASN1_TYPE asn, const char *root, const char *extension_id, int indx, gnutls_datum_t * ret, unsigned int *_critical 
</FUNCTION>
<FUNCTION>
<NAME>set_extension</NAME>
<RETURNS>int  </RETURNS>
ASN1_TYPE asn, const char *root, const char *ext_id, const gnutls_datum_t * ext_data, unsigned int critical 
</FUNCTION>
<TYPEDEF>
<NAME>key_idx_t</NAME>
typedef struct key_idx_s *key_idx_t;
</TYPEDEF>
<TYPEDEF>
<NAME>key_table_t</NAME>
typedef struct key_table_s *key_table_t;
</TYPEDEF>
<MACRO>
<NAME>OPENCDK_VERSION</NAME>
#define OPENCDK_VERSION "0.6.6"
</MACRO>
<MACRO>
<NAME>OPENCDK_VERSION_MAJOR</NAME>
#define OPENCDK_VERSION_MAJOR 0
</MACRO>
<MACRO>
<NAME>OPENCDK_VERSION_MINOR</NAME>
#define OPENCDK_VERSION_MINOR 6
</MACRO>
<MACRO>
<NAME>OPENCDK_VERSION_PATCH</NAME>
#define OPENCDK_VERSION_PATCH 6
</MACRO>
<TYPEDEF>
<NAME>cdk_ctx_t</NAME>
  typedef struct cdk_ctx_s *cdk_ctx_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_strlist_t</NAME>
  typedef struct cdk_strlist_s *cdk_strlist_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_listkey_t</NAME>
  typedef struct cdk_listkey_s *cdk_listkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_s2k_t</NAME>
  typedef struct cdk_s2k_s *cdk_s2k_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_stream_t</NAME>
  typedef struct cdk_stream_s *cdk_stream_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_prefitem_t</NAME>
  typedef struct cdk_prefitem_s *cdk_prefitem_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_kbnode_t</NAME>
  typedef struct cdk_kbnode_s *cdk_kbnode_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_keydb_hd_t</NAME>
  typedef struct cdk_keydb_hd_s *cdk_keydb_hd_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_keydb_search_t</NAME>
  typedef struct cdk_keydb_search_s *cdk_keydb_search_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_keylist_t</NAME>
  typedef struct cdk_keylist_s *cdk_keylist_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_subpkt_t</NAME>
  typedef struct cdk_subpkt_s *cdk_subpkt_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_keygen_ctx_t</NAME>
  typedef struct cdk_keygen_ctx_s *cdk_keygen_ctx_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_desig_revoker_t</NAME>
  typedef struct cdk_desig_revoker_s *cdk_desig_revoker_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_mpi_t</NAME>
  typedef bigint_t cdk_mpi_t;
</TYPEDEF>
<ENUM>
<NAME>cdk_error_t</NAME>
  typedef enum
  {
    CDK_EOF = -1,
    CDK_Success = 0,
    CDK_General_Error = 1,
    CDK_File_Error = 2,
    CDK_Bad_Sig = 3,
    CDK_Inv_Packet = 4,
    CDK_Inv_Algo = 5,
    CDK_Not_Implemented = 6,
    CDK_Armor_Error = 8,
    CDK_Armor_CRC_Error = 9,
    CDK_MPI_Error = 10,
    CDK_Inv_Value = 11,
    CDK_Error_No_Key = 12,
    CDK_Chksum_Error = 13,
    CDK_Time_Conflict = 14,
    CDK_Zlib_Error = 15,
    CDK_Weak_Key = 16,
    CDK_Out_Of_Core = 17,
    CDK_Wrong_Seckey = 18,
    CDK_Bad_MDC = 19,
    CDK_Inv_Mode = 20,
    CDK_Error_No_Keyring = 21,
    CDK_Wrong_Format = 22,
    CDK_Inv_Packet_Ver = 23,
    CDK_Too_Short = 24,
    CDK_Unusable_Key = 25,
    CDK_No_Data = 26,
    CDK_No_Passphrase = 27,
    CDK_Network_Error = 28
  } cdk_error_t;
</ENUM>
<MACRO>
<NAME>CDK_KEY_USG_ENCR</NAME>
#define CDK_KEY_USG_ENCR (CDK_KEY_USG_COMM_ENCR | CDK_KEY_USG_STORAGE_ENCR)
</MACRO>
<MACRO>
<NAME>CDK_KEY_USG_SIGN</NAME>
#define CDK_KEY_USG_SIGN (CDK_KEY_USG_DATA_SIGN | CDK_KEY_USG_CERT_SIGN)
</MACRO>
<ENUM>
<NAME>cdk_key_flags_t</NAME>
  typedef enum
  {
    CDK_FLAG_KEY_REVOKED = 256,
    CDK_FLAG_KEY_EXPIRED = 512,
    CDK_FLAG_SIG_EXPIRED = 1024
  } cdk_key_flags_t;
</ENUM>
<ENUM>
<NAME>cdk_lit_format_t</NAME>
  typedef enum
  {
    CDK_LITFMT_BINARY = 0,
    CDK_LITFMT_TEXT = 1,
    CDK_LITFMT_UNICODE = 2
  } cdk_lit_format_t;
</ENUM>
<ENUM>
<NAME>cdk_packet_type_t</NAME>
  typedef enum
  {
    CDK_PKT_RESERVED = 0,
    CDK_PKT_PUBKEY_ENC = 1,
    CDK_PKT_SIGNATURE = 2,
    CDK_PKT_ONEPASS_SIG = 4,
    CDK_PKT_SECRET_KEY = 5,
    CDK_PKT_PUBLIC_KEY = 6,
    CDK_PKT_SECRET_SUBKEY = 7,
    CDK_PKT_COMPRESSED = 8,
    CDK_PKT_MARKER = 10,
    CDK_PKT_LITERAL = 11,
    CDK_PKT_RING_TRUST = 12,
    CDK_PKT_USER_ID = 13,
    CDK_PKT_PUBLIC_SUBKEY = 14,
    CDK_PKT_OLD_COMMENT = 16,
    CDK_PKT_ATTRIBUTE = 17,
    CDK_PKT_MDC = 19
  } cdk_packet_type_t;
</ENUM>
<MACRO>
<NAME>MAX_CDK_PK_PARTS</NAME>
#define MAX_CDK_PK_PARTS 4
</MACRO>
<MACRO>
<NAME>MAX_CDK_DATA_PARTS</NAME>
#define MAX_CDK_DATA_PARTS 2
</MACRO>
<MACRO>
<NAME>CDK_PKT_IS_ENCRYPTED</NAME>
#define CDK_PKT_IS_ENCRYPTED(pkttype) (\
     ((pkttype)==CDK_PKT_ENCRYPTED_MDC) \
  || ((pkttype)==CDK_PKT_ENCRYPTED))
</MACRO>
<TYPEDEF>
<NAME>cdk_pkt_signature_t</NAME>
  typedef struct cdk_pkt_signature_s *cdk_pkt_signature_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_userid_t</NAME>
  typedef struct cdk_pkt_userid_s *cdk_pkt_userid_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_pubkey_t</NAME>
  typedef struct cdk_pkt_pubkey_s *cdk_pkt_pubkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pubkey_t</NAME>
  typedef cdk_pkt_pubkey_t cdk_pubkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_seckey_t</NAME>
  typedef struct cdk_pkt_seckey_s *cdk_pkt_seckey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_seckey_t</NAME>
  typedef cdk_pkt_seckey_t cdk_seckey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_onepass_sig_t</NAME>
  typedef struct cdk_pkt_onepass_sig_s *cdk_pkt_onepass_sig_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_pubkey_enc_t</NAME>
  typedef struct cdk_pkt_pubkey_enc_s *cdk_pkt_pubkey_enc_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_encrypted_t</NAME>
  typedef struct cdk_pkt_encrypted_s *cdk_pkt_encrypted_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_mdc_t</NAME>
  typedef struct cdk_pkt_mdc_s *cdk_pkt_mdc_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_literal_t</NAME>
  typedef struct cdk_pkt_literal_s *cdk_pkt_literal_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_pkt_compressed_t</NAME>
  typedef struct cdk_pkt_compressed_s *cdk_pkt_compressed_t;
</TYPEDEF>
<TYPEDEF>
<NAME>cdk_packet_t</NAME>
  typedef struct cdk_packet_s *cdk_packet_t;
</TYPEDEF>
<FUNCTION>
<NAME>cdk_pkt_new</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_packet_t * r_pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pkt_alloc</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_packet_t * r_pkt, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pkt_free</NAME>
<RETURNS>void  </RETURNS>
cdk_packet_t pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pkt_release</NAME>
<RETURNS>void  </RETURNS>
cdk_packet_t pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pkt_read</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t inp, cdk_packet_t pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pkt_write</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t out, cdk_packet_t pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_new</NAME>
<RETURNS>cdk_subpkt_t  </RETURNS>
size_t size 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_free</NAME>
<RETURNS>void  </RETURNS>
cdk_subpkt_t ctx 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_find</NAME>
<RETURNS>cdk_subpkt_t  </RETURNS>
cdk_subpkt_t ctx, size_t type 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_find_next</NAME>
<RETURNS>cdk_subpkt_t  </RETURNS>
cdk_subpkt_t root, size_t type 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_type_count</NAME>
<RETURNS>size_t  </RETURNS>
cdk_subpkt_t ctx, size_t type 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_find_nth</NAME>
<RETURNS>cdk_subpkt_t  </RETURNS>
cdk_subpkt_t ctx, size_t type, size_t index 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_add</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_subpkt_t root, cdk_subpkt_t node 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_get_data</NAME>
<RETURNS>const unsigned char  *</RETURNS>
cdk_subpkt_t ctx, size_t * r_type, size_t * r_nbytes 
</FUNCTION>
<FUNCTION>
<NAME>cdk_subpkt_init</NAME>
<RETURNS>void  </RETURNS>
cdk_subpkt_t node, size_t type, const void *buf, size_t buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_key_desig_revoker_walk</NAME>
<RETURNS>const unsigned char  *</RETURNS>
cdk_desig_revoker_t root, cdk_desig_revoker_t * ctx, int *r_class, int *r_algid 
</FUNCTION>
<MACRO>
<NAME>is_RSA</NAME>
#define is_RSA(a) ((a) == CDK_PK_RSA		\
		   || (a) == CDK_PK_RSA_E	\
		   || (a) == CDK_PK_RSA_S)
</MACRO>
<MACRO>
<NAME>is_ELG</NAME>
#define is_ELG(a) ((a) == CDK_PK_ELG_E)
</MACRO>
<MACRO>
<NAME>is_DSA</NAME>
#define is_DSA(a) ((a) == CDK_PK_DSA)
</MACRO>
<FUNCTION>
<NAME>cdk_pk_encrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, cdk_pkt_pubkey_enc_t pke, bigint_t sk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_decrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_seckey_t sk, cdk_pkt_pubkey_enc_t pke, bigint_t * r_sk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_sign</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_seckey_t sk, cdk_pkt_signature_t sig, const unsigned char *md 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_verify</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, cdk_pkt_signature_t sig, const unsigned char *md 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_mpi</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, size_t idx, unsigned char *buf, size_t buflen, size_t * r_nwritten, size_t * r_nbits 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sk_get_mpi</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_seckey_t sk, size_t idx, unsigned char *buf, size_t buflen, size_t * r_nwritten, size_t * r_nbits 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_nbits</NAME>
<RETURNS>int  </RETURNS>
cdk_pubkey_t pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_npkey</NAME>
<RETURNS>int  </RETURNS>
int algo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_nskey</NAME>
<RETURNS>int  </RETURNS>
int algo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_nsig</NAME>
<RETURNS>int  </RETURNS>
int algo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_nenc</NAME>
<RETURNS>int  </RETURNS>
int algo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_fingerprint</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, unsigned char *fpr 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_to_fingerprint</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, unsigned char *fpr, size_t fprlen, size_t * r_nout 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_fingerprint_get_keyid</NAME>
<RETURNS>unsigned int  </RETURNS>
const unsigned char *fpr, size_t fprlen, unsigned int *keyid 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_get_keyid</NAME>
<RETURNS>unsigned int  </RETURNS>
cdk_pubkey_t pk, unsigned int *keyid 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sk_get_keyid</NAME>
<RETURNS>unsigned int  </RETURNS>
cdk_seckey_t sk, unsigned int *keyid 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sig_get_keyid</NAME>
<RETURNS>unsigned int  </RETURNS>
cdk_pkt_signature_t sig, unsigned int *keyid 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_release</NAME>
<RETURNS>void  </RETURNS>
cdk_pubkey_t pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sk_release</NAME>
<RETURNS>void  </RETURNS>
cdk_seckey_t sk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_from_secret_key</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_seckey_t sk, cdk_pubkey_t * ret_pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pubkey_to_sexp</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_pubkey_t pk, char **sexp, size_t * len 
</FUNCTION>
<FUNCTION>
<NAME>cdk_seckey_to_sexp</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_seckey_t sk, char **sexp, size_t * len 
</FUNCTION>
<FUNCTION>
<NAME>cdk_s2k_new</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_s2k_t * ret_s2k, int mode, int digest_algo, const unsigned char *salt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_s2k_free</NAME>
<RETURNS>void  </RETURNS>
cdk_s2k_t s2k 
</FUNCTION>
<FUNCTION>
<NAME>cdk_armor_encode_buffer</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const unsigned char *inbuf, size_t inlen, char *outbuf, size_t outlen, size_t * nwritten, int type 
</FUNCTION>
<USER_FUNCTION>
<NAME>open</NAME>
<RETURNS>cdk_error_t </RETURNS>
void *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>release</NAME>
<RETURNS>cdk_error_t </RETURNS>
void *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>read</NAME>
<RETURNS>int </RETURNS>
void *, void *buf, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>write</NAME>
<RETURNS>int </RETURNS>
void *, const void *buf, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>seek</NAME>
<RETURNS>int </RETURNS>
void *, off_t
</USER_FUNCTION>
<TYPEDEF>
<NAME>cdk_stream_cbs_t</NAME>
  typedef struct cdk_stream_cbs_s *cdk_stream_cbs_t;
</TYPEDEF>
<FUNCTION>
<NAME>cdk_stream_is_compressed</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_sockopen</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const char *host, unsigned short port, cdk_stream_t * ret_out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_open</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const char *file, cdk_stream_t * ret_s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_new</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const char *file, cdk_stream_t * ret_s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_new_from_cbs</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_cbs_t cbs, void *opa, cdk_stream_t * ret_s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_create</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const char *file, cdk_stream_t * ret_s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_tmp_new</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t * r_out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_tmp_from_mem</NAME>
<RETURNS>cdk_error_t  </RETURNS>
const void *buf, size_t buflen, cdk_stream_t * r_out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_tmp_set_mode</NAME>
<RETURNS>void  </RETURNS>
cdk_stream_t s, int val 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_flush</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_enable_cache</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, int val 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_filter_disable</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, int type 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_close</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_get_length</NAME>
<RETURNS>off_t  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_read</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s, void *buf, size_t count 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_write</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s, const void *buf, size_t count 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_putc</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s, int c 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_getc</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_eof</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_tell</NAME>
<RETURNS>off_t  </RETURNS>
cdk_stream_t s 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_seek</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, off_t offset 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_set_armor_flag</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, int type 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_set_literal_flag</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, cdk_lit_format_t mode, const char *fname 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_set_compress_flag</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, int algo, int level 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_set_hash_flag</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, int algo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_set_text_flag</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, const char *lf 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_kick_off</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t inp, cdk_stream_t out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_mmap</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, unsigned char **ret_buf, size_t * ret_buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_mmap_part</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t s, off_t off, size_t len, unsigned char **ret_buf, size_t * ret_buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_peek</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t inp, unsigned char *buf, size_t buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_new_from_mem</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t * r_hd, int secret, int armor, const void *data, size_t datlen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_check_sk</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, unsigned int *keyid 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_search_start</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_search_t * st, cdk_keydb_hd_t db, int type, void *desc 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_search_release</NAME>
<RETURNS>void  </RETURNS>
cdk_keydb_search_t st 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_search</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_search_t st, cdk_keydb_hd_t hd, cdk_kbnode_t * ret_key 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_free</NAME>
<RETURNS>void  </RETURNS>
cdk_keydb_hd_t hd 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_bykeyid</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, unsigned int *keyid, cdk_kbnode_t * ret_pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_byfpr</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, const unsigned char *fpr, cdk_kbnode_t * ret_pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_bypattern</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, const char *patt, cdk_kbnode_t * ret_pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_pk</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t khd, unsigned int *keyid, cdk_pubkey_t * ret_pk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_sk</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t khd, unsigned int *keyid, cdk_seckey_t * ret_sk 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_get_keyblock</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_stream_t inp, cdk_kbnode_t * ret_key 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_idx_rebuild</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t db, cdk_keydb_search_t dbs 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_export</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, cdk_stream_t out, cdk_strlist_t remusr 
</FUNCTION>
<FUNCTION>
<NAME>cdk_keydb_import</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keydb_hd_t hd, cdk_kbnode_t knode 
</FUNCTION>
<FUNCTION>
<NAME>cdk_listkey_start</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_listkey_t * r_ctx, cdk_keydb_hd_t db, const char *patt, cdk_strlist_t fpatt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_listkey_close</NAME>
<RETURNS>void  </RETURNS>
cdk_listkey_t ctx 
</FUNCTION>
<FUNCTION>
<NAME>cdk_listkey_next</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_listkey_t ctx, cdk_kbnode_t * ret_key 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_new</NAME>
<RETURNS>cdk_kbnode_t  </RETURNS>
cdk_packet_t pkt 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_read_from_mem</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t * ret_node, int armor, const unsigned char *buf, size_t buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_write_to_mem</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t node, unsigned char *buf, size_t * r_nbytes 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_write_to_mem_alloc</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t node, unsigned char **r_buf, size_t * r_buflen 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_release</NAME>
<RETURNS>void  </RETURNS>
cdk_kbnode_t node 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_delete</NAME>
<RETURNS>void  </RETURNS>
cdk_kbnode_t node 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_insert</NAME>
<RETURNS>void  </RETURNS>
cdk_kbnode_t root, cdk_kbnode_t node, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_commit</NAME>
<RETURNS>int  </RETURNS>
cdk_kbnode_t * root 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_remove</NAME>
<RETURNS>void  </RETURNS>
cdk_kbnode_t * root, cdk_kbnode_t node 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_move</NAME>
<RETURNS>void  </RETURNS>
cdk_kbnode_t * root, cdk_kbnode_t node, cdk_kbnode_t where 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_walk</NAME>
<RETURNS>cdk_kbnode_t  </RETURNS>
cdk_kbnode_t root, cdk_kbnode_t * ctx, int all 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_find_packet</NAME>
<RETURNS>cdk_packet_t  </RETURNS>
cdk_kbnode_t node, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_get_packet</NAME>
<RETURNS>cdk_packet_t  </RETURNS>
cdk_kbnode_t node 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_find</NAME>
<RETURNS>cdk_kbnode_t  </RETURNS>
cdk_kbnode_t node, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_find_prev</NAME>
<RETURNS>cdk_kbnode_t  </RETURNS>
cdk_kbnode_t root, cdk_kbnode_t node, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_find_next</NAME>
<RETURNS>cdk_kbnode_t  </RETURNS>
cdk_kbnode_t node, cdk_packet_type_t pkttype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_kbnode_hash</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t node, digest_hd_st * md, int is_v4, cdk_packet_type_t pkttype, int flags 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_check_sigs</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t knode, cdk_keydb_hd_t hd, int *r_status 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pk_check_self_sig</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_kbnode_t knode, int *r_status 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pklist_select_algo</NAME>
<RETURNS>int  </RETURNS>
cdk_keylist_t pkl, int preftype 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pklist_use_mdc</NAME>
<RETURNS>int  </RETURNS>
cdk_keylist_t pkl 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pklist_build</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keylist_t * ret_pkl, cdk_keydb_hd_t hd, cdk_strlist_t remusr, int use 
</FUNCTION>
<FUNCTION>
<NAME>cdk_pklist_release</NAME>
<RETURNS>void  </RETURNS>
cdk_keylist_t pkl 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sklist_build</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keylist_t * ret_skl, cdk_keydb_hd_t db, cdk_ctx_t hd, cdk_strlist_t locusr, int unlock, unsigned int use 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sklist_release</NAME>
<RETURNS>void  </RETURNS>
cdk_keylist_t skl 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sklist_write</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keylist_t skl, cdk_stream_t outp, digest_hd_st * mdctx, int sigclass, int sigver 
</FUNCTION>
<FUNCTION>
<NAME>cdk_sklist_write_onepass</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_keylist_t skl, cdk_stream_t outp, int sigclass, int mdalgo 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_encrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_ctx_t hd, cdk_strlist_t remusr, cdk_stream_t inp, cdk_stream_t out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_stream_decrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_ctx_t hd, cdk_stream_t inp, cdk_stream_t out 
</FUNCTION>
<FUNCTION>
<NAME>cdk_file_encrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_ctx_t hd, cdk_strlist_t remusr, const char *file, const char *output 
</FUNCTION>
<FUNCTION>
<NAME>cdk_file_decrypt</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_ctx_t hd, const char *file, const char *output 
</FUNCTION>
<FUNCTION>
<NAME>cdk_data_transform</NAME>
<RETURNS>cdk_error_t  </RETURNS>
cdk_ctx_t hd, enum cdk_crypto_mode_t mode, cdk_strlist_t locusr, cdk_strlist_t remusr, const void *inbuf, size_t insize, unsigned char **outbuf, size_t * outsize, int modval 
</FUNCTION>
<FUNCTION>
<NAME>cdk_trustdb_get_validity</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t inp, cdk_pkt_userid_t id, int *r_val 
</FUNCTION>
<FUNCTION>
<NAME>cdk_trustdb_get_ownertrust</NAME>
<RETURNS>int  </RETURNS>
cdk_stream_t inp, cdk_pubkey_t pk, int *r_val, int *r_flags 
</FUNCTION>
<FUNCTION>
<NAME>cdk_strlist_free</NAME>
<RETURNS>void  </RETURNS>
cdk_strlist_t sl 
</FUNCTION>
<FUNCTION>
<NAME>cdk_strlist_add</NAME>
<RETURNS>cdk_strlist_t  </RETURNS>
cdk_strlist_t * list, const char *string 
</FUNCTION>
<FUNCTION>
<NAME>cdk_check_version</NAME>
<RETURNS>const char  *</RETURNS>
const char *req_version 
</FUNCTION>
<FUNCTION>
<NAME>cdk_utf8_encode</NAME>
<RETURNS>char  *</RETURNS>
const char *string 
</FUNCTION>
<FUNCTION>
<NAME>cdk_utf8_decode</NAME>
<RETURNS>char  *</RETURNS>
const char *string, size_t length, int delim 
</FUNCTION>
<STRUCT>
<NAME>cdk_ctx_s</NAME>
  struct cdk_ctx_s;
</STRUCT>
<STRUCT>
<NAME>cdk_keylist_s</NAME>
  struct cdk_keylist_s;
</STRUCT>
<STRUCT>
<NAME>cdk_s2k_s</NAME>
  struct cdk_s2k_s;
</STRUCT>
<STRUCT>
<NAME>cdk_stream_s</NAME>
  struct cdk_stream_s;
</STRUCT>
<STRUCT>
<NAME>cdk_kbnode_s</NAME>
  struct cdk_kbnode_s;
</STRUCT>
<STRUCT>
<NAME>cdk_keygen_ctx_s</NAME>
  struct cdk_keygen_ctx_s;
</STRUCT>
<STRUCT>
<NAME>cdk_desig_revoker_s</NAME>
  struct cdk_desig_revoker_s;
</STRUCT>
<STRUCT>
<NAME>cdk_keydb_hd_s</NAME>
  struct cdk_keydb_hd_s;
</STRUCT>
<STRUCT>
<NAME>cdk_keydb_search_s</NAME>
  struct cdk_keydb_search_s;
</STRUCT>
<STRUCT>
<NAME>cdk_subpkt_s</NAME>
  struct cdk_subpkt_s;
</STRUCT>
<STRUCT>
<NAME>cdk_prefitem_s</NAME>
  struct cdk_prefitem_s;
</STRUCT>
<STRUCT>
<NAME>cdk_strlist_s</NAME>
  struct cdk_strlist_s;
</STRUCT>
<STRUCT>
<NAME>cdk_listkey_s</NAME>
  struct cdk_listkey_s;
</STRUCT>
<MACRO>
<NAME>cdk_malloc</NAME>
#define cdk_malloc gnutls_malloc
</MACRO>
<MACRO>
<NAME>cdk_free</NAME>
#define cdk_free gnutls_free
</MACRO>
<MACRO>
<NAME>cdk_calloc</NAME>
#define cdk_calloc gnutls_calloc
</MACRO>
<MACRO>
<NAME>cdk_realloc</NAME>
#define cdk_realloc gnutls_realloc_fast
</MACRO>
<MACRO>
<NAME>cdk_strdup</NAME>
#define cdk_strdup gnutls_strdup
</MACRO>
<MACRO>
<NAME>cdk_salloc</NAME>
#define cdk_salloc gnutls_secure_calloc
</MACRO>
<MACRO>
<NAME>map_gnutls_error</NAME>
#define map_gnutls_error _cdk_map_gnutls_error
</MACRO>
<MACRO>
<NAME>BUFSIZE</NAME>
#define BUFSIZE 8192
</MACRO>
<MACRO>
<NAME>DEF_BLOCKSIZE</NAME>
#define DEF_BLOCKSIZE 8192
</MACRO>
<MACRO>
<NAME>DEF_BLOCKBITS</NAME>
#define DEF_BLOCKBITS   13      /* 2^13 = 8192 */
</MACRO>
<MACRO>
<NAME>KEY_FPR_LEN</NAME>
#define KEY_FPR_LEN 20
</MACRO>
<MACRO>
<NAME>MAX_MPI_BITS</NAME>
#define MAX_MPI_BITS 16384
</MACRO>
<MACRO>
<NAME>MAX_MPI_BYTES</NAME>
#define MAX_MPI_BYTES (MAX_MPI_BITS/8)
</MACRO>
<MACRO>
<NAME>MAX_DIGEST_LEN</NAME>
#define MAX_DIGEST_LEN 64
</MACRO>
<MACRO>
<NAME>IS_UID_SIG</NAME>
#define IS_UID_SIG(s) (((s)->sig_class & ~3) == 0x10)
</MACRO>
<MACRO>
<NAME>IS_UID_REV</NAME>
#define IS_UID_REV(s) ((s)->sig_class == 0x30)
</MACRO>
<MACRO>
<NAME>KEY_CAN_ENCRYPT</NAME>
#define KEY_CAN_ENCRYPT(a) ((_cdk_pk_algo_usage ((a))) & CDK_KEY_USG_ENCR)
</MACRO>
<MACRO>
<NAME>KEY_CAN_SIGN</NAME>
#define KEY_CAN_SIGN(a)    ((_cdk_pk_algo_usage ((a))) & CDK_KEY_USG_SIGN)
</MACRO>
<MACRO>
<NAME>KEY_CAN_AUTH</NAME>
#define KEY_CAN_AUTH(a)    ((_cdk_pk_algo_usage ((a))) & CDK_KEY_USG_AUTH)
</MACRO>
<MACRO>
<NAME>DEBUG_PKT</NAME>
#define DEBUG_PKT 0
</MACRO>
<MACRO>
<NAME>stristr</NAME>
#define stristr(haystack, needle) \
    _cdk_memistr((haystack), strlen (haystack), (needle))
</MACRO>
<MACRO>
<NAME>STREAM_BUFSIZE</NAME>
#define STREAM_BUFSIZE 8192
</MACRO>
<USER_FUNCTION>
<NAME>filter_fnct_t</NAME>
<RETURNS>cdk_error_t </RETURNS>
void *uint8_t, int ctl, FILE * in,
                                      FILE * out
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>passphrase_cb</NAME>
<RETURNS>char *</RETURNS>
void *uint8_t, const char *prompt
</USER_FUNCTION>
<TYPEDEF>
<NAME>byte</NAME>
typedef unsigned char byte;
</TYPEDEF>
<MACRO>
<NAME>HAVE_BYTE_TYPEDEF</NAME>
#define HAVE_BYTE_TYPEDEF
</MACRO>
<TYPEDEF>
<NAME>u16</NAME>
typedef unsigned short u16;
</TYPEDEF>
<MACRO>
<NAME>HAVE_U16_TYPEDEF</NAME>
#define HAVE_U16_TYPEDEF
</MACRO>
<TYPEDEF>
<NAME>u32</NAME>
typedef unsigned int u32;
</TYPEDEF>
<MACRO>
<NAME>HAVE_U32_TYPEDEF</NAME>
#define HAVE_U32_TYPEDEF
</MACRO>
<MACRO>
<NAME>DIM</NAME>
#define DIM(v) (sizeof (v)/sizeof ((v)[0]))
</MACRO>
<MACRO>
<NAME>DIMof</NAME>
#define DIMof(type, member)   DIM(((type *)0)->member)
</MACRO>
<MACRO>
<NAME>GNUTLS_COOKIE_KEY_SIZE</NAME>
#define GNUTLS_COOKIE_KEY_SIZE 16
</MACRO>
<FUNCTION>
<NAME>gnutls_dtls_set_timeouts</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int retrans_timeout, unsigned int total_timeout 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_get_mtu</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_get_data_mtu</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_set_mtu</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int mtu 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_set_data_mtu</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int mtu 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_get_timeout</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_cookie_send</NAME>
<RETURNS>int  </RETURNS>
gnutls_datum_t* key, void* client_data, size_t client_data_size, gnutls_dtls_prestate_st* prestate, gnutls_transport_ptr_t ptr, gnutls_push_func push_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_cookie_verify</NAME>
<RETURNS>int  </RETURNS>
gnutls_datum_t* key, void* client_data, size_t client_data_size, void* _msg, size_t msg_size, gnutls_dtls_prestate_st* prestate 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dtls_prestate_set</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_dtls_prestate_st* prestate 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_get_discarded</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<TYPEDEF>
<NAME>_GNUTLS_GCC_ATTR_DEPRECATED</NAME>
typedef unsigned int gnutls_connection_end_t _GNUTLS_GCC_ATTR_DEPRECATED;
</TYPEDEF>
<MACRO>
<NAME>GNUTLS_A_MISSING_SRP_USERNAME</NAME>
#define GNUTLS_A_MISSING_SRP_USERNAME GNUTLS_A_UNKNOWN_PSK_IDENTITY
</MACRO>
<MACRO>
<NAME>GNUTLS_A_UNKNOWN_SRP_USERNAME</NAME>
#define GNUTLS_A_UNKNOWN_SRP_USERNAME GNUTLS_A_UNKNOWN_PSK_IDENTITY
</MACRO>
<MACRO>
<NAME>GNUTLS_OPENPGP_KEY</NAME>
#define GNUTLS_OPENPGP_KEY GNUTLS_OPENPGP_CERT
</MACRO>
<MACRO>
<NAME>GNUTLS_OPENPGP_KEY_FINGERPRINT</NAME>
#define GNUTLS_OPENPGP_KEY_FINGERPRINT GNUTLS_OPENPGP_CERT_FINGERPRINT
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_send_key</NAME>
#define gnutls_openpgp_send_key gnutls_openpgp_send_cert
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_init</NAME>
#define gnutls_openpgp_key_init gnutls_openpgp_crt_init
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_deinit</NAME>
#define gnutls_openpgp_key_deinit gnutls_openpgp_crt_deinit
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_import</NAME>
#define gnutls_openpgp_key_import gnutls_openpgp_crt_import
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_export</NAME>
#define gnutls_openpgp_key_export gnutls_openpgp_crt_export
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_key_usage</NAME>
#define gnutls_openpgp_key_get_key_usage gnutls_openpgp_crt_get_key_usage
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_fingerprint</NAME>
#define gnutls_openpgp_key_get_fingerprint gnutls_openpgp_crt_get_fingerprint
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_pk_algorithm</NAME>
#define gnutls_openpgp_key_get_pk_algorithm gnutls_openpgp_crt_get_pk_algorithm
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_name</NAME>
#define gnutls_openpgp_key_get_name gnutls_openpgp_crt_get_name
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_version</NAME>
#define gnutls_openpgp_key_get_version gnutls_openpgp_crt_get_version
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_creation_time</NAME>
#define gnutls_openpgp_key_get_creation_time gnutls_openpgp_crt_get_creation_time
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_expiration_time</NAME>
#define gnutls_openpgp_key_get_expiration_time gnutls_openpgp_crt_get_expiration_time
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_get_id</NAME>
#define gnutls_openpgp_key_get_id gnutls_openpgp_crt_get_id
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_key_check_hostname</NAME>
#define gnutls_openpgp_key_check_hostname gnutls_openpgp_crt_check_hostname
</MACRO>
<MACRO>
<NAME>gnutls_openpgp_crt_get_id</NAME>
#define gnutls_openpgp_crt_get_id gnutls_openpgp_crt_get_key_id
</MACRO>
<MACRO>
<NAME>GNUTLS_X509_CRT_FULL</NAME>
#define GNUTLS_X509_CRT_FULL GNUTLS_CRT_PRINT_FULL
</MACRO>
<MACRO>
<NAME>GNUTLS_X509_CRT_ONELINE</NAME>
#define GNUTLS_X509_CRT_ONELINE GNUTLS_CRT_PRINT_ONELINE
</MACRO>
<MACRO>
<NAME>GNUTLS_X509_CRT_UNSIGNED_FULL</NAME>
#define GNUTLS_X509_CRT_UNSIGNED_FULL GNUTLS_CRT_PRINT_UNSIGNED_FULL
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_VERSION</NAME>
#define LIBGNUTLS_VERSION GNUTLS_VERSION
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_VERSION_MAJOR</NAME>
#define LIBGNUTLS_VERSION_MAJOR GNUTLS_VERSION_MAJOR
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_VERSION_MINOR</NAME>
#define LIBGNUTLS_VERSION_MINOR GNUTLS_VERSION_MINOR
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_VERSION_PATCH</NAME>
#define LIBGNUTLS_VERSION_PATCH GNUTLS_VERSION_PATCH
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_VERSION_NUMBER</NAME>
#define LIBGNUTLS_VERSION_NUMBER GNUTLS_VERSION_NUMBER
</MACRO>
<MACRO>
<NAME>LIBGNUTLS_EXTRA_VERSION</NAME>
#define LIBGNUTLS_EXTRA_VERSION GNUTLS_VERSION
</MACRO>
<FUNCTION>
<NAME>gnutls_certificate_client_set_retrieve_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t cred, gnutls_certificate_client_retrieve_function * func) _GNUTLS_GCC_ATTR_DEPRECATED; void gnutls_certificate_server_set_retrieve_function (gnutls_certificate_credentials_t cred, gnutls_certificate_server_retrieve_function * func) _GNUTLS_GCC_ATTR_DEPRECATED; typedef int (*gnutls_sign_func) (gnutls_session_t session, void *userdata, gnutls_certificate_type_t cert_type, const gnutls_datum_t * cert, const gnutls_datum_t * hash, gnutls_datum_t * signature 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_callback_set</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t session, gnutls_sign_func sign_func, void *userdata) _GNUTLS_GCC_ATTR_DEPRECATED; gnutls_sign_func gnutls_sign_callback_get (gnutls_session_t session, void **userdata) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_privkey_sign_hash (gnutls_x509_privkey_t key, const gnutls_datum_t * hash, gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_openpgp_privkey_sign_hash (gnutls_openpgp_privkey_t key, const gnutls_datum_t * hash, gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_privkey_sign_data (gnutls_x509_privkey_t key, gnutls_digest_algorithm_t digest, unsigned int flags, const gnutls_datum_t * data, void *signature, size_t * signature_size) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crt_verify_data (gnutls_x509_crt_t crt, unsigned int flags, const gnutls_datum_t * data, const gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crt_verify_hash (gnutls_x509_crt_t crt, unsigned int flags, const gnutls_datum_t * hash, const gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crt_get_verify_algorithm (gnutls_x509_crt_t crt, const gnutls_datum_t * signature, gnutls_digest_algorithm_t * hash) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crt_get_preferred_hash_algorithm (gnutls_x509_crt_t crt, gnutls_digest_algorithm_t * hash, unsigned int *mand) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crq_sign (gnutls_x509_crq_t crq, gnutls_x509_privkey_t key) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_x509_crl_sign (gnutls_x509_crl_t crl, gnutls_x509_crt_t issuer, gnutls_x509_privkey_t issuer_key) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_cipher_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_mac_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_compression_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_kx_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_protocol_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_certificate_type_set_priority (gnutls_session_t session, const int *list) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_init (gnutls_rsa_params_t * rsa_params) _GNUTLS_GCC_ATTR_DEPRECATED; void gnutls_rsa_params_deinit (gnutls_rsa_params_t rsa_params) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_cpy (gnutls_rsa_params_t dst, gnutls_rsa_params_t src) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_import_raw (gnutls_rsa_params_t rsa_params, const gnutls_datum_t * m, const gnutls_datum_t * e, const gnutls_datum_t * d, const gnutls_datum_t * p, const gnutls_datum_t * q, const gnutls_datum_t * u 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_rsa_params_generate2</NAME>
<RETURNS>int  </RETURNS>
gnutls_rsa_params_t params, unsigned int bits) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_export_raw (gnutls_rsa_params_t rsa, gnutls_datum_t * m, gnutls_datum_t * e, gnutls_datum_t * d, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * u, unsigned int *bits) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_export_pkcs1 (gnutls_rsa_params_t params, gnutls_x509_crt_fmt_t format, unsigned char *params_data, size_t * params_data_size) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_params_import_pkcs1 (gnutls_rsa_params_t params, const gnutls_datum_t * pkcs1_params, gnutls_x509_crt_fmt_t format) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_export_get_pubkey (gnutls_session_t session, gnutls_datum_t * exponent, gnutls_datum_t * modulus) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_rsa_export_get_modulus_bits (gnutls_session_t session) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_set_default_export_priority (gnutls_session_t session) _GNUTLS_GCC_ATTR_DEPRECATED; void gnutls_certificate_set_rsa_export_params (gnutls_certificate_credentials_t res, gnutls_rsa_params_t rsa_params) _GNUTLS_GCC_ATTR_DEPRECATED; #ifdef _ISOC99_SOURCE static inline const void *gnutls_session_get_server_random (gnutls_session_t session) _GNUTLS_GCC_ATTR_DEPRECATED; static inline const void *gnutls_session_get_server_random (gnutls_session_t session) { gnutls_datum_t rnd; gnutls_session_get_random(session, NULL, &rnd 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_OCSP_NONCE</NAME>
#define GNUTLS_OCSP_NONCE "1.3.6.1.5.5.7.48.1.2"
</MACRO>
<ENUM>
<NAME>gnutls_ocsp_print_formats_t</NAME>
typedef enum gnutls_ocsp_print_formats_t
  {
    GNUTLS_OCSP_PRINT_FULL = 0,
    GNUTLS_OCSP_PRINT_COMPACT = 1,
  } gnutls_ocsp_print_formats_t;
</ENUM>
<ENUM>
<NAME>gnutls_ocsp_resp_status_t</NAME>
typedef enum gnutls_ocsp_resp_status_t
  {
    GNUTLS_OCSP_RESP_SUCCESSFUL = 0,
    GNUTLS_OCSP_RESP_MALFORMEDREQUEST = 1,
    GNUTLS_OCSP_RESP_INTERNALERROR = 2,
    GNUTLS_OCSP_RESP_TRYLATER = 3,
    GNUTLS_OCSP_RESP_SIGREQUIRED = 5,
    GNUTLS_OCSP_RESP_UNAUTHORIZED = 6
  } gnutls_ocsp_resp_status_t;
</ENUM>
<ENUM>
<NAME>gnutls_ocsp_cert_status_t</NAME>
typedef enum gnutls_ocsp_cert_status_t
  {
    GNUTLS_OCSP_CERT_GOOD = 0,
    GNUTLS_OCSP_CERT_REVOKED = 1,
    GNUTLS_OCSP_CERT_UNKNOWN = 2
  } gnutls_ocsp_cert_status_t;
</ENUM>
<ENUM>
<NAME>gnutls_x509_crl_reason_t</NAME>
typedef enum gnutls_x509_crl_reason_t
  {
    GNUTLS_X509_CRLREASON_UNSPECIFIED = 0,
    GNUTLS_X509_CRLREASON_KEYCOMPROMISE = 1,
    GNUTLS_X509_CRLREASON_CACOMPROMISE = 2,
    GNUTLS_X509_CRLREASON_AFFILIATIONCHANGED = 3,
    GNUTLS_X509_CRLREASON_SUPERSEDED = 4,
    GNUTLS_X509_CRLREASON_CESSATIONOFOPERATION = 5,
    GNUTLS_X509_CRLREASON_CERTIFICATEHOLD = 6,
    GNUTLS_X509_CRLREASON_REMOVEFROMCRL = 8,
    GNUTLS_X509_CRLREASON_PRIVILEGEWITHDRAWN = 9,
    GNUTLS_X509_CRLREASON_AACOMPROMISE = 10
  } gnutls_x509_crl_reason_t;
</ENUM>
<ENUM>
<NAME>gnutls_ocsp_verify_reason_t</NAME>
typedef enum gnutls_ocsp_verify_reason_t
  {
    GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND = 1,
    GNUTLS_OCSP_VERIFY_SIGNER_KEYUSAGE_ERROR = 2,
    GNUTLS_OCSP_VERIFY_UNTRUSTED_SIGNER = 4,
    GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM = 8,
    GNUTLS_OCSP_VERIFY_SIGNATURE_FAILURE = 16,
    GNUTLS_OCSP_VERIFY_CERT_NOT_ACTIVATED = 32,
    GNUTLS_OCSP_VERIFY_CERT_EXPIRED = 64
  } gnutls_ocsp_verify_reason_t;
</ENUM>
<TYPEDEF>
<NAME>gnutls_ocsp_req_t</NAME>
  typedef struct gnutls_ocsp_req_int *gnutls_ocsp_req_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_ocsp_req_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t * req 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_ocsp_req_t req 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, const gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, gnutls_ocsp_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_get_cert_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, unsigned indx, gnutls_digest_algorithm_t *digest, gnutls_datum_t *issuer_name_hash, gnutls_datum_t *issuer_key_hash, gnutls_datum_t *serial_number 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_add_cert_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, gnutls_digest_algorithm_t digest, const gnutls_datum_t *issuer_name_hash, const gnutls_datum_t *issuer_key_hash, const gnutls_datum_t *serial_number 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_add_cert</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, gnutls_digest_algorithm_t digest, gnutls_x509_crt_t issuer, gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_get_extension</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, unsigned indx, gnutls_datum_t *oid, unsigned int *critical, gnutls_datum_t *data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_set_extension</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, const char *oid, unsigned int critical, const gnutls_datum_t *data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_get_nonce</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, unsigned int *critical, gnutls_datum_t *nonce 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_set_nonce</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req, unsigned int critical, const gnutls_datum_t *nonce 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_req_randomize_nonce</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_req_t req 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_ocsp_resp_t</NAME>
  typedef struct gnutls_ocsp_resp_int *gnutls_ocsp_resp_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_ocsp_resp_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t * resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_ocsp_resp_t resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, const gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_ocsp_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_response</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_datum_t *response_type_oid, gnutls_datum_t *response 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_responder</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_datum_t *dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_produced</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_ocsp_resp_t resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_single</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, unsigned indx, gnutls_digest_algorithm_t *digest, gnutls_datum_t *issuer_name_hash, gnutls_datum_t *issuer_key_hash, gnutls_datum_t *serial_number, unsigned int *cert_status, time_t *this_update, time_t *next_update, time_t *revocation_time, unsigned int *revocation_reason 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_extension</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, unsigned indx, gnutls_datum_t *oid, unsigned int *critical, gnutls_datum_t *data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_nonce</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, unsigned int *critical, gnutls_datum_t *nonce 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_signature_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_signature</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_datum_t *sig 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_get_certs</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_x509_crt_t ** certs, size_t *ncerts 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_verify_direct</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_x509_crt_t issuer, unsigned int *verify, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_verify</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, gnutls_x509_trust_list_t trustlist, unsigned int *verify, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_resp_check_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_ocsp_resp_t resp, unsigned int indx, gnutls_x509_crt_t crt 
</FUNCTION>
<STRUCT>
<NAME>gnutls_ocsp_req_int</NAME>
  struct gnutls_ocsp_req_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_ocsp_resp_int</NAME>
  struct gnutls_ocsp_resp_int;
</STRUCT>
<MACRO>
<NAME>GNUTLS_PKCS11_MAX_PIN_LEN</NAME>
#define GNUTLS_PKCS11_MAX_PIN_LEN 32
</MACRO>
<USER_FUNCTION>
<NAME>gnutls_pkcs11_token_callback_t</NAME>
<RETURNS>int </RETURNS>
void *const userdata,
                                               const char *const label,
                                               unsigned retry
</USER_FUNCTION>
<TYPEDEF>
<NAME>gnutls_pkcs11_obj_t</NAME>
typedef struct gnutls_pkcs11_obj_st *gnutls_pkcs11_obj_t;
</TYPEDEF>
<MACRO>
<NAME>GNUTLS_PKCS11_FLAG_MANUAL</NAME>
#define GNUTLS_PKCS11_FLAG_MANUAL 0     /* Manual loading of libraries */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_FLAG_AUTO</NAME>
#define GNUTLS_PKCS11_FLAG_AUTO 1       /* Automatically load libraries by reading /etc/gnutls/pkcs11.conf */
</MACRO>
<FUNCTION>
<NAME>gnutls_pkcs11_init</NAME>
<RETURNS>int  </RETURNS>
unsigned int flags, const char *deprecated_config_file 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_reinit</NAME>
<RETURNS>int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_deinit</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_set_token_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs11_token_callback_t fn, void *userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_get_pin_function</NAME>
<RETURNS>gnutls_pin_callback_t  </RETURNS>
void **userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_add_provider</NAME>
<RETURNS>int  </RETURNS>
const char *name, const char *params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t * obj 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs11_obj_t obj, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_LOGIN</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_LOGIN (1<<0)     /* force login in the token for the operation */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_MARK_TRUSTED (1<<1)      /* object marked as trusted */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE (1<<2)    /* object marked as sensitive (unexportable) */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_LOGIN_SO</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_LOGIN_SO (1<<3)     /* force login as a security officer in the token for the operation */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_MARK_PRIVATE (1<<4) /* marked as private (requires PIN to access) */
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_OBJ_FLAG_MARK_NOT_PRIVATE</NAME>
#define GNUTLS_PKCS11_OBJ_FLAG_MARK_NOT_PRIVATE (1<<5) /* marked as not private */
</MACRO>
<ENUM>
<NAME>gnutls_pkcs11_url_type_t</NAME>
typedef enum
  {
    GNUTLS_PKCS11_URL_GENERIC,    /* URL specifies the object on token level */
    GNUTLS_PKCS11_URL_LIB,        /* URL specifies the object on module level */
    GNUTLS_PKCS11_URL_LIB_VERSION /* URL specifies the object on module and version level */
  } gnutls_pkcs11_url_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_import_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t obj, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_export_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t obj, gnutls_pkcs11_url_type_t detailed, char **url 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs11_obj_t obj 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t obj, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t obj, gnutls_datum_t *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_copy_x509_crt</NAME>
<RETURNS>int  </RETURNS>
const char *token_url, gnutls_x509_crt_t crt, const char *label, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_copy_x509_privkey</NAME>
<RETURNS>int  </RETURNS>
const char *token_url, gnutls_x509_privkey_t key, const char *label, unsigned int key_usage , unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_delete_url</NAME>
<RETURNS>int  </RETURNS>
const char *object_url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_copy_secret_key</NAME>
<RETURNS>int  </RETURNS>
const char *token_url, gnutls_datum_t * key, const char *label, unsigned int key_usage  , unsigned int flags 
</FUNCTION>
<ENUM>
<NAME>gnutls_pkcs11_obj_info_t</NAME>
typedef enum
  {
    GNUTLS_PKCS11_OBJ_ID_HEX = 1,
    GNUTLS_PKCS11_OBJ_LABEL,
    GNUTLS_PKCS11_OBJ_TOKEN_LABEL,
    GNUTLS_PKCS11_OBJ_TOKEN_SERIAL,
    GNUTLS_PKCS11_OBJ_TOKEN_MANUFACTURER,
    GNUTLS_PKCS11_OBJ_TOKEN_MODEL,
    GNUTLS_PKCS11_OBJ_ID,
    /* the pkcs11 provider library info  */
    GNUTLS_PKCS11_OBJ_LIBRARY_VERSION,
    GNUTLS_PKCS11_OBJ_LIBRARY_DESCRIPTION,
    GNUTLS_PKCS11_OBJ_LIBRARY_MANUFACTURER
  } gnutls_pkcs11_obj_info_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_get_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t crt, gnutls_pkcs11_obj_info_t itype, void *output, size_t * output_size 
</FUNCTION>
<ENUM>
<NAME>gnutls_pkcs11_obj_attr_t</NAME>
typedef enum
  {
    GNUTLS_PKCS11_OBJ_ATTR_CRT_ALL = 1,   /* all certificates */
    GNUTLS_PKCS11_OBJ_ATTR_CRT_TRUSTED,   /* certificates marked as trusted */
    GNUTLS_PKCS11_OBJ_ATTR_CRT_WITH_PRIVKEY,      /* certificates with corresponding private key */
    GNUTLS_PKCS11_OBJ_ATTR_PUBKEY,        /* public keys */
    GNUTLS_PKCS11_OBJ_ATTR_PRIVKEY,       /* private keys */
    GNUTLS_PKCS11_OBJ_ATTR_ALL    /* everything! */
  } gnutls_pkcs11_obj_attr_t;
</ENUM>
<ENUM>
<NAME>gnutls_pkcs11_token_info_t</NAME>
typedef enum
  {
    GNUTLS_PKCS11_TOKEN_LABEL,
    GNUTLS_PKCS11_TOKEN_SERIAL,
    GNUTLS_PKCS11_TOKEN_MANUFACTURER,
    GNUTLS_PKCS11_TOKEN_MODEL
  } gnutls_pkcs11_token_info_t;
</ENUM>
<ENUM>
<NAME>gnutls_pkcs11_obj_type_t</NAME>
typedef enum
  {
    GNUTLS_PKCS11_OBJ_UNKNOWN,
    GNUTLS_PKCS11_OBJ_X509_CRT,
    GNUTLS_PKCS11_OBJ_PUBKEY,
    GNUTLS_PKCS11_OBJ_PRIVKEY,
    GNUTLS_PKCS11_OBJ_SECRET_KEY,
    GNUTLS_PKCS11_OBJ_DATA
  } gnutls_pkcs11_obj_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pkcs11_token_init</NAME>
<RETURNS>int </RETURNS>
const char *token_url, const char *so_pin, const char *label 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_token_get_mechanism</NAME>
<RETURNS>int </RETURNS>
const char *url, unsigned int idx, unsigned long *mechanism 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_token_set_pin</NAME>
<RETURNS>int  </RETURNS>
const char *token_url, const char *oldpin, const char *newpin, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_token_get_url</NAME>
<RETURNS>int  </RETURNS>
unsigned int seq, gnutls_pkcs11_url_type_t detailed, char **url 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_token_get_info</NAME>
<RETURNS>int  </RETURNS>
const char *url, gnutls_pkcs11_token_info_t ttype, void *output, size_t * output_size 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PKCS11_TOKEN_HW</NAME>
#define GNUTLS_PKCS11_TOKEN_HW 1
</MACRO>
<FUNCTION>
<NAME>gnutls_pkcs11_token_get_flags</NAME>
<RETURNS>int  </RETURNS>
const char *url, unsigned int *flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_list_import_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_obj_t * p_list, unsigned int *const n_list, const char *url, gnutls_pkcs11_obj_attr_t attrs, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_list_import_url2</NAME>
<RETURNS>int </RETURNS>
gnutls_pkcs11_obj_t ** p_list, unsigned int *n_list, const char *url, gnutls_pkcs11_obj_attr_t attrs, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_import_pkcs11</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_pkcs11_obj_t pkcs11_crt 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_import_pkcs11_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_obj_get_type</NAME>
<RETURNS>gnutls_pkcs11_obj_type_t  </RETURNS>
gnutls_pkcs11_obj_t obj 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_type_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_pkcs11_obj_type_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_list_import_pkcs11</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t * certs, unsigned int cert_max, gnutls_pkcs11_obj_t * const objs, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_privkey_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs11_privkey_t key, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs11_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_privkey_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_get_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_privkey_t pkey, gnutls_pkcs11_obj_info_t itype, void *output, size_t * output_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_import_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_privkey_t pkey, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_export_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs11_privkey_t key, gnutls_pkcs11_url_type_t detailed, char **url 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_generate</NAME>
<RETURNS>int  </RETURNS>
const char* url, gnutls_pk_algorithm_t pk, unsigned int bits, const char* label, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs11_privkey_generate2</NAME>
<RETURNS>int </RETURNS>
const char* url, gnutls_pk_algorithm_t pk, unsigned int bits, const char* label, gnutls_x509_crt_fmt_t fmt, gnutls_datum_t * pubkey, unsigned int flags 
</FUNCTION>
<STRUCT>
<NAME>gnutls_pkcs11_obj_st</NAME>
struct gnutls_pkcs11_obj_st;
</STRUCT>
<TYPEDEF>
<NAME>gnutls_pkcs12_t</NAME>
  typedef struct gnutls_pkcs12_int *gnutls_pkcs12_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_pkcs12_bag_t</NAME>
  typedef struct gnutls_pkcs12_bag_int *gnutls_pkcs12_bag_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_pkcs12_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t * pkcs12 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs12_t pkcs12 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, gnutls_x509_crt_fmt_t format, gnutls_datum_t *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_get_bag</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, int indx, gnutls_pkcs12_bag_t bag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_set_bag</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, gnutls_pkcs12_bag_t bag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_generate_mac</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, const char *pass 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_verify_mac</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t pkcs12, const char *pass 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_decrypt</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, const char *pass 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_encrypt</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, const char *pass, unsigned int flags 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED</NAME>
#define GNUTLS_PKCS12_SP_INCLUDE_SELF_SIGNED 1
</MACRO>
<FUNCTION>
<NAME>gnutls_pkcs12_simple_parse</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_t p12, const char *password, gnutls_x509_privkey_t * key, gnutls_x509_crt_t ** chain, unsigned int * chain_len, gnutls_x509_crt_t ** extra_certs, unsigned int * extra_certs_len, gnutls_x509_crl_t * crl, unsigned int flags 
</FUNCTION>
<ENUM>
<NAME>gnutls_pkcs12_bag_type_t</NAME>
  typedef enum gnutls_pkcs12_bag_type_t
  {
    GNUTLS_BAG_EMPTY = 0,
    GNUTLS_BAG_PKCS8_ENCRYPTED_KEY = 1,
    GNUTLS_BAG_PKCS8_KEY = 2,
    GNUTLS_BAG_CERTIFICATE = 3,
    GNUTLS_BAG_CRL = 4,
    GNUTLS_BAG_SECRET = 5,      /* Secret data. Underspecified in pkcs-12,
                                 * gnutls extension. We use the PKCS-9
                                 * random nonce ID 1.2.840.113549.1.9.25.3
                                 * to store randomly generated keys.
                                 */
    GNUTLS_BAG_ENCRYPTED = 10,
    GNUTLS_BAG_UNKNOWN = 20
  } gnutls_pkcs12_bag_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_get_type</NAME>
<RETURNS>gnutls_pkcs12_bag_type_t </RETURNS>
gnutls_pkcs12_bag_t bag, int indx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_get_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, int indx, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_set_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, gnutls_pkcs12_bag_type_t type, const gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_set_crl</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_set_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, gnutls_x509_crt_t crt 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t * bag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs12_bag_t bag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_get_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, int indx, gnutls_datum_t * id 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_set_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, int indx, const gnutls_datum_t * id 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_get_friendly_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, int indx, char **name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs12_bag_set_friendly_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs12_bag_t bag, int indx, const char *name 
</FUNCTION>
<STRUCT>
<NAME>gnutls_pkcs12_bag_int</NAME>
  struct gnutls_pkcs12_bag_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_pkcs12_int</NAME>
  struct gnutls_pkcs12_int;
</STRUCT>
<MACRO>
<NAME>HAVE_SSIZE_T</NAME>
#define HAVE_SSIZE_T
</MACRO>
<MACRO>
<NAME>GNUTLS_VERSION</NAME>
#define GNUTLS_VERSION "3.1.5"
</MACRO>
<MACRO>
<NAME>GNUTLS_VERSION_MAJOR</NAME>
#define GNUTLS_VERSION_MAJOR 3
</MACRO>
<MACRO>
<NAME>GNUTLS_VERSION_MINOR</NAME>
#define GNUTLS_VERSION_MINOR 1
</MACRO>
<MACRO>
<NAME>GNUTLS_VERSION_PATCH</NAME>
#define GNUTLS_VERSION_PATCH 5
</MACRO>
<MACRO>
<NAME>GNUTLS_VERSION_NUMBER</NAME>
#define GNUTLS_VERSION_NUMBER 0x030105
</MACRO>
<MACRO>
<NAME>GNUTLS_CIPHER_RIJNDAEL_128_CBC</NAME>
#define GNUTLS_CIPHER_RIJNDAEL_128_CBC GNUTLS_CIPHER_AES_128_CBC
</MACRO>
<MACRO>
<NAME>GNUTLS_CIPHER_RIJNDAEL_256_CBC</NAME>
#define GNUTLS_CIPHER_RIJNDAEL_256_CBC GNUTLS_CIPHER_AES_256_CBC
</MACRO>
<MACRO>
<NAME>GNUTLS_CIPHER_RIJNDAEL_CBC</NAME>
#define GNUTLS_CIPHER_RIJNDAEL_CBC GNUTLS_CIPHER_AES_128_CBC
</MACRO>
<MACRO>
<NAME>GNUTLS_CIPHER_ARCFOUR</NAME>
#define GNUTLS_CIPHER_ARCFOUR GNUTLS_CIPHER_ARCFOUR_128
</MACRO>
<ENUM>
<NAME>gnutls_cipher_algorithm_t</NAME>
  typedef enum gnutls_cipher_algorithm
  {
    GNUTLS_CIPHER_UNKNOWN = 0,
    GNUTLS_CIPHER_NULL = 1,
    GNUTLS_CIPHER_ARCFOUR_128 = 2,
    GNUTLS_CIPHER_3DES_CBC = 3,
    GNUTLS_CIPHER_AES_128_CBC = 4,
    GNUTLS_CIPHER_AES_256_CBC = 5,
    GNUTLS_CIPHER_ARCFOUR_40 = 6,
    GNUTLS_CIPHER_CAMELLIA_128_CBC = 7,
    GNUTLS_CIPHER_CAMELLIA_256_CBC = 8,
    GNUTLS_CIPHER_RC2_40_CBC = 90,
    GNUTLS_CIPHER_DES_CBC = 91,
    GNUTLS_CIPHER_AES_192_CBC = 92,
    GNUTLS_CIPHER_AES_128_GCM = 93,
    GNUTLS_CIPHER_AES_256_GCM = 94,
    GNUTLS_CIPHER_CAMELLIA_192_CBC = 95,

    /* used only for PGP internals. Ignored in TLS/SSL
     */
    GNUTLS_CIPHER_IDEA_PGP_CFB = 200,
    GNUTLS_CIPHER_3DES_PGP_CFB = 201,
    GNUTLS_CIPHER_CAST5_PGP_CFB = 202,
    GNUTLS_CIPHER_BLOWFISH_PGP_CFB = 203,
    GNUTLS_CIPHER_SAFER_SK128_PGP_CFB = 204,
    GNUTLS_CIPHER_AES128_PGP_CFB = 205,
    GNUTLS_CIPHER_AES192_PGP_CFB = 206,
    GNUTLS_CIPHER_AES256_PGP_CFB = 207,
    GNUTLS_CIPHER_TWOFISH_PGP_CFB = 208
  } gnutls_cipher_algorithm_t;
</ENUM>
<ENUM>
<NAME>gnutls_kx_algorithm_t</NAME>
  typedef enum
  {
    GNUTLS_KX_UNKNOWN = 0,
    GNUTLS_KX_RSA = 1,
    GNUTLS_KX_DHE_DSS = 2,
    GNUTLS_KX_DHE_RSA = 3,
    GNUTLS_KX_ANON_DH = 4,
    GNUTLS_KX_SRP = 5,
    GNUTLS_KX_RSA_EXPORT = 6,
    GNUTLS_KX_SRP_RSA = 7,
    GNUTLS_KX_SRP_DSS = 8,
    GNUTLS_KX_PSK = 9,
    GNUTLS_KX_DHE_PSK = 10,
    GNUTLS_KX_ANON_ECDH = 11,
    GNUTLS_KX_ECDHE_RSA = 12,
    GNUTLS_KX_ECDHE_ECDSA = 13,
    GNUTLS_KX_ECDHE_PSK = 14,
  } gnutls_kx_algorithm_t;
</ENUM>
<ENUM>
<NAME>gnutls_params_type_t</NAME>
  typedef enum
  {
    GNUTLS_PARAMS_RSA_EXPORT = 1,
    GNUTLS_PARAMS_DH = 2,
    GNUTLS_PARAMS_ECDH = 3,
  } gnutls_params_type_t;
</ENUM>
<ENUM>
<NAME>gnutls_credentials_type_t</NAME>
  typedef enum
  {
    GNUTLS_CRD_CERTIFICATE = 1,
    GNUTLS_CRD_ANON,
    GNUTLS_CRD_SRP,
    GNUTLS_CRD_PSK,
    GNUTLS_CRD_IA
  } gnutls_credentials_type_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_MAC_SHA</NAME>
#define GNUTLS_MAC_SHA GNUTLS_MAC_SHA1
</MACRO>
<MACRO>
<NAME>GNUTLS_DIG_SHA</NAME>
#define GNUTLS_DIG_SHA GNUTLS_DIG_SHA1
</MACRO>
<ENUM>
<NAME>gnutls_mac_algorithm_t</NAME>
  typedef enum
  {
    GNUTLS_MAC_UNKNOWN = 0,
    GNUTLS_MAC_NULL = 1,
    GNUTLS_MAC_MD5 = 2,
    GNUTLS_MAC_SHA1 = 3,
    GNUTLS_MAC_RMD160 = 4,
    GNUTLS_MAC_MD2 = 5,
    GNUTLS_MAC_SHA256 = 6,
    GNUTLS_MAC_SHA384 = 7,
    GNUTLS_MAC_SHA512 = 8,
    GNUTLS_MAC_SHA224 = 9,
      /* If you add anything here, make sure you align with
         gnutls_digest_algorithm_t. */
    GNUTLS_MAC_AEAD = 200 /* indicates that MAC is on the cipher */
  } gnutls_mac_algorithm_t;
</ENUM>
<ENUM>
<NAME>gnutls_digest_algorithm_t</NAME>
  typedef enum
  {
    GNUTLS_DIG_UNKNOWN = GNUTLS_MAC_UNKNOWN,
    GNUTLS_DIG_NULL = GNUTLS_MAC_NULL,
    GNUTLS_DIG_MD5 = GNUTLS_MAC_MD5,
    GNUTLS_DIG_SHA1 = GNUTLS_MAC_SHA1,
    GNUTLS_DIG_RMD160 = GNUTLS_MAC_RMD160,
    GNUTLS_DIG_MD2 = GNUTLS_MAC_MD2,
    GNUTLS_DIG_SHA256 = GNUTLS_MAC_SHA256,
    GNUTLS_DIG_SHA384 = GNUTLS_MAC_SHA384,
    GNUTLS_DIG_SHA512 = GNUTLS_MAC_SHA512,
    GNUTLS_DIG_SHA224 = GNUTLS_MAC_SHA224
      /* If you add anything here, make sure you align with
         gnutls_mac_algorithm_t. */
  } gnutls_digest_algorithm_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_MAX_ALGORITHM_NUM</NAME>
#define GNUTLS_MAX_ALGORITHM_NUM 32
</MACRO>
<ENUM>
<NAME>gnutls_compression_method_t</NAME>
  typedef enum
  {
    GNUTLS_COMP_UNKNOWN = 0,
    GNUTLS_COMP_NULL = 1,
    GNUTLS_COMP_DEFLATE = 2,
    GNUTLS_COMP_ZLIB = GNUTLS_COMP_DEFLATE,
  } gnutls_compression_method_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_SERVER</NAME>
#define GNUTLS_SERVER 1
</MACRO>
<MACRO>
<NAME>GNUTLS_CLIENT</NAME>
#define GNUTLS_CLIENT (1<<1)
</MACRO>
<MACRO>
<NAME>GNUTLS_DATAGRAM</NAME>
#define GNUTLS_DATAGRAM (1<<2)
</MACRO>
<MACRO>
<NAME>GNUTLS_NONBLOCK</NAME>
#define GNUTLS_NONBLOCK (1<<3)
</MACRO>
<MACRO>
<NAME>GNUTLS_NO_EXTENSIONS</NAME>
#define GNUTLS_NO_EXTENSIONS (1<<4)
</MACRO>
<ENUM>
<NAME>gnutls_alert_level_t</NAME>
  typedef enum
  {
    GNUTLS_AL_WARNING = 1,
    GNUTLS_AL_FATAL
  } gnutls_alert_level_t;
</ENUM>
<ENUM>
<NAME>gnutls_alert_description_t</NAME>
  typedef enum
  {
    GNUTLS_A_CLOSE_NOTIFY,
    GNUTLS_A_UNEXPECTED_MESSAGE = 10,
    GNUTLS_A_BAD_RECORD_MAC = 20,
    GNUTLS_A_DECRYPTION_FAILED,
    GNUTLS_A_RECORD_OVERFLOW,
    GNUTLS_A_DECOMPRESSION_FAILURE = 30,
    GNUTLS_A_HANDSHAKE_FAILURE = 40,
    GNUTLS_A_SSL3_NO_CERTIFICATE = 41,
    GNUTLS_A_BAD_CERTIFICATE = 42,
    GNUTLS_A_UNSUPPORTED_CERTIFICATE,
    GNUTLS_A_CERTIFICATE_REVOKED,
    GNUTLS_A_CERTIFICATE_EXPIRED,
    GNUTLS_A_CERTIFICATE_UNKNOWN,
    GNUTLS_A_ILLEGAL_PARAMETER,
    GNUTLS_A_UNKNOWN_CA,
    GNUTLS_A_ACCESS_DENIED,
    GNUTLS_A_DECODE_ERROR = 50,
    GNUTLS_A_DECRYPT_ERROR,
    GNUTLS_A_EXPORT_RESTRICTION = 60,
    GNUTLS_A_PROTOCOL_VERSION = 70,
    GNUTLS_A_INSUFFICIENT_SECURITY,
    GNUTLS_A_INTERNAL_ERROR = 80,
    GNUTLS_A_USER_CANCELED = 90,
    GNUTLS_A_NO_RENEGOTIATION = 100,
    GNUTLS_A_UNSUPPORTED_EXTENSION = 110,
    GNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,
    GNUTLS_A_UNRECOGNIZED_NAME = 112,
    GNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,
  } gnutls_alert_description_t;
</ENUM>
<ENUM>
<NAME>gnutls_handshake_description_t</NAME>
  typedef enum
  {
    GNUTLS_HANDSHAKE_HELLO_REQUEST = 0,
    GNUTLS_HANDSHAKE_CLIENT_HELLO = 1,
    GNUTLS_HANDSHAKE_SERVER_HELLO = 2,
    GNUTLS_HANDSHAKE_HELLO_VERIFY_REQUEST = 3,
    GNUTLS_HANDSHAKE_NEW_SESSION_TICKET = 4,
    GNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,
    GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,
    GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,
    GNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,
    GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,
    GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,
    GNUTLS_HANDSHAKE_FINISHED = 20,
    GNUTLS_HANDSHAKE_CERTIFICATE_STATUS = 22,
    GNUTLS_HANDSHAKE_SUPPLEMENTAL = 23,
    GNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC = 254,
    GNUTLS_HANDSHAKE_CLIENT_HELLO_V2 = 1024,
  } gnutls_handshake_description_t;
</ENUM>
<ENUM>
<NAME>gnutls_certificate_status_t</NAME>
  typedef enum
  {
    GNUTLS_CERT_INVALID = 1<<1,
    GNUTLS_CERT_REVOKED = 1<<5,
    GNUTLS_CERT_SIGNER_NOT_FOUND = 1<<6,
    GNUTLS_CERT_SIGNER_NOT_CA = 1<<7,
    GNUTLS_CERT_INSECURE_ALGORITHM = 1<<8,
    GNUTLS_CERT_NOT_ACTIVATED = 1<<9,
    GNUTLS_CERT_EXPIRED = 1<<10,
    GNUTLS_CERT_SIGNATURE_FAILURE = 1<<11,
    GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED = 1<<12,
    GNUTLS_CERT_UNEXPECTED_OWNER = 1<<14,
    GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE = 1<<15,
    GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE = 1<<16,
  } gnutls_certificate_status_t;
</ENUM>
<ENUM>
<NAME>gnutls_certificate_request_t</NAME>
  typedef enum
  {
    GNUTLS_CERT_IGNORE = 0,
    GNUTLS_CERT_REQUEST = 1,
    GNUTLS_CERT_REQUIRE = 2
  } gnutls_certificate_request_t;
</ENUM>
<ENUM>
<NAME>gnutls_openpgp_crt_status_t</NAME>
  typedef enum
  {
    GNUTLS_OPENPGP_CERT = 0,
    GNUTLS_OPENPGP_CERT_FINGERPRINT = 1
  } gnutls_openpgp_crt_status_t;
</ENUM>
<ENUM>
<NAME>gnutls_close_request_t</NAME>
  typedef enum
  {
    GNUTLS_SHUT_RDWR = 0,
    GNUTLS_SHUT_WR = 1
  } gnutls_close_request_t;
</ENUM>
<ENUM>
<NAME>gnutls_protocol_t</NAME>
  typedef enum
  {
    GNUTLS_SSL3 = 1,
    GNUTLS_TLS1_0 = 2,
    GNUTLS_TLS1 = GNUTLS_TLS1_0,
    GNUTLS_TLS1_1 = 3,
    GNUTLS_TLS1_2 = 4,
    GNUTLS_DTLS1_0 = 5,
    GNUTLS_DTLS0_9 = 6,
    GNUTLS_VERSION_MAX = GNUTLS_DTLS0_9,
    GNUTLS_VERSION_UNKNOWN = 0xff
  } gnutls_protocol_t;
</ENUM>
<ENUM>
<NAME>gnutls_certificate_type_t</NAME>
  typedef enum
  {
    GNUTLS_CRT_UNKNOWN = 0,
    GNUTLS_CRT_X509 = 1,
    GNUTLS_CRT_OPENPGP = 2,
    GNUTLS_CRT_RAW = 3
  } gnutls_certificate_type_t;
</ENUM>
<ENUM>
<NAME>gnutls_x509_crt_fmt_t</NAME>
  typedef enum
  {
    GNUTLS_X509_FMT_DER = 0,
    GNUTLS_X509_FMT_PEM = 1
  } gnutls_x509_crt_fmt_t;
</ENUM>
<ENUM>
<NAME>gnutls_certificate_print_formats_t</NAME>
  typedef enum gnutls_certificate_print_formats
  {
    GNUTLS_CRT_PRINT_FULL = 0,
    GNUTLS_CRT_PRINT_ONELINE = 1,
    GNUTLS_CRT_PRINT_UNSIGNED_FULL = 2,
    GNUTLS_CRT_PRINT_COMPACT = 3,
    GNUTLS_CRT_PRINT_FULL_NUMBERS = 4,
  } gnutls_certificate_print_formats_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_PK_ECC</NAME>
#define GNUTLS_PK_ECC GNUTLS_PK_EC
</MACRO>
<ENUM>
<NAME>gnutls_pk_algorithm_t</NAME>
  typedef enum
  {
    GNUTLS_PK_UNKNOWN = 0,
    GNUTLS_PK_RSA = 1,
    GNUTLS_PK_DSA = 2,
    GNUTLS_PK_DH = 3,
    GNUTLS_PK_EC = 4,
  } gnutls_pk_algorithm_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_pk_algorithm_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_pk_algorithm_t algorithm 
</FUNCTION>
<ENUM>
<NAME>gnutls_sign_algorithm_t</NAME>
  typedef enum
  {
    GNUTLS_SIGN_UNKNOWN = 0,
    GNUTLS_SIGN_RSA_SHA1 = 1,
    GNUTLS_SIGN_RSA_SHA = GNUTLS_SIGN_RSA_SHA1,
    GNUTLS_SIGN_DSA_SHA1 = 2,
    GNUTLS_SIGN_DSA_SHA = GNUTLS_SIGN_DSA_SHA1,
    GNUTLS_SIGN_RSA_MD5 = 3,
    GNUTLS_SIGN_RSA_MD2 = 4,
    GNUTLS_SIGN_RSA_RMD160 = 5,
    GNUTLS_SIGN_RSA_SHA256 = 6,
    GNUTLS_SIGN_RSA_SHA384 = 7,
    GNUTLS_SIGN_RSA_SHA512 = 8,
    GNUTLS_SIGN_RSA_SHA224 = 9,
    GNUTLS_SIGN_DSA_SHA224 = 10,
    GNUTLS_SIGN_DSA_SHA256 = 11,
    GNUTLS_SIGN_ECDSA_SHA1 = 12,
    GNUTLS_SIGN_ECDSA_SHA224 = 13,
    GNUTLS_SIGN_ECDSA_SHA256 = 14,
    GNUTLS_SIGN_ECDSA_SHA384 = 15,
    GNUTLS_SIGN_ECDSA_SHA512 = 16,
  } gnutls_sign_algorithm_t;
</ENUM>
<ENUM>
<NAME>gnutls_ecc_curve_t</NAME>
typedef enum
{
  GNUTLS_ECC_CURVE_INVALID=0,
  GNUTLS_ECC_CURVE_SECP224R1,
  GNUTLS_ECC_CURVE_SECP256R1,
  GNUTLS_ECC_CURVE_SECP384R1,
  GNUTLS_ECC_CURVE_SECP521R1,
  GNUTLS_ECC_CURVE_SECP192R1,
} gnutls_ecc_curve_t;
</ENUM>
<ENUM>
<NAME>gnutls_sec_param_t</NAME>
  typedef enum
  {
    GNUTLS_SEC_PARAM_INSECURE = -20,
    GNUTLS_SEC_PARAM_WEAK = -10,
    GNUTLS_SEC_PARAM_UNKNOWN = 0,
    GNUTLS_SEC_PARAM_LOW = 1,
    GNUTLS_SEC_PARAM_LEGACY = 2,
    GNUTLS_SEC_PARAM_NORMAL = 3,
    GNUTLS_SEC_PARAM_HIGH = 4,
    GNUTLS_SEC_PARAM_ULTRA = 5,
  } gnutls_sec_param_t;
</ENUM>
<ENUM>
<NAME>gnutls_channel_binding_t</NAME>
  typedef enum
  {
    GNUTLS_CB_TLS_UNIQUE
  } gnutls_channel_binding_t;
</ENUM>
<TYPEDEF>
<NAME>gnutls_transport_ptr_t</NAME>
  typedef void *gnutls_transport_ptr_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_session_t</NAME>
  typedef struct gnutls_session_int *gnutls_session_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_dh_params_t</NAME>
  typedef struct gnutls_dh_params_int *gnutls_dh_params_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_ecdh_params_t</NAME>
  typedef struct gnutls_ecdh_params_int *gnutls_ecdh_params_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_rsa_params_t</NAME>
  typedef struct gnutls_x509_privkey_int *gnutls_rsa_params_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_priority_t</NAME>
  typedef struct gnutls_priority_st *gnutls_priority_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t * session, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_bye</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_close_request_t how 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT</NAME>
#define GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT ((unsigned int)-1)
</MACRO>
<FUNCTION>
<NAME>gnutls_handshake_set_timeout</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int ms 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_rehandshake</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_alert_get</NAME>
<RETURNS>gnutls_alert_description_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_alert_send</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_alert_level_t level, gnutls_alert_description_t desc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_alert_send_appropriate</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, int err 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_alert_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_alert_description_t alert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_alert_get_strname</NAME>
<RETURNS>const char  * </RETURNS>
gnutls_alert_description_t alert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_bits_to_sec_param</NAME>
<RETURNS>gnutls_sec_param_t  </RETURNS>
gnutls_pk_algorithm_t algo, unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sec_param_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_sec_param_t param 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sec_param_to_pk_bits</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_pk_algorithm_t algo, gnutls_sec_param_t param 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ecc_curve_get_name</NAME>
<RETURNS>const char  * </RETURNS>
gnutls_ecc_curve_t curve 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ecc_curve_get_size</NAME>
<RETURNS>int  </RETURNS>
gnutls_ecc_curve_t curve 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ecc_curve_get</NAME>
<RETURNS>gnutls_ecc_curve_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_get</NAME>
<RETURNS>gnutls_cipher_algorithm_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_kx_get</NAME>
<RETURNS>gnutls_kx_algorithm_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_mac_get</NAME>
<RETURNS>gnutls_mac_algorithm_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_compression_get</NAME>
<RETURNS>gnutls_compression_method_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_type_get</NAME>
<RETURNS>gnutls_certificate_type_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_algorithm_get</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_algorithm_get_requested</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, size_t indx, gnutls_sign_algorithm_t * algo 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_get_key_size</NAME>
<RETURNS>size_t  </RETURNS>
gnutls_cipher_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_mac_get_key_size</NAME>
<RETURNS>size_t  </RETURNS>
gnutls_mac_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_cipher_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_mac_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_mac_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_compression_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_compression_method_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_kx_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_kx_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_type_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_certificate_type_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_pk_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_sign_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_is_secure</NAME>
<RETURNS>int  </RETURNS>
gnutls_sign_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_get_hash_algorithm</NAME>
<RETURNS>gnutls_digest_algorithm_t </RETURNS>
gnutls_sign_algorithm_t sign 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_get_pk_algorithm</NAME>
<RETURNS>gnutls_pk_algorithm_t </RETURNS>
gnutls_sign_algorithm_t sign 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_to_sign</NAME>
<RETURNS>gnutls_sign_algorithm_t </RETURNS>
gnutls_pk_algorithm_t pk, gnutls_digest_algorithm_t hash 
</FUNCTION>
<MACRO>
<NAME>gnutls_sign_algorithm_get_name</NAME>
#define gnutls_sign_algorithm_get_name gnutls_sign_get_name
</MACRO>
<FUNCTION>
<NAME>gnutls_mac_get_id</NAME>
<RETURNS>gnutls_mac_algorithm_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_compression_get_id</NAME>
<RETURNS>gnutls_compression_method_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_get_id</NAME>
<RETURNS>gnutls_cipher_algorithm_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_kx_get_id</NAME>
<RETURNS>gnutls_kx_algorithm_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_protocol_get_id</NAME>
<RETURNS>gnutls_protocol_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_type_get_id</NAME>
<RETURNS>gnutls_certificate_type_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_get_id</NAME>
<RETURNS>gnutls_pk_algorithm_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_get_id</NAME>
<RETURNS>gnutls_sign_algorithm_t  </RETURNS>
const char *name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ecc_curve_list</NAME>
<RETURNS>const gnutls_ecc_curve_t  * </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_list</NAME>
<RETURNS>const gnutls_cipher_algorithm_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_mac_list</NAME>
<RETURNS>const gnutls_mac_algorithm_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_compression_list</NAME>
<RETURNS>const gnutls_compression_method_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_protocol_list</NAME>
<RETURNS>const gnutls_protocol_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_type_list</NAME>
<RETURNS>const gnutls_certificate_type_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_kx_list</NAME>
<RETURNS>const gnutls_kx_algorithm_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pk_list</NAME>
<RETURNS>const gnutls_pk_algorithm_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_sign_list</NAME>
<RETURNS>const gnutls_sign_algorithm_t  *</RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_suite_info</NAME>
<RETURNS>const char  *</RETURNS>
size_t idx, unsigned char *cs_id, gnutls_kx_algorithm_t * kx, gnutls_cipher_algorithm_t * cipher, gnutls_mac_algorithm_t * mac, gnutls_protocol_t * min_version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_error_is_fatal</NAME>
<RETURNS>int  </RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_error_to_alert</NAME>
<RETURNS>int  </RETURNS>
int err, int *level 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_perror</NAME>
<RETURNS>void  </RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_strerror</NAME>
<RETURNS>const char  *</RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_strerror_name</NAME>
<RETURNS>const char  *</RETURNS>
int error 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake_set_private_extensions</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, int allow 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake_get_last_out</NAME>
<RETURNS>gnutls_handshake_description_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake_get_last_in</NAME>
<RETURNS>gnutls_handshake_description_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_HEARTBEAT_WAIT</NAME>
#define GNUTLS_HEARTBEAT_WAIT 1
</MACRO>
<FUNCTION>
<NAME>gnutls_heartbeat_ping</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, size_t data_size, unsigned int max_tries, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_heartbeat_pong</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_send</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_session_t session, const void *data, size_t data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_recv</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_session_t session, void *data, size_t data_size 
</FUNCTION>
<MACRO>
<NAME>gnutls_read</NAME>
#define gnutls_read gnutls_record_recv
</MACRO>
<MACRO>
<NAME>gnutls_write</NAME>
#define gnutls_write gnutls_record_send
</MACRO>
<FUNCTION>
<NAME>gnutls_record_recv_seq</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_session_t session, void *data, size_t data_size, unsigned char *seq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_enable_compatibility_mode</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_disable_padding</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_get_direction</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_get_max_size</NAME>
<RETURNS>size_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_set_max_size</NAME>
<RETURNS>ssize_t  </RETURNS>
gnutls_session_t session, size_t size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_record_check_pending</NAME>
<RETURNS>size_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_prf</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, size_t label_size, const char *label, int server_random_first, size_t extra_size, const char *extra, size_t outsize, char *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_prf_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, size_t label_size, const char *label, size_t seed_size, const char *seed, size_t outsize, char *out 
</FUNCTION>
<ENUM>
<NAME>gnutls_server_name_type_t</NAME>
  typedef enum
  {
    GNUTLS_NAME_DNS = 1
  } gnutls_server_name_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_server_name_set</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_server_name_type_t type, const void *name, size_t name_length 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_server_name_get</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, void *data, size_t * data_length, unsigned int *type, unsigned int indx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_heartbeat_get_timeout</NAME>
<RETURNS>unsigned int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_heartbeat_set_timeouts</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int retrans_timeout, unsigned int total_timeout 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_HB_PEER_ALLOWED_TO_SEND</NAME>
#define GNUTLS_HB_PEER_ALLOWED_TO_SEND (1)
</MACRO>
<MACRO>
<NAME>GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND</NAME>
#define GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND (1<<1)
</MACRO>
<FUNCTION>
<NAME>gnutls_heartbeat_enable</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int type 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_HB_LOCAL_ALLOWED_TO_SEND</NAME>
#define GNUTLS_HB_LOCAL_ALLOWED_TO_SEND (1<<2)
</MACRO>
<FUNCTION>
<NAME>gnutls_heartbeat_allowed</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_safe_renegotiation_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<ENUM>
<NAME>gnutls_supplemental_data_format_type_t</NAME>
  typedef enum
  {
    GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0
  } gnutls_supplemental_data_format_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_session_ticket_key_generate</NAME>
<RETURNS>int  </RETURNS>
gnutls_datum_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_ticket_enable_client</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_ticket_enable_server</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const gnutls_datum_t * key 
</FUNCTION>
<ENUM>
<NAME>gnutls_srtp_profile_t</NAME>
  typedef enum
  {
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80 = 0x0001,
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32 = 0x0002,
    GNUTLS_SRTP_NULL_HMAC_SHA1_80      = 0x0005,
    GNUTLS_SRTP_NULL_HMAC_SHA1_32      = 0x0006
  } gnutls_srtp_profile_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_srtp_set_profile</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_srtp_profile_t profile 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_set_profile_direct</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const char *profiles, const char **err_pos 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_get_selected_profile</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_srtp_profile_t *profile 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_get_profile_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_srtp_profile_t profile 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_get_profile_id</NAME>
<RETURNS>int  </RETURNS>
const char *name, gnutls_srtp_profile_t *profile 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_get_keys</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, void *key_material, unsigned int key_material_size, gnutls_datum_t *client_key, gnutls_datum_t *client_salt, gnutls_datum_t *server_key, gnutls_datum_t *server_salt 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_set_mki</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const gnutls_datum_t *mki 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srtp_get_mki</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t *mki 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_key_generate</NAME>
<RETURNS>int  </RETURNS>
gnutls_datum_t * key, unsigned int key_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t * priority_cache, const char *priorities, const char **err_pos 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_priority_t priority_cache 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_get_cipher_suite_index</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, unsigned int idx, unsigned int *sidx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_set</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_priority_t priority 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_set_direct</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const char *priorities, const char **err_pos 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_certificate_type_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, const unsigned int** list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_sign_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, const unsigned int** list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_protocol_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, const unsigned int** list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_compression_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, const unsigned int** list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_priority_ecc_curve_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_priority_t pcache, const unsigned int** list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_set_default_priority</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_suite_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_kx_algorithm_t kx_algorithm, gnutls_cipher_algorithm_t cipher_algorithm, gnutls_mac_algorithm_t mac_algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_protocol_get_version</NAME>
<RETURNS>gnutls_protocol_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_protocol_get_name</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_protocol_t version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_set_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const void *session_data, size_t session_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_get_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, void *session_data, size_t * session_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_get_data2</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_get_random</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_datum_t* client, gnutls_datum_t* server 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_set_premaster</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int entity, gnutls_protocol_t version, gnutls_kx_algorithm_t kx, gnutls_cipher_algorithm_t cipher, gnutls_mac_algorithm_t mac, gnutls_compression_method_t comp, const gnutls_datum_t* master, const gnutls_datum_t * session_id 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_MAX_SESSION_ID</NAME>
#define GNUTLS_MAX_SESSION_ID 32
</MACRO>
<FUNCTION>
<NAME>gnutls_session_get_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, void *session_id, size_t * session_id_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_get_id2</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t *session_id 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_channel_binding</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_channel_binding_t cbtype, gnutls_datum_t * cb 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_is_resumed</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_resumption_requested</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_db_store_func</NAME>
<RETURNS>int </RETURNS>
void *, gnutls_datum_t key,
                                       gnutls_datum_t data
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_db_remove_func</NAME>
<RETURNS>int </RETURNS>
void *, gnutls_datum_t key
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_db_retr_func</NAME>
<RETURNS>gnutls_datum_t </RETURNS>
void *, gnutls_datum_t key
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_db_set_cache_expiration</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, int seconds 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_remove_session</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_set_retrieve_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_db_retr_func retr_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_set_remove_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_db_remove_func rem_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_set_store_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_db_store_func store_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_set_ptr</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, void *ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_get_ptr</NAME>
<RETURNS>void  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_db_check_entry</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t session_entry 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_handshake_post_client_hello_func</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake_set_post_client_hello_function</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t session, gnutls_handshake_post_client_hello_func func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_handshake_set_max_packet_length</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, size_t max 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_check_version</NAME>
<RETURNS>const char  *</RETURNS>
const char *req_version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_credentials_clear</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_credentials_set</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_credentials_type_t type, void *cred 
</FUNCTION>
<MACRO>
<NAME>gnutls_cred_set</NAME>
#define gnutls_cred_set	gnutls_credentials_set
</MACRO>
<TYPEDEF>
<NAME>gnutls_x509_privkey_t</NAME>
  typedef struct gnutls_x509_privkey_int *gnutls_x509_privkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_x509_crl_t</NAME>
  typedef struct gnutls_x509_crl_int *gnutls_x509_crl_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_x509_crt_t</NAME>
  typedef struct gnutls_x509_crt_int *gnutls_x509_crt_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_x509_crq_t</NAME>
  typedef struct gnutls_x509_crq_int *gnutls_x509_crq_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_openpgp_keyring_t</NAME>
  typedef struct gnutls_openpgp_keyring_int *gnutls_openpgp_keyring_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_anon_free_server_credentials</NAME>
<RETURNS>void  </RETURNS>
gnutls_anon_server_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_allocate_server_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_anon_server_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_set_server_dh_params</NAME>
<RETURNS>void  </RETURNS>
gnutls_anon_server_credentials_t res, gnutls_dh_params_t dh_params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_set_server_params_function</NAME>
<RETURNS>void </RETURNS>
gnutls_anon_server_credentials_t res, gnutls_params_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_free_client_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_anon_client_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_allocate_client_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_anon_client_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_free_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_certificate_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_allocate_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t * res 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_get_issuer</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t sc, gnutls_x509_crt_t cert, gnutls_x509_crt_t* issuer, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_free_keys</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_free_cas</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_free_ca_names</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_free_crls</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_dh_params</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_dh_params_t dh_params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_verify_flags</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t res, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_verify_limits</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t res, unsigned int max_bits, unsigned int max_depth 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_system_trust</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t cred 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_trust_file</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t cred, const char *cafile, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_trust_mem</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * ca, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_crl_file</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const char *crlfile, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_crl_mem</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * CRL, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_key_file</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const char *certfile, const char *keyfile, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_key_mem</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * cert, const gnutls_datum_t * key, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_send_x509_rdn_sequence</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, int status 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_simple_pkcs12_file</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const char *pkcs12file, gnutls_x509_crt_fmt_t type, const char *password 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_simple_pkcs12_mem</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * p12blob, gnutls_x509_crt_fmt_t type, const char *password 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_key</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_x509_crt_t * cert_list, int cert_list_size, gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_trust</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_x509_crt_t * ca_list, int ca_list_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_x509_crl</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_x509_crl_t * crl_list, int crl_list_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_ocsp_status_request_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_status_request_ocsp_func ocsp_func, void *ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_ocsp_status_request_file</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const char* response_file, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_status_request_enable_client</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t *responder_id, size_t responder_id_size, gnutls_datum_t *request_extensions 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_status_request_get</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t *response 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_ocsp_status_request_is_checked</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_global_init</NAME>
<RETURNS>int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_global_deinit</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_time_func</NAME>
<RETURNS>time_t </RETURNS>
time_t *t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>mutex_init_func</NAME>
<RETURNS>int </RETURNS>
void **mutex
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>mutex_lock_func</NAME>
<RETURNS>int </RETURNS>
void **mutex
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>mutex_unlock_func</NAME>
<RETURNS>int </RETURNS>
void **mutex
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>mutex_deinit_func</NAME>
<RETURNS>int </RETURNS>
void **mutex
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_mutex</NAME>
<RETURNS>void  </RETURNS>
mutex_init_func init, mutex_deinit_func deinit, mutex_lock_func lock, mutex_unlock_func unlock 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_alloc_function</NAME>
<RETURNS>void *</RETURNS>
size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_calloc_function</NAME>
<RETURNS>void *</RETURNS>
size_t, size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_is_secure_function</NAME>
<RETURNS>int </RETURNS>
const void *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_free_function</NAME>
<RETURNS>void </RETURNS>
void *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_realloc_function</NAME>
<RETURNS>void *</RETURNS>
void *, size_t
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_mem_functions</NAME>
<RETURNS>void </RETURNS>
gnutls_alloc_function alloc_func, gnutls_alloc_function secure_alloc_func, gnutls_is_secure_function is_secure_func, gnutls_realloc_function realloc_func, gnutls_free_function free_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_time_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_time_func time_func 
</FUNCTION>
<VARIABLE>
<NAME>gnutls_malloc</NAME>
  extern gnutls_alloc_function gnutls_malloc;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_secure_malloc</NAME>
  extern gnutls_alloc_function gnutls_secure_malloc;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_realloc</NAME>
  extern gnutls_realloc_function gnutls_realloc;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_calloc</NAME>
  extern gnutls_calloc_function gnutls_calloc;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_free</NAME>
  extern gnutls_free_function gnutls_free;
</VARIABLE>
<USER_FUNCTION>
<NAME>gnutls_strdup</NAME>
<RETURNS>char *</RETURNS>
const char *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_log_func</NAME>
<RETURNS>void </RETURNS>
int, const char *
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_audit_log_func</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t, const char *
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_log_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_log_func log_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_audit_log_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_audit_log_func log_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_global_set_log_level</NAME>
<RETURNS>void  </RETURNS>
int level 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t * dh_params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_dh_params_t dh_params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_import_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t dh_params, const gnutls_datum_t * prime, const gnutls_datum_t * generator 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_import_pkcs3</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t params, const gnutls_datum_t * pkcs3_params, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_generate2</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t params, unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_export_pkcs3</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t params, gnutls_x509_crt_fmt_t format, unsigned char *params_data, size_t * params_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_export2_pkcs3</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t params, gnutls_x509_crt_fmt_t format, gnutls_datum_t *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_export_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t params, gnutls_datum_t * prime, gnutls_datum_t * generator, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_params_cpy</NAME>
<RETURNS>int  </RETURNS>
gnutls_dh_params_t dst, gnutls_dh_params_t src 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_pull_func</NAME>
<RETURNS>ssize_t </RETURNS>
gnutls_transport_ptr_t, void *,
                                       size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_push_func</NAME>
<RETURNS>ssize_t </RETURNS>
gnutls_transport_ptr_t, const void *,
                                       size_t
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_pull_timeout_func</NAME>
<RETURNS>int </RETURNS>
gnutls_transport_ptr_t, unsigned int ms
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_vec_push_func</NAME>
<RETURNS>ssize_t </RETURNS>
gnutls_transport_ptr_t,
                                           const giovec_t * iov, int iovcnt
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_errno_func</NAME>
<RETURNS>int </RETURNS>
gnutls_transport_ptr_t
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_ptr</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_transport_ptr_t ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_ptr2</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_transport_ptr_t recv_ptr, gnutls_transport_ptr_t send_ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_get_ptr</NAME>
<RETURNS>gnutls_transport_ptr_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_get_ptr2</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_transport_ptr_t * recv_ptr, gnutls_transport_ptr_t * send_ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_vec_push_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_vec_push_func vec_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_push_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_push_func push_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_pull_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_pull_func pull_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_pull_timeout_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_pull_timeout_func func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_errno_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_errno_func errno_func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_transport_set_errno</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, int err 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_set_ptr</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, void *ptr 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_session_get_ptr</NAME>
<RETURNS>void  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_send_cert</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, gnutls_openpgp_crt_status_t status 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_digest_algorithm_t algo, const gnutls_datum_t * data, void *result, size_t * result_size 
</FUNCTION>
<ENUM>
<NAME>gnutls_random_art_t</NAME>
  typedef enum gnutls_random_art
  {
    GNUTLS_RANDOM_ART_OPENSSH=1,
  } gnutls_random_art_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_random_art</NAME>
<RETURNS>int  </RETURNS>
gnutls_random_art_t type, const char* key_type, unsigned int key_size, void * fpr, size_t fpr_size, gnutls_datum_t* art 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_free_client_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_srp_client_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_allocate_client_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_srp_client_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_set_client_credentials</NAME>
<RETURNS>int  </RETURNS>
gnutls_srp_client_credentials_t res, const char *username, const char *password 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_free_server_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_srp_server_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_allocate_server_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_srp_server_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_set_server_credentials_file</NAME>
<RETURNS>int  </RETURNS>
gnutls_srp_server_credentials_t res, const char *password_file, const char *password_conf_file 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_server_get_username</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_set_prime_bits</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_verifier</NAME>
<RETURNS>int  </RETURNS>
const char *username, const char *password, const gnutls_datum_t * salt, const gnutls_datum_t * generator, const gnutls_datum_t * prime, gnutls_datum_t * res 
</FUNCTION>
<VARIABLE>
<NAME>gnutls_srp_4096_group_prime</NAME>
  extern const gnutls_datum_t gnutls_srp_4096_group_prime;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_4096_group_generator</NAME>
  extern const gnutls_datum_t gnutls_srp_4096_group_generator;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_3072_group_prime</NAME>
  extern const gnutls_datum_t gnutls_srp_3072_group_prime;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_3072_group_generator</NAME>
  extern const gnutls_datum_t gnutls_srp_3072_group_generator;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_2048_group_prime</NAME>
  extern const gnutls_datum_t gnutls_srp_2048_group_prime;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_2048_group_generator</NAME>
  extern const gnutls_datum_t gnutls_srp_2048_group_generator;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_1536_group_prime</NAME>
  extern const gnutls_datum_t gnutls_srp_1536_group_prime;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_1536_group_generator</NAME>
  extern const gnutls_datum_t gnutls_srp_1536_group_generator;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_1024_group_prime</NAME>
  extern const gnutls_datum_t gnutls_srp_1024_group_prime;
</VARIABLE>
<VARIABLE>
<NAME>gnutls_srp_1024_group_generator</NAME>
  extern const gnutls_datum_t gnutls_srp_1024_group_generator;
</VARIABLE>
<FUNCTION>
<NAME>gnutls_srp_set_server_credentials_function</NAME>
<RETURNS>void </RETURNS>
 gnutls_srp_server_credentials_t cred, gnutls_srp_server_credentials_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_set_client_credentials_function</NAME>
<RETURNS>void </RETURNS>
 gnutls_srp_client_credentials_t cred, gnutls_srp_client_credentials_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_base64_encode</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * data, char *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_base64_encode_alloc</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * data, gnutls_datum_t * result 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_base64_decode</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * b64_data, char *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_srp_base64_decode_alloc</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * b64_data, gnutls_datum_t * result 
</FUNCTION>
<ENUM>
<NAME>gnutls_psk_key_flags</NAME>
  typedef enum gnutls_psk_key_flags
  {
    GNUTLS_PSK_KEY_RAW = 0,
    GNUTLS_PSK_KEY_HEX
  } gnutls_psk_key_flags;
</ENUM>
<FUNCTION>
<NAME>gnutls_psk_free_client_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_psk_client_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_allocate_client_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_psk_client_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_client_credentials</NAME>
<RETURNS>int  </RETURNS>
gnutls_psk_client_credentials_t res, const char *username, const gnutls_datum_t * key, gnutls_psk_key_flags flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_free_server_credentials</NAME>
<RETURNS>void </RETURNS>
gnutls_psk_server_credentials_t sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_allocate_server_credentials</NAME>
<RETURNS>int </RETURNS>
gnutls_psk_server_credentials_t * sc 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_server_credentials_file</NAME>
<RETURNS>int  </RETURNS>
gnutls_psk_server_credentials_t res, const char *password_file 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_server_credentials_hint</NAME>
<RETURNS>int </RETURNS>
gnutls_psk_server_credentials_t res, const char *hint 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_server_get_username</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_client_get_hint</NAME>
<RETURNS>const char  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_server_credentials_function</NAME>
<RETURNS>void </RETURNS>
 gnutls_psk_server_credentials_t cred, gnutls_psk_server_credentials_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_client_credentials_function</NAME>
<RETURNS>void </RETURNS>
 gnutls_psk_client_credentials_t cred, gnutls_psk_client_credentials_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hex_encode</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * data, char *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hex_decode</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * hex_data, void *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_server_dh_params</NAME>
<RETURNS>void </RETURNS>
gnutls_psk_server_credentials_t res, gnutls_dh_params_t dh_params 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_server_params_function</NAME>
<RETURNS>void </RETURNS>
gnutls_psk_server_credentials_t res, gnutls_params_function * func 
</FUNCTION>
<ENUM>
<NAME>gnutls_x509_subject_alt_name_t</NAME>
  typedef enum gnutls_x509_subject_alt_name_t
  {
    GNUTLS_SAN_DNSNAME = 1,
    GNUTLS_SAN_RFC822NAME = 2,
    GNUTLS_SAN_URI = 3,
    GNUTLS_SAN_IPADDRESS = 4,
    GNUTLS_SAN_OTHERNAME = 5,
    GNUTLS_SAN_DN = 6,
    /* The following are "virtual" subject alternative name types, in
       that they are represented by an otherName value and an OID.
       Used by gnutls_x509_crt_get_subject_alt_othername_oid.  */
    GNUTLS_SAN_OTHERNAME_XMPP = 1000
  } gnutls_x509_subject_alt_name_t;
</ENUM>
<TYPEDEF>
<NAME>gnutls_openpgp_crt_t</NAME>
  typedef struct gnutls_openpgp_crt_int *gnutls_openpgp_crt_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_openpgp_privkey_t</NAME>
  typedef struct gnutls_openpgp_privkey_int *gnutls_openpgp_privkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_pkcs11_privkey_t</NAME>
  typedef struct gnutls_pkcs11_privkey_st *gnutls_pkcs11_privkey_t;
</TYPEDEF>
<ENUM>
<NAME>gnutls_privkey_type_t</NAME>
  typedef enum
    {
      GNUTLS_PRIVKEY_X509,
      GNUTLS_PRIVKEY_OPENPGP,
      GNUTLS_PRIVKEY_PKCS11,
      GNUTLS_PRIVKEY_EXT
    } gnutls_privkey_type_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_auth_get_type</NAME>
<RETURNS>gnutls_credentials_type_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_auth_server_get_type</NAME>
<RETURNS>gnutls_credentials_type_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_auth_client_get_type</NAME>
<RETURNS>gnutls_credentials_type_t </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_set_prime_bits</NAME>
<RETURNS>void  </RETURNS>
gnutls_session_t session, unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_get_secret_bits</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_get_peers_public_bits</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_get_prime_bits</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_get_group</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t * raw_gen, gnutls_datum_t * raw_prime 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_dh_get_pubkey</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t * raw_key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_retrieve_function</NAME>
<RETURNS>void  </RETURNS>
 gnutls_certificate_credentials_t cred, gnutls_certificate_retrieve_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_verify_function</NAME>
<RETURNS>void </RETURNS>
gnutls_certificate_credentials_t cred, gnutls_certificate_verify_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_server_set_request</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t session, gnutls_certificate_request_t req 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_get_peers</NAME>
<RETURNS>const gnutls_datum_t  *</RETURNS>
gnutls_session_t session, unsigned int *list_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_get_ours</NAME>
<RETURNS>const gnutls_datum_t  *</RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_get_peers_subkey_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, gnutls_datum_t *id 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_activation_time_peers</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_expiration_time_peers</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_client_get_request_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_verify_peers2</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, unsigned int *status 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_verify_peers3</NAME>
<RETURNS>int  </RETURNS>
gnutls_session_t session, const char* hostname, unsigned int *status 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_verification_status_print</NAME>
<RETURNS>int  </RETURNS>
unsigned int status, gnutls_certificate_type_t type, gnutls_datum_t * out, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pem_base64_encode</NAME>
<RETURNS>int  </RETURNS>
const char *msg, const gnutls_datum_t * data, char *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pem_base64_decode</NAME>
<RETURNS>int  </RETURNS>
const char *header, const gnutls_datum_t * b64_data, unsigned char *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pem_base64_encode_alloc</NAME>
<RETURNS>int  </RETURNS>
const char *msg, const gnutls_datum_t * data, gnutls_datum_t * result 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pem_base64_decode_alloc</NAME>
<RETURNS>int  </RETURNS>
const char *header, const gnutls_datum_t * b64_data, gnutls_datum_t * result 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_KEY_DIGITAL_SIGNATURE</NAME>
#define GNUTLS_KEY_DIGITAL_SIGNATURE	128
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_NON_REPUDIATION</NAME>
#define GNUTLS_KEY_NON_REPUDIATION	64
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_KEY_ENCIPHERMENT</NAME>
#define GNUTLS_KEY_KEY_ENCIPHERMENT	32
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_DATA_ENCIPHERMENT</NAME>
#define GNUTLS_KEY_DATA_ENCIPHERMENT	16
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_KEY_AGREEMENT</NAME>
#define GNUTLS_KEY_KEY_AGREEMENT	8
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_KEY_CERT_SIGN</NAME>
#define GNUTLS_KEY_KEY_CERT_SIGN	4
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_CRL_SIGN</NAME>
#define GNUTLS_KEY_CRL_SIGN		2
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_ENCIPHER_ONLY</NAME>
#define GNUTLS_KEY_ENCIPHER_ONLY	1
</MACRO>
<MACRO>
<NAME>GNUTLS_KEY_DECIPHER_ONLY</NAME>
#define GNUTLS_KEY_DECIPHER_ONLY	32768
</MACRO>
<FUNCTION>
<NAME>gnutls_certificate_set_params_function</NAME>
<RETURNS>void </RETURNS>
gnutls_certificate_credentials_t res, gnutls_params_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_anon_set_params_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_anon_server_credentials_t res, gnutls_params_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_psk_set_params_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_psk_server_credentials_t res, gnutls_params_function * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hex2bin</NAME>
<RETURNS>int  </RETURNS>
const char *hex_data, size_t hex_size, void *bin_data, size_t * bin_size 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_tdb_store_func</NAME>
<RETURNS>int </RETURNS>
const char* db_name, 
                                             const char* host,
                                             const char* service,
                                             time_t expiration,
                                             const gnutls_datum_t* pubkey
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_tdb_store_commitment_func</NAME>
<RETURNS>int </RETURNS>
const char* db_name, 
                                             const char* host,
                                             const char* service,
                                             time_t expiration,
                                             gnutls_digest_algorithm_t hash_algo,
                                             const gnutls_datum_t* hash
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_tdb_verify_func</NAME>
<RETURNS>int </RETURNS>
const char* db_name, 
                                            const char* host,
                                            const char* service,
                                            const gnutls_datum_t *pubkey
</USER_FUNCTION>
<TYPEDEF>
<NAME>gnutls_tdb_t</NAME>
  typedef struct gnutls_tdb_int *gnutls_tdb_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_tdb_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_tdb_t *tdb 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tdb_set_store_func</NAME>
<RETURNS>void  </RETURNS>
gnutls_tdb_t tdb, gnutls_tdb_store_func store 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tdb_set_store_commitment_func</NAME>
<RETURNS>void  </RETURNS>
gnutls_tdb_t tdb, gnutls_tdb_store_commitment_func cstore 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tdb_set_verify_func</NAME>
<RETURNS>void  </RETURNS>
gnutls_tdb_t tdb, gnutls_tdb_verify_func verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tdb_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_tdb_t tdb 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_verify_stored_pubkey</NAME>
<RETURNS>int  </RETURNS>
const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_certificate_type_t cert_type, const gnutls_datum_t * cert, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_store_commitment</NAME>
<RETURNS>int  </RETURNS>
const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_digest_algorithm_t hash_algo, const gnutls_datum_t* hash, time_t expiration, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_store_pubkey</NAME>
<RETURNS>int  </RETURNS>
const char* db_name, gnutls_tdb_t tdb, const char* host, const char* service, gnutls_certificate_type_t cert_type, const gnutls_datum_t * cert, time_t expiration, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_load_file</NAME>
<RETURNS>int  </RETURNS>
const char* filename, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_url_is_supported</NAME>
<RETURNS>int  </RETURNS>
const char* url 
</FUNCTION>
<ENUM>
<NAME>gnutls_pin_flag_t</NAME>
  typedef enum
    {
    GNUTLS_PIN_USER = (1 << 0),
    GNUTLS_PIN_SO = (1 << 1),
    GNUTLS_PIN_FINAL_TRY = (1 << 2),
    GNUTLS_PIN_COUNT_LOW = (1 << 3),
    GNUTLS_PIN_CONTEXT_SPECIFIC = (1 << 4),
    GNUTLS_PIN_WRONG = (1 << 5),
  } gnutls_pin_flag_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_USER</NAME>
#define GNUTLS_PKCS11_PIN_USER GNUTLS_PIN_USER
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_SO</NAME>
#define GNUTLS_PKCS11_PIN_SO GNUTLS_PIN_SO
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_FINAL_TRY</NAME>
#define GNUTLS_PKCS11_PIN_FINAL_TRY GNUTLS_PIN_FINAL_TRY
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_COUNT_LOW</NAME>
#define GNUTLS_PKCS11_PIN_COUNT_LOW  GNUTLS_PIN_COUNT_LOW
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC</NAME>
#define GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC GNUTLS_PIN_CONTEXT_SPECIFIC
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS11_PIN_WRONG</NAME>
#define GNUTLS_PKCS11_PIN_WRONG GNUTLS_PIN_WRONG
</MACRO>
<USER_FUNCTION>
<NAME>gnutls_pin_callback_t</NAME>
<RETURNS>int </RETURNS>
void *userdata, int attempt,
                                             const char *token_url,
                                             const char *token_label,
					     unsigned int flags,
                                             char *pin, size_t pin_max
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_credentials_t, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_E_SUCCESS</NAME>
#define GNUTLS_E_SUCCESS 0
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</NAME>
#define	GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM -3
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_CIPHER_TYPE</NAME>
#define	GNUTLS_E_UNKNOWN_CIPHER_TYPE -6
</MACRO>
<MACRO>
<NAME>GNUTLS_E_LARGE_PACKET</NAME>
#define	GNUTLS_E_LARGE_PACKET -7
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</NAME>
#define GNUTLS_E_UNSUPPORTED_VERSION_PACKET -8  /* GNUTLS_A_PROTOCOL_VERSION */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</NAME>
#define GNUTLS_E_UNEXPECTED_PACKET_LENGTH -9    /* GNUTLS_A_RECORD_OVERFLOW */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INVALID_SESSION</NAME>
#define GNUTLS_E_INVALID_SESSION -10
</MACRO>
<MACRO>
<NAME>GNUTLS_E_FATAL_ALERT_RECEIVED</NAME>
#define GNUTLS_E_FATAL_ALERT_RECEIVED -12
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNEXPECTED_PACKET</NAME>
#define GNUTLS_E_UNEXPECTED_PACKET -15  /* GNUTLS_A_UNEXPECTED_MESSAGE */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_WARNING_ALERT_RECEIVED</NAME>
#define GNUTLS_E_WARNING_ALERT_RECEIVED -16
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ERROR_IN_FINISHED_PACKET</NAME>
#define GNUTLS_E_ERROR_IN_FINISHED_PACKET -18
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</NAME>
#define GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET -19
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_CIPHER_SUITE</NAME>
#define	GNUTLS_E_UNKNOWN_CIPHER_SUITE -21       /* GNUTLS_A_HANDSHAKE_FAILURE */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNWANTED_ALGORITHM</NAME>
#define	GNUTLS_E_UNWANTED_ALGORITHM -22
</MACRO>
<MACRO>
<NAME>GNUTLS_E_MPI_SCAN_FAILED</NAME>
#define	GNUTLS_E_MPI_SCAN_FAILED -23
</MACRO>
<MACRO>
<NAME>GNUTLS_E_DECRYPTION_FAILED</NAME>
#define GNUTLS_E_DECRYPTION_FAILED -24  /* GNUTLS_A_DECRYPTION_FAILED, GNUTLS_A_BAD_RECORD_MAC */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_MEMORY_ERROR</NAME>
#define GNUTLS_E_MEMORY_ERROR -25
</MACRO>
<MACRO>
<NAME>GNUTLS_E_DECOMPRESSION_FAILED</NAME>
#define GNUTLS_E_DECOMPRESSION_FAILED -26       /* GNUTLS_A_DECOMPRESSION_FAILURE */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_COMPRESSION_FAILED</NAME>
#define GNUTLS_E_COMPRESSION_FAILED -27
</MACRO>
<MACRO>
<NAME>GNUTLS_E_AGAIN</NAME>
#define GNUTLS_E_AGAIN -28
</MACRO>
<MACRO>
<NAME>GNUTLS_E_EXPIRED</NAME>
#define GNUTLS_E_EXPIRED -29
</MACRO>
<MACRO>
<NAME>GNUTLS_E_DB_ERROR</NAME>
#define GNUTLS_E_DB_ERROR -30
</MACRO>
<MACRO>
<NAME>GNUTLS_E_SRP_PWD_ERROR</NAME>
#define GNUTLS_E_SRP_PWD_ERROR -31
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INSUFFICIENT_CREDENTIALS</NAME>
#define GNUTLS_E_INSUFFICIENT_CREDENTIALS -32
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INSUFICIENT_CREDENTIALS</NAME>
#define GNUTLS_E_INSUFICIENT_CREDENTIALS GNUTLS_E_INSUFFICIENT_CREDENTIALS      /* for backwards compatibility only */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INSUFFICIENT_CRED</NAME>
#define GNUTLS_E_INSUFFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INSUFICIENT_CRED</NAME>
#define GNUTLS_E_INSUFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS     /* for backwards compatibility only */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_HASH_FAILED</NAME>
#define GNUTLS_E_HASH_FAILED -33
</MACRO>
<MACRO>
<NAME>GNUTLS_E_BASE64_DECODING_ERROR</NAME>
#define GNUTLS_E_BASE64_DECODING_ERROR -34
</MACRO>
<MACRO>
<NAME>GNUTLS_E_MPI_PRINT_FAILED</NAME>
#define	GNUTLS_E_MPI_PRINT_FAILED -35
</MACRO>
<MACRO>
<NAME>GNUTLS_E_REHANDSHAKE</NAME>
#define GNUTLS_E_REHANDSHAKE -37        /* GNUTLS_A_NO_RENEGOTIATION */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_GOT_APPLICATION_DATA</NAME>
#define GNUTLS_E_GOT_APPLICATION_DATA -38
</MACRO>
<MACRO>
<NAME>GNUTLS_E_RECORD_LIMIT_REACHED</NAME>
#define GNUTLS_E_RECORD_LIMIT_REACHED -39
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ENCRYPTION_FAILED</NAME>
#define GNUTLS_E_ENCRYPTION_FAILED -40
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PK_ENCRYPTION_FAILED</NAME>
#define GNUTLS_E_PK_ENCRYPTION_FAILED -44
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PK_DECRYPTION_FAILED</NAME>
#define GNUTLS_E_PK_DECRYPTION_FAILED -45
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PK_SIGN_FAILED</NAME>
#define GNUTLS_E_PK_SIGN_FAILED -46
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</NAME>
#define GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION -47
</MACRO>
<MACRO>
<NAME>GNUTLS_E_KEY_USAGE_VIOLATION</NAME>
#define GNUTLS_E_KEY_USAGE_VIOLATION -48
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_CERTIFICATE_FOUND</NAME>
#define GNUTLS_E_NO_CERTIFICATE_FOUND -49       /* GNUTLS_A_BAD_CERTIFICATE */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INVALID_REQUEST</NAME>
#define GNUTLS_E_INVALID_REQUEST -50
</MACRO>
<MACRO>
<NAME>GNUTLS_E_SHORT_MEMORY_BUFFER</NAME>
#define GNUTLS_E_SHORT_MEMORY_BUFFER -51
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INTERRUPTED</NAME>
#define GNUTLS_E_INTERRUPTED -52
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PUSH_ERROR</NAME>
#define GNUTLS_E_PUSH_ERROR -53
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PULL_ERROR</NAME>
#define GNUTLS_E_PULL_ERROR -54
</MACRO>
<MACRO>
<NAME>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</NAME>
#define GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER -55 /* GNUTLS_A_ILLEGAL_PARAMETER */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</NAME>
#define GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE -56
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS1_WRONG_PAD</NAME>
#define GNUTLS_E_PKCS1_WRONG_PAD -57
</MACRO>
<MACRO>
<NAME>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</NAME>
#define GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION -58
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INTERNAL_ERROR</NAME>
#define GNUTLS_E_INTERNAL_ERROR -59
</MACRO>
<MACRO>
<NAME>GNUTLS_E_DH_PRIME_UNACCEPTABLE</NAME>
#define GNUTLS_E_DH_PRIME_UNACCEPTABLE -63
</MACRO>
<MACRO>
<NAME>GNUTLS_E_FILE_ERROR</NAME>
#define GNUTLS_E_FILE_ERROR -64
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</NAME>
#define GNUTLS_E_TOO_MANY_EMPTY_PACKETS -78
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_PK_ALGORITHM</NAME>
#define GNUTLS_E_UNKNOWN_PK_ALGORITHM -80
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS</NAME>
#define GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS -81
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</NAME>
#define GNUTLS_E_NO_TEMPORARY_RSA_PARAMS -84
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</NAME>
#define GNUTLS_E_NO_COMPRESSION_ALGORITHMS -86
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_CIPHER_SUITES</NAME>
#define GNUTLS_E_NO_CIPHER_SUITES -87
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_GETKEY_FAILED</NAME>
#define GNUTLS_E_OPENPGP_GETKEY_FAILED -88
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PK_SIG_VERIFY_FAILED</NAME>
#define GNUTLS_E_PK_SIG_VERIFY_FAILED -89
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ILLEGAL_SRP_USERNAME</NAME>
#define GNUTLS_E_ILLEGAL_SRP_USERNAME -90
</MACRO>
<MACRO>
<NAME>GNUTLS_E_SRP_PWD_PARSING_ERROR</NAME>
#define GNUTLS_E_SRP_PWD_PARSING_ERROR -91
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</NAME>
#define GNUTLS_E_NO_TEMPORARY_DH_PARAMS -93
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</NAME>
#define GNUTLS_E_ASN1_ELEMENT_NOT_FOUND -67
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</NAME>
#define GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND -68
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_DER_ERROR</NAME>
#define GNUTLS_E_ASN1_DER_ERROR -69
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_VALUE_NOT_FOUND</NAME>
#define GNUTLS_E_ASN1_VALUE_NOT_FOUND -70
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_GENERIC_ERROR</NAME>
#define GNUTLS_E_ASN1_GENERIC_ERROR -71
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_VALUE_NOT_VALID</NAME>
#define GNUTLS_E_ASN1_VALUE_NOT_VALID -72
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_TAG_ERROR</NAME>
#define GNUTLS_E_ASN1_TAG_ERROR -73
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_TAG_IMPLICIT</NAME>
#define GNUTLS_E_ASN1_TAG_IMPLICIT -74
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_TYPE_ANY_ERROR</NAME>
#define GNUTLS_E_ASN1_TYPE_ANY_ERROR -75
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_SYNTAX_ERROR</NAME>
#define GNUTLS_E_ASN1_SYNTAX_ERROR -76
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ASN1_DER_OVERFLOW</NAME>
#define GNUTLS_E_ASN1_DER_OVERFLOW -77
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_UID_REVOKED</NAME>
#define GNUTLS_E_OPENPGP_UID_REVOKED -79
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CERTIFICATE_ERROR</NAME>
#define GNUTLS_E_CERTIFICATE_ERROR -43
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_CERTIFICATE_ERROR</NAME>
#define GNUTLS_E_X509_CERTIFICATE_ERROR GNUTLS_E_CERTIFICATE_ERROR
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</NAME>
#define GNUTLS_E_CERTIFICATE_KEY_MISMATCH -60
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</NAME>
#define GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE -61       /* GNUTLS_A_UNSUPPORTED_CERTIFICATE */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_UNKNOWN_SAN</NAME>
#define GNUTLS_E_X509_UNKNOWN_SAN -62
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</NAME>
#define GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED -94
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</NAME>
#define GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE -95
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</NAME>
#define GNUTLS_E_UNKNOWN_HASH_ALGORITHM -96
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</NAME>
#define GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE -97
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</NAME>
#define GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE -98
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INVALID_PASSWORD</NAME>
#define GNUTLS_E_INVALID_PASSWORD -99
</MACRO>
<MACRO>
<NAME>GNUTLS_E_MAC_VERIFY_FAILED</NAME>
#define GNUTLS_E_MAC_VERIFY_FAILED -100 /* for PKCS #12 MAC */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CONSTRAINT_ERROR</NAME>
#define GNUTLS_E_CONSTRAINT_ERROR -101
</MACRO>
<MACRO>
<NAME>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</NAME>
#define GNUTLS_E_WARNING_IA_IPHF_RECEIVED -102
</MACRO>
<MACRO>
<NAME>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</NAME>
#define GNUTLS_E_WARNING_IA_FPHF_RECEIVED -103
</MACRO>
<MACRO>
<NAME>GNUTLS_E_IA_VERIFY_FAILED</NAME>
#define GNUTLS_E_IA_VERIFY_FAILED -104
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_ALGORITHM</NAME>
#define GNUTLS_E_UNKNOWN_ALGORITHM -105
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM</NAME>
#define GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM -106
</MACRO>
<MACRO>
<NAME>GNUTLS_E_SAFE_RENEGOTIATION_FAILED</NAME>
#define GNUTLS_E_SAFE_RENEGOTIATION_FAILED -107
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED</NAME>
#define GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED -108
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNKNOWN_SRP_USERNAME</NAME>
#define GNUTLS_E_UNKNOWN_SRP_USERNAME -109
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PREMATURE_TERMINATION</NAME>
#define GNUTLS_E_PREMATURE_TERMINATION -110
</MACRO>
<MACRO>
<NAME>GNUTLS_E_BASE64_ENCODING_ERROR</NAME>
#define GNUTLS_E_BASE64_ENCODING_ERROR -201
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</NAME>
#define GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY -202       /* obsolete */
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</NAME>
#define GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY -202
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</NAME>
#define GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY -203
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_KEYRING_ERROR</NAME>
#define GNUTLS_E_OPENPGP_KEYRING_ERROR -204
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_UNSUPPORTED_OID</NAME>
#define GNUTLS_E_X509_UNSUPPORTED_OID -205
</MACRO>
<MACRO>
<NAME>GNUTLS_E_RANDOM_FAILED</NAME>
#define GNUTLS_E_RANDOM_FAILED -206
</MACRO>
<MACRO>
<NAME>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</NAME>
#define GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR -207
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_SUBKEY_ERROR</NAME>
#define GNUTLS_E_OPENPGP_SUBKEY_ERROR -208
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CRYPTO_ALREADY_REGISTERED</NAME>
#define GNUTLS_E_CRYPTO_ALREADY_REGISTERED -209
</MACRO>
<MACRO>
<NAME>GNUTLS_E_HANDSHAKE_TOO_LARGE</NAME>
#define GNUTLS_E_HANDSHAKE_TOO_LARGE -210
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CRYPTODEV_IOCTL_ERROR</NAME>
#define GNUTLS_E_CRYPTODEV_IOCTL_ERROR -211
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CRYPTODEV_DEVICE_ERROR</NAME>
#define GNUTLS_E_CRYPTODEV_DEVICE_ERROR -212
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE</NAME>
#define GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE -213
</MACRO>
<MACRO>
<NAME>GNUTLS_E_BAD_COOKIE</NAME>
#define GNUTLS_E_BAD_COOKIE -214
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR</NAME>
#define GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR -215
</MACRO>
<MACRO>
<NAME>GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL</NAME>
#define GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL -216
</MACRO>
<MACRO>
<NAME>GNUTLS_E_HEARTBEAT_PONG_RECEIVED</NAME>
#define GNUTLS_E_HEARTBEAT_PONG_RECEIVED -292
</MACRO>
<MACRO>
<NAME>GNUTLS_E_HEARTBEAT_PING_RECEIVED</NAME>
#define GNUTLS_E_HEARTBEAT_PING_RECEIVED -293
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_ERROR</NAME>
#define GNUTLS_E_PKCS11_ERROR -300
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_LOAD_ERROR</NAME>
#define GNUTLS_E_PKCS11_LOAD_ERROR -301
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PARSING_ERROR</NAME>
#define GNUTLS_E_PARSING_ERROR -302
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_PIN_ERROR</NAME>
#define GNUTLS_E_PKCS11_PIN_ERROR -303
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_SLOT_ERROR</NAME>
#define GNUTLS_E_PKCS11_SLOT_ERROR -305
</MACRO>
<MACRO>
<NAME>GNUTLS_E_LOCKING_ERROR</NAME>
#define GNUTLS_E_LOCKING_ERROR -306
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_ATTRIBUTE_ERROR</NAME>
#define GNUTLS_E_PKCS11_ATTRIBUTE_ERROR -307
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_DEVICE_ERROR</NAME>
#define GNUTLS_E_PKCS11_DEVICE_ERROR -308
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_DATA_ERROR</NAME>
#define GNUTLS_E_PKCS11_DATA_ERROR -309
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR</NAME>
#define GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR -310
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_KEY_ERROR</NAME>
#define GNUTLS_E_PKCS11_KEY_ERROR -311
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_PIN_EXPIRED</NAME>
#define GNUTLS_E_PKCS11_PIN_EXPIRED -312
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_PIN_LOCKED</NAME>
#define GNUTLS_E_PKCS11_PIN_LOCKED -313
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_SESSION_ERROR</NAME>
#define GNUTLS_E_PKCS11_SESSION_ERROR -314
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_SIGNATURE_ERROR</NAME>
#define GNUTLS_E_PKCS11_SIGNATURE_ERROR -315
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_TOKEN_ERROR</NAME>
#define GNUTLS_E_PKCS11_TOKEN_ERROR -316
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_USER_ERROR</NAME>
#define GNUTLS_E_PKCS11_USER_ERROR -317
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CRYPTO_INIT_FAILED</NAME>
#define GNUTLS_E_CRYPTO_INIT_FAILED -318
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TIMEDOUT</NAME>
#define GNUTLS_E_TIMEDOUT -319
</MACRO>
<MACRO>
<NAME>GNUTLS_E_USER_ERROR</NAME>
#define GNUTLS_E_USER_ERROR -320
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ECC_NO_SUPPORTED_CURVES</NAME>
#define GNUTLS_E_ECC_NO_SUPPORTED_CURVES -321
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ECC_UNSUPPORTED_CURVE</NAME>
#define GNUTLS_E_ECC_UNSUPPORTED_CURVE -322
</MACRO>
<MACRO>
<NAME>GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE</NAME>
#define GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE -323
</MACRO>
<MACRO>
<NAME>GNUTLS_E_CERTIFICATE_LIST_UNSORTED</NAME>
#define GNUTLS_E_CERTIFICATE_LIST_UNSORTED -324
</MACRO>
<MACRO>
<NAME>GNUTLS_E_ILLEGAL_PARAMETER</NAME>
#define GNUTLS_E_ILLEGAL_PARAMETER -325
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_PRIORITIES_WERE_SET</NAME>
#define GNUTLS_E_NO_PRIORITIES_WERE_SET -326
</MACRO>
<MACRO>
<NAME>GNUTLS_E_X509_UNSUPPORTED_EXTENSION</NAME>
#define GNUTLS_E_X509_UNSUPPORTED_EXTENSION -327
</MACRO>
<MACRO>
<NAME>GNUTLS_E_SESSION_EOF</NAME>
#define GNUTLS_E_SESSION_EOF -328
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_ERROR</NAME>
#define GNUTLS_E_TPM_ERROR -329
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_KEY_PASSWORD_ERROR</NAME>
#define GNUTLS_E_TPM_KEY_PASSWORD_ERROR -330
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_SRK_PASSWORD_ERROR</NAME>
#define GNUTLS_E_TPM_SRK_PASSWORD_ERROR -331
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_SESSION_ERROR</NAME>
#define GNUTLS_E_TPM_SESSION_ERROR -332
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_KEY_NOT_FOUND</NAME>
#define GNUTLS_E_TPM_KEY_NOT_FOUND -333
</MACRO>
<MACRO>
<NAME>GNUTLS_E_TPM_UNINITIALIZED</NAME>
#define GNUTLS_E_TPM_UNINITIALIZED -334
</MACRO>
<MACRO>
<NAME>GNUTLS_E_NO_CERTIFICATE_STATUS</NAME>
#define GNUTLS_E_NO_CERTIFICATE_STATUS -340
</MACRO>
<MACRO>
<NAME>GNUTLS_E_OCSP_RESPONSE_ERROR</NAME>
#define GNUTLS_E_OCSP_RESPONSE_ERROR -341
</MACRO>
<MACRO>
<NAME>GNUTLS_E_UNIMPLEMENTED_FEATURE</NAME>
#define GNUTLS_E_UNIMPLEMENTED_FEATURE -1250
</MACRO>
<MACRO>
<NAME>GNUTLS_E_APPLICATION_ERROR_MAX</NAME>
#define GNUTLS_E_APPLICATION_ERROR_MAX -65000
</MACRO>
<MACRO>
<NAME>GNUTLS_E_APPLICATION_ERROR_MIN</NAME>
#define GNUTLS_E_APPLICATION_ERROR_MIN -65500
</MACRO>
<STRUCT>
<NAME>gnutls_openpgp_crt_int</NAME>
  struct gnutls_openpgp_crt_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_x509_crq_int</NAME>
  struct gnutls_x509_crq_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_pkcs11_privkey_st</NAME>
  struct gnutls_pkcs11_privkey_st;
</STRUCT>
<STRUCT>
<NAME>gnutls_x509_crt_int</NAME>
  struct gnutls_x509_crt_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_certificate_credentials_st</NAME>
  struct gnutls_certificate_credentials_st;
</STRUCT>
<STRUCT>
<NAME>gnutls_x509_crl_int</NAME>
  struct gnutls_x509_crl_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_openpgp_keyring_int</NAME>
  struct gnutls_openpgp_keyring_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_dh_params_int</NAME>
  struct gnutls_dh_params_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_tdb_int</NAME>
  struct gnutls_tdb_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_session_int</NAME>
  struct gnutls_session_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_priority_st</NAME>
  struct gnutls_priority_st;
</STRUCT>
<STRUCT>
<NAME>gnutls_openpgp_privkey_int</NAME>
  struct gnutls_openpgp_privkey_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_x509_privkey_int</NAME>
  struct gnutls_x509_privkey_int;
</STRUCT>
<STRUCT>
<NAME>gnutls_ecdh_params_int</NAME>
  struct gnutls_ecdh_params_int;
</STRUCT>
<FUNCTION>
<NAME>what</NAME>
<RETURNS>const char  *</RETURNS>
) const throw ( 
</FUNCTION>
<FUNCTION>
<NAME>get_code</NAME>
<RETURNS>int  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>import_raw</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & prime, const gnutls_datum_t & generator 
</FUNCTION>
<FUNCTION>
<NAME>import_pkcs3</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & pkcs3_params, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>generate</NAME>
<RETURNS>void  </RETURNS>
unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>export_pkcs3</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crt_fmt_t format, unsigned char *params_data, size_t * params_data_size 
</FUNCTION>
<FUNCTION>
<NAME>export_raw</NAME>
<RETURNS>void  </RETURNS>
gnutls_datum_t & prime, gnutls_datum_t & generator 
</FUNCTION>
<FUNCTION>
<NAME>get_params_t</NAME>
<RETURNS>gnutls_dh_params_t  </RETURNS>
) const; dh_params & operator= (const dh_params & src 
</FUNCTION>
<FUNCTION>
<NAME>import_pkcs1</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & pkcs1_params, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>export_pkcs1</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crt_fmt_t format, unsigned char *params_data, size_t * params_data_size 
</FUNCTION>
<FUNCTION>
<NAME>bye</NAME>
<RETURNS>int  </RETURNS>
gnutls_close_request_t how 
</FUNCTION>
<FUNCTION>
<NAME>handshake</NAME>
<RETURNS>int  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>get_alert</NAME>
<RETURNS>gnutls_alert_description_t  </RETURNS>
) const; int send_alert (gnutls_alert_level_t level, gnutls_alert_description_t desc 
</FUNCTION>
<FUNCTION>
<NAME>send_appropriate_alert</NAME>
<RETURNS>int  </RETURNS>
int err 
</FUNCTION>
<FUNCTION>
<NAME>get_cipher</NAME>
<RETURNS>gnutls_cipher_algorithm_t  </RETURNS>
) const; gnutls_kx_algorithm_t get_kx () const; gnutls_mac_algorithm_t get_mac () const; gnutls_compression_method_t get_compression () const; gnutls_certificate_type_t get_certificate_type () const; // for the handshake void set_private_extensions (bool allow 
</FUNCTION>
<FUNCTION>
<NAME>get_handshake_last_out</NAME>
<RETURNS>gnutls_handshake_description_t  </RETURNS>
) const; gnutls_handshake_description_t get_handshake_last_in () const; ssize_t send (const void *data, size_t sizeofdata 
</FUNCTION>
<FUNCTION>
<NAME>recv</NAME>
<RETURNS>ssize_t  </RETURNS>
void *data, size_t sizeofdata 
</FUNCTION>
<FUNCTION>
<NAME>get_record_direction</NAME>
<RETURNS>bool  </RETURNS>
) const; // maximum packet size size_t get_max_size () const; void set_max_size (size_t size 
</FUNCTION>
<FUNCTION>
<NAME>check_pending</NAME>
<RETURNS>size_t  </RETURNS>
) const; void prf (size_t label_size, const char *label, int server_random_first, size_t extra_size, const char *extra, size_t outsize, char *out 
</FUNCTION>
<FUNCTION>
<NAME>prf_raw</NAME>
<RETURNS>void  </RETURNS>
size_t label_size, const char *label, size_t seed_size, const char *seed, size_t outsize, char *out 
</FUNCTION>
<FUNCTION>
<NAME>set_priority</NAME>
<RETURNS>void  </RETURNS>
const char *prio, const char **err_pos 
</FUNCTION>
<FUNCTION>
<NAME>get_protocol_version</NAME>
<RETURNS>gnutls_protocol_t  </RETURNS>
) const; // for resuming sessions void set_data (const void *session_data, size_t session_data_size 
</FUNCTION>
<FUNCTION>
<NAME>get_data</NAME>
<RETURNS>void  </RETURNS>
void *session_data, size_t * session_data_size) const; void get_data (gnutls_session_t session, gnutls_datum_t & data) const; void get_id (void *session_id, size_t * session_id_size) const; bool is_resumed () const; void set_max_handshake_packet_length (size_t max 
</FUNCTION>
<FUNCTION>
<NAME>clear_credentials</NAME>
<RETURNS>void  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>set_credentials</NAME>
<RETURNS>void  </RETURNS>
class credentials & cred 
</FUNCTION>
<FUNCTION>
<NAME>set_transport_ptr</NAME>
<RETURNS>void  </RETURNS>
gnutls_transport_ptr_t ptr 
</FUNCTION>
<FUNCTION>
<NAME>get_transport_ptr</NAME>
<RETURNS>gnutls_transport_ptr_t  </RETURNS>
) const; void get_transport_ptr (gnutls_transport_ptr_t & recv_ptr, gnutls_transport_ptr_t & send_ptr) const; void set_transport_lowat (size_t num 
</FUNCTION>
<FUNCTION>
<NAME>set_transport_push_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_push_func push_func 
</FUNCTION>
<FUNCTION>
<NAME>set_transport_vec_push_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_vec_push_func vec_push_func 
</FUNCTION>
<FUNCTION>
<NAME>set_transport_pull_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pull_func pull_func 
</FUNCTION>
<FUNCTION>
<NAME>set_user_ptr</NAME>
<RETURNS>void  </RETURNS>
void *ptr 
</FUNCTION>
<FUNCTION>
<NAME>get_user_ptr</NAME>
<RETURNS>void  *</RETURNS>
) const; void send_openpgp_cert (gnutls_openpgp_crt_status_t status 
</FUNCTION>
<FUNCTION>
<NAME>get_auth_type</NAME>
<RETURNS>gnutls_credentials_type_t  </RETURNS>
) const; gnutls_credentials_type_t get_server_auth_type () const; gnutls_credentials_type_t get_client_auth_type () const; // informational stuff void set_dh_prime_bits (unsigned int bits 
</FUNCTION>
<FUNCTION>
<NAME>get_dh_secret_bits</NAME>
<RETURNS>unsigned int  </RETURNS>
) const; unsigned int get_dh_peers_public_bits () const; unsigned int get_dh_prime_bits () const; void get_dh_group (gnutls_datum_t & gen, gnutls_datum_t & prime) const; void get_dh_pubkey (gnutls_datum_t & raw_key) const; void get_rsa_export_pubkey (gnutls_datum_t & exponent, gnutls_datum_t & modulus) const; unsigned int get_rsa_export_modulus_bits () const; void get_our_certificate (gnutls_datum_t & cert) const; bool get_peers_certificate (std::vector < gnutls_datum_t > &out_certs) const; bool get_peers_certificate (const gnutls_datum_t ** certs, unsigned int *certs_size) const; time_t get_peers_certificate_activation_time () const; time_t get_peers_certificate_expiration_time () const; void verify_peers_certificate (unsigned int &status) const; }; // interface for databases class DB:private noncopyable { public: virtual ~ DB () = 0; virtual bool store (const gnutls_datum_t & key, const gnutls_datum_t & data) = 0; virtual bool retrieve (const gnutls_datum_t & key, gnutls_datum_t & data) = 0; virtual bool remove (const gnutls_datum_t & key) = 0; }; class server_session:public session { public: server_session ( 
</FUNCTION>
<FUNCTION>
<NAME>db_remove</NAME>
<RETURNS>void  </RETURNS>
) const; void set_db_cache_expiration (unsigned int seconds 
</FUNCTION>
<FUNCTION>
<NAME>set_db</NAME>
<RETURNS>void  </RETURNS>
const DB & db 
</FUNCTION>
<FUNCTION>
<NAME>db_check_entry</NAME>
<RETURNS>bool  </RETURNS>
gnutls_datum_t & session_data) const; // server side only const char *get_srp_username () const; const char *get_psk_username () const; void get_server_name (void *data, size_t * data_length, unsigned int *type, unsigned int indx) const; int rehandshake ( 
</FUNCTION>
<FUNCTION>
<NAME>set_certificate_request</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_request_t 
</FUNCTION>
<FUNCTION>
<NAME>set_server_name</NAME>
<RETURNS>void  </RETURNS>
gnutls_server_name_type_t type, const void *name, size_t name_length 
</FUNCTION>
<FUNCTION>
<NAME>get_request_status</NAME>
<RETURNS>bool  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>get_type</NAME>
<RETURNS>gnutls_credentials_type_t  </RETURNS>
) const; protected: friend class session; credentials (gnutls_credentials_type_t t 
</FUNCTION>
<FUNCTION>
<NAME>ptr</NAME>
<RETURNS>void  *</RETURNS>
) const; void set_ptr (void *ptr 
</FUNCTION>
<FUNCTION>
<NAME>free_keys</NAME>
<RETURNS>void  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>free_cas</NAME>
<RETURNS>void  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>free_ca_names</NAME>
<RETURNS>void  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>free_crls</NAME>
<RETURNS>void  </RETURNS>
 
</FUNCTION>
<FUNCTION>
<NAME>set_dh_params</NAME>
<RETURNS>void  </RETURNS>
const dh_params & params 
</FUNCTION>
<FUNCTION>
<NAME>set_rsa_export_params</NAME>
<RETURNS>void  </RETURNS>
const rsa_params & params 
</FUNCTION>
<FUNCTION>
<NAME>set_verify_flags</NAME>
<RETURNS>void  </RETURNS>
unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>set_verify_limits</NAME>
<RETURNS>void  </RETURNS>
unsigned int max_bits, unsigned int max_depth 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_trust_file</NAME>
<RETURNS>void  </RETURNS>
const char *cafile, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_trust</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & CA, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_crl_file</NAME>
<RETURNS>void  </RETURNS>
const char *crlfile, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_crl</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & CRL, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_key_file</NAME>
<RETURNS>void  </RETURNS>
const char *certfile, const char *KEYFILE, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_x509_key</NAME>
<RETURNS>void  </RETURNS>
const gnutls_datum_t & CERT, const gnutls_datum_t & KEY, gnutls_x509_crt_fmt_t type 
</FUNCTION>
<FUNCTION>
<NAME>set_simple_pkcs12_file</NAME>
<RETURNS>void  </RETURNS>
const char *pkcs12file, gnutls_x509_crt_fmt_t type, const char *password 
</FUNCTION>
<FUNCTION>
<NAME>set_retrieve_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_certificate_retrieve_function * func 
</FUNCTION>
<FUNCTION>
<NAME>set_params_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_params_function * func 
</FUNCTION>
<FUNCTION>
<NAME>set_credentials_file</NAME>
<RETURNS>void  </RETURNS>
const char *password_file, const char *password_conf_file 
</FUNCTION>
<FUNCTION>
<NAME>set_credentials_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_srp_server_credentials_function * func 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_tpm_key_list_t</NAME>
typedef struct tpm_key_list_st *gnutls_tpm_key_list_t;
</TYPEDEF>
<MACRO>
<NAME>GNUTLS_TPM_KEY_SIGNING</NAME>
#define GNUTLS_TPM_KEY_SIGNING (1<<1)
</MACRO>
<MACRO>
<NAME>GNUTLS_TPM_REGISTER_KEY</NAME>
#define GNUTLS_TPM_REGISTER_KEY (1<<2)
</MACRO>
<MACRO>
<NAME>GNUTLS_TPM_KEY_USER</NAME>
#define GNUTLS_TPM_KEY_USER (1<<3)
</MACRO>
<ENUM>
<NAME>gnutls_tpmkey_fmt_t</NAME>
  typedef enum
  {
    GNUTLS_TPMKEY_FMT_DER = 0,
    GNUTLS_TPMKEY_FMT_CTK_PEM = 1
  } gnutls_tpmkey_fmt_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_tpm_privkey_generate</NAME>
<RETURNS>int </RETURNS>
gnutls_pk_algorithm_t pk, unsigned int bits, const char* srk_password, const char* key_password, gnutls_tpmkey_fmt_t format, gnutls_x509_crt_fmt_t pub_format, gnutls_datum_t* privkey, gnutls_datum_t* pubkey, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tpm_key_list_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_tpm_key_list_t list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tpm_key_list_get_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_tpm_key_list_t list, unsigned int idx, char** url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tpm_get_registered</NAME>
<RETURNS>int  </RETURNS>
gnutls_tpm_key_list_t *list 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_tpm_privkey_delete</NAME>
<RETURNS>int  </RETURNS>
const char* url, const char* srk_password 
</FUNCTION>
<STRUCT>
<NAME>tpm_key_list_st</NAME>
struct tpm_key_list_st;
</STRUCT>
<TYPEDEF>
<NAME>gnutls_pubkey_t</NAME>
typedef struct gnutls_pubkey_st *gnutls_pubkey_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_privkey_t</NAME>
typedef struct gnutls_privkey_st *gnutls_privkey_t;
</TYPEDEF>
<USER_FUNCTION>
<NAME>gnutls_privkey_sign_func</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t key,
                                         void *userdata,
                                         const gnutls_datum_t * raw_data,
                                         gnutls_datum_t * signature
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_privkey_decrypt_func</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t key,
                                            void *userdata,
                                            const gnutls_datum_t * ciphertext,
                                            gnutls_datum_t * plaintext
</USER_FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_privkey_deinit_func</NAME>
<RETURNS>void </RETURNS>
gnutls_privkey_t key,
                                           void *userdata
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pubkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_pubkey_t key, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_x509</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_x509_crt_t crt, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_x509_crq</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_x509_crq_t crq, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_pkcs11</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_pkcs11_obj_t obj, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_openpgp</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_openpgp_crt_t crt, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_openpgp_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t pkey, const gnutls_datum_t * data, gnutls_openpgp_crt_fmt_t format, const gnutls_openpgp_keyid_t keyid, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_x509_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t pkey, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_privkey</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, gnutls_privkey_t pkey, unsigned int usage, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_tpm_url</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t pkey, const char* url, const char *srk_password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_url</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_tpm_raw</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t pkey, const gnutls_datum_t * fdata, gnutls_tpmkey_fmt_t format, const char *srk_password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_preferred_hash_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_digest_algorithm_t * hash, unsigned int *mand 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_pk_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_datum_t * m, gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_pk_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_pk_ecc_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_ecc_curve_t *curve, gnutls_datum_t * x, gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_pk_ecc_x962</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_datum_t* parameters, gnutls_datum_t * ecpoint 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, gnutls_x509_crt_fmt_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, unsigned int flags, unsigned char *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_openpgp_key_id</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, unsigned int flags, unsigned char *output_data, size_t * output_data_size, unsigned int *subkey 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, unsigned int *usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_set_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, unsigned int usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_pkcs11_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, const gnutls_datum_t * p, const gnutls_datum_t * q, const gnutls_datum_t * g, const gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t key, const gnutls_datum_t * m, const gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_ecc_x962</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, const gnutls_datum_t * parameters, const gnutls_datum_t * ecpoint 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_import_ecc_raw</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, gnutls_ecc_curve_t curve, const gnutls_datum_t * x, const gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_encrypt_data</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, unsigned int flags, const gnutls_datum_t * plaintext, gnutls_datum_t * ciphertext 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_pubkey</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_pubkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_pubkey</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_pubkey_t key 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PUBKEY_VERIFY_FLAG_TLS_RSA</NAME>
#define GNUTLS_PUBKEY_VERIFY_FLAG_TLS_RSA 1
</MACRO>
<MACRO>
<NAME>GNUTLS_PUBKEY_DISABLE_CALLBACKS</NAME>
#define GNUTLS_PUBKEY_DISABLE_CALLBACKS (1<<2)
</MACRO>
<FUNCTION>
<NAME>gnutls_pubkey_verify_hash2</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, gnutls_sign_algorithm_t algo, unsigned int flags, const gnutls_datum_t * hash, const gnutls_datum_t * signature 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_get_verify_algorithm</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t key, const gnutls_datum_t * signature, gnutls_digest_algorithm_t * hash 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_verify_data2</NAME>
<RETURNS>int </RETURNS>
gnutls_pubkey_t pubkey, gnutls_sign_algorithm_t algo, unsigned int flags, const gnutls_datum_t * data, const gnutls_datum_t * signature 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_privkey_t key, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_get_type</NAME>
<RETURNS>gnutls_privkey_type_t  </RETURNS>
gnutls_privkey_t key 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE</NAME>
#define GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE (1<<0)
</MACRO>
<MACRO>
<NAME>GNUTLS_PRIVKEY_IMPORT_COPY</NAME>
#define GNUTLS_PRIVKEY_IMPORT_COPY (1<<1)
</MACRO>
<MACRO>
<NAME>GNUTLS_PRIVKEY_DISABLE_CALLBACKS</NAME>
#define GNUTLS_PRIVKEY_DISABLE_CALLBACKS (1<<2)
</MACRO>
<FUNCTION>
<NAME>gnutls_privkey_import_pkcs11</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t pkey, gnutls_pkcs11_privkey_t key, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_x509</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t pkey, gnutls_x509_privkey_t key, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_openpgp</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t pkey, gnutls_openpgp_privkey_t key, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_openpgp_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t pkey, const gnutls_datum_t * data, gnutls_openpgp_crt_fmt_t format, const gnutls_openpgp_keyid_t keyid, const char* password 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_x509_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t pkey, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, const char* password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_tpm_raw</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t pkey, const gnutls_datum_t * fdata, gnutls_tpmkey_fmt_t format, const char *srk_password, const char *key_password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_tpm_url</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t pkey, const char* url, const char *srk_password, const char *key_password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t key, const char *url, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_pkcs11_url</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t key, const char *url 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_ext</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t pkey, gnutls_pk_algorithm_t pk, void* userdata, gnutls_privkey_sign_func sign_func, gnutls_privkey_decrypt_func decrypt_func, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_import_ext2</NAME>
<RETURNS>int </RETURNS>
gnutls_privkey_t pkey, gnutls_pk_algorithm_t pk, void* userdata, gnutls_privkey_sign_func sign_func, gnutls_privkey_decrypt_func decrypt_func, gnutls_privkey_deinit_func deinit_func, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_sign_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t signer, gnutls_digest_algorithm_t hash, unsigned int flags, const gnutls_datum_t * data, gnutls_datum_t * signature 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_sign_hash</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t signer, gnutls_digest_algorithm_t hash_algo, unsigned int flags, const gnutls_datum_t * hash_data, gnutls_datum_t * signature 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_privkey_decrypt_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_privkey_t key, unsigned int flags, const gnutls_datum_t * ciphertext, gnutls_datum_t * plaintext 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_privkey_sign</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crt_t issuer, gnutls_privkey_t issuer_key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_privkey_sign</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_t issuer, gnutls_privkey_t issuer_key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_privkey_sign</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_privkey_t key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PCERT_NO_CERT</NAME>
#define GNUTLS_PCERT_NO_CERT 1
</MACRO>
<FUNCTION>
<NAME>gnutls_pcert_import_x509</NAME>
<RETURNS>int  </RETURNS>
gnutls_pcert_st* pcert, gnutls_x509_crt_t crt, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pcert_list_import_x509_raw</NAME>
<RETURNS>int </RETURNS>
gnutls_pcert_st * pcerts, unsigned int *pcert_max, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pcert_import_x509_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pcert_st* pcert, const gnutls_datum_t* cert, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pcert_import_openpgp_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pcert_st* pcert, const gnutls_datum_t* cert, gnutls_openpgp_crt_fmt_t format, gnutls_openpgp_keyid_t keyid, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pcert_import_openpgp</NAME>
<RETURNS>int  </RETURNS>
gnutls_pcert_st* pcert, gnutls_openpgp_crt_t crt, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pcert_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pcert_st* pcert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_retrieve_function2</NAME>
<RETURNS>void  </RETURNS>
 gnutls_certificate_credentials_t cred, gnutls_certificate_retrieve_function2 * func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_key</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const char** names, int names_size, gnutls_pcert_st * pcert_list, int pcert_list_size, gnutls_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pubkey_verify_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_pubkey_t pubkey, unsigned int flags, const gnutls_datum_t * data, const gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_pubkey_verify_hash (gnutls_pubkey_t key, unsigned int flags, const gnutls_datum_t * hash, const gnutls_datum_t * signature) _GNUTLS_GCC_ATTR_DEPRECATED; int gnutls_pubkey_print (gnutls_pubkey_t pubkey, gnutls_certificate_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<STRUCT>
<NAME>gnutls_pubkey_st</NAME>
struct gnutls_pubkey_st;
</STRUCT>
<STRUCT>
<NAME>gnutls_privkey_st</NAME>
struct gnutls_privkey_st;
</STRUCT>
<TYPEDEF>
<NAME>gnutls_cipher_hd_t</NAME>
  typedef struct api_cipher_hd_st *gnutls_cipher_hd_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_cipher_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_cipher_hd_t * handle, gnutls_cipher_algorithm_t cipher, const gnutls_datum_t * key, const gnutls_datum_t * iv 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_encrypt</NAME>
<RETURNS>int  </RETURNS>
const gnutls_cipher_hd_t handle, void *text, size_t textlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_decrypt</NAME>
<RETURNS>int  </RETURNS>
const gnutls_cipher_hd_t handle, void *ciphertext, size_t ciphertextlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_decrypt2</NAME>
<RETURNS>int  </RETURNS>
gnutls_cipher_hd_t handle, const void *ciphertext, size_t ciphertextlen, void *text, size_t textlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_encrypt2</NAME>
<RETURNS>int  </RETURNS>
gnutls_cipher_hd_t handle, const void *text, size_t textlen, void *ciphertext, size_t ciphertextlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_set_iv</NAME>
<RETURNS>void  </RETURNS>
gnutls_cipher_hd_t handle, void *iv, size_t ivlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_tag</NAME>
<RETURNS>int  </RETURNS>
 gnutls_cipher_hd_t handle, void* tag, size_t tag_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_add_auth</NAME>
<RETURNS>int  </RETURNS>
 gnutls_cipher_hd_t handle, const void* text, size_t text_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_cipher_hd_t handle 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cipher_get_block_size</NAME>
<RETURNS>int  </RETURNS>
gnutls_cipher_algorithm_t algorithm 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_hash_hd_t</NAME>
  typedef struct hash_hd_st *gnutls_hash_hd_t;
</TYPEDEF>
<TYPEDEF>
<NAME>gnutls_hmac_hd_t</NAME>
  typedef struct hmac_hd_st *gnutls_hmac_hd_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_hmac_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_hmac_hd_t * dig, gnutls_mac_algorithm_t algorithm, const void *key, size_t keylen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hmac</NAME>
<RETURNS>int  </RETURNS>
gnutls_hmac_hd_t handle, const void *text, size_t textlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hmac_output</NAME>
<RETURNS>void  </RETURNS>
gnutls_hmac_hd_t handle, void *digest 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hmac_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_hmac_hd_t handle, void *digest 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hmac_get_len</NAME>
<RETURNS>int  </RETURNS>
gnutls_mac_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hmac_fast</NAME>
<RETURNS>int  </RETURNS>
gnutls_mac_algorithm_t algorithm, const void *key, size_t keylen, const void *text, size_t textlen, void *digest 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_hash_hd_t * dig, gnutls_digest_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash</NAME>
<RETURNS>int  </RETURNS>
gnutls_hash_hd_t handle, const void *text, size_t textlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash_output</NAME>
<RETURNS>void  </RETURNS>
gnutls_hash_hd_t handle, void *digest 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_hash_hd_t handle, void *digest 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash_get_len</NAME>
<RETURNS>int  </RETURNS>
gnutls_digest_algorithm_t algorithm 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_hash_fast</NAME>
<RETURNS>int  </RETURNS>
gnutls_digest_algorithm_t algorithm, const void *text, size_t textlen, void *digest 
</FUNCTION>
<ENUM>
<NAME>gnutls_rnd_level_t</NAME>
  typedef enum gnutls_rnd_level
  {
    GNUTLS_RND_NONCE = 0,
    GNUTLS_RND_RANDOM = 1,
    GNUTLS_RND_KEY = 2
  } gnutls_rnd_level_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_rnd</NAME>
<RETURNS>int  </RETURNS>
gnutls_rnd_level_t level, void *data, size_t len 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_OID_X520_COUNTRY_NAME</NAME>
#define GNUTLS_OID_X520_COUNTRY_NAME		"2.5.4.6"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_ORGANIZATION_NAME</NAME>
#define GNUTLS_OID_X520_ORGANIZATION_NAME	"2.5.4.10"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME</NAME>
#define GNUTLS_OID_X520_ORGANIZATIONAL_UNIT_NAME "2.5.4.11"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_COMMON_NAME</NAME>
#define GNUTLS_OID_X520_COMMON_NAME		"2.5.4.3"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_LOCALITY_NAME</NAME>
#define GNUTLS_OID_X520_LOCALITY_NAME		"2.5.4.7"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME</NAME>
#define GNUTLS_OID_X520_STATE_OR_PROVINCE_NAME	"2.5.4.8"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_INITIALS</NAME>
#define GNUTLS_OID_X520_INITIALS		"2.5.4.43"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_GENERATION_QUALIFIER</NAME>
#define GNUTLS_OID_X520_GENERATION_QUALIFIER	"2.5.4.44"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_SURNAME</NAME>
#define GNUTLS_OID_X520_SURNAME			"2.5.4.4"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_GIVEN_NAME</NAME>
#define GNUTLS_OID_X520_GIVEN_NAME		"2.5.4.42"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_TITLE</NAME>
#define GNUTLS_OID_X520_TITLE			"2.5.4.12"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_DN_QUALIFIER</NAME>
#define GNUTLS_OID_X520_DN_QUALIFIER		"2.5.4.46"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_PSEUDONYM</NAME>
#define GNUTLS_OID_X520_PSEUDONYM		"2.5.4.65"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_POSTALCODE</NAME>
#define GNUTLS_OID_X520_POSTALCODE              "2.5.4.17"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_X520_NAME</NAME>
#define GNUTLS_OID_X520_NAME                    "2.5.4.41"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_LDAP_DC</NAME>
#define GNUTLS_OID_LDAP_DC			"0.9.2342.19200300.100.1.25"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_LDAP_UID</NAME>
#define GNUTLS_OID_LDAP_UID			"0.9.2342.19200300.100.1.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKCS9_EMAIL</NAME>
#define GNUTLS_OID_PKCS9_EMAIL			"1.2.840.113549.1.9.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKIX_DATE_OF_BIRTH</NAME>
#define GNUTLS_OID_PKIX_DATE_OF_BIRTH		"1.3.6.1.5.5.7.9.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKIX_PLACE_OF_BIRTH</NAME>
#define GNUTLS_OID_PKIX_PLACE_OF_BIRTH		"1.3.6.1.5.5.7.9.2"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKIX_GENDER</NAME>
#define GNUTLS_OID_PKIX_GENDER			"1.3.6.1.5.5.7.9.3"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP</NAME>
#define GNUTLS_OID_PKIX_COUNTRY_OF_CITIZENSHIP	"1.3.6.1.5.5.7.9.4"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE</NAME>
#define GNUTLS_OID_PKIX_COUNTRY_OF_RESIDENCE	"1.3.6.1.5.5.7.9.5"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_TLS_WWW_SERVER</NAME>
#define GNUTLS_KP_TLS_WWW_SERVER		"1.3.6.1.5.5.7.3.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_TLS_WWW_CLIENT</NAME>
#define GNUTLS_KP_TLS_WWW_CLIENT                "1.3.6.1.5.5.7.3.2"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_CODE_SIGNING</NAME>
#define GNUTLS_KP_CODE_SIGNING			"1.3.6.1.5.5.7.3.3"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_MS_SMART_CARD_LOGON</NAME>
#define GNUTLS_KP_MS_SMART_CARD_LOGON		"1.3.6.1.4.1.311.20.2.2"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_EMAIL_PROTECTION</NAME>
#define GNUTLS_KP_EMAIL_PROTECTION		"1.3.6.1.5.5.7.3.4"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_TIME_STAMPING</NAME>
#define GNUTLS_KP_TIME_STAMPING			"1.3.6.1.5.5.7.3.8"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_OCSP_SIGNING</NAME>
#define GNUTLS_KP_OCSP_SIGNING			"1.3.6.1.5.5.7.3.9"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_IPSEC_IKE</NAME>
#define GNUTLS_KP_IPSEC_IKE			"1.3.6.1.5.5.7.3.17"
</MACRO>
<MACRO>
<NAME>GNUTLS_KP_ANY</NAME>
#define GNUTLS_KP_ANY				"2.5.29.37.0"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_AIA</NAME>
#define GNUTLS_OID_AIA				"1.3.6.1.5.5.7.1.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_AD_OCSP</NAME>
#define GNUTLS_OID_AD_OCSP			"1.3.6.1.5.5.7.48.1"
</MACRO>
<MACRO>
<NAME>GNUTLS_OID_AD_CAISSUERS</NAME>
#define GNUTLS_OID_AD_CAISSUERS			"1.3.6.1.5.5.7.48.2"
</MACRO>
<MACRO>
<NAME>GNUTLS_FSAN_SET</NAME>
#define GNUTLS_FSAN_SET 0
</MACRO>
<MACRO>
<NAME>GNUTLS_FSAN_APPEND</NAME>
#define GNUTLS_FSAN_APPEND 1
</MACRO>
<ENUM>
<NAME>gnutls_certificate_import_flags</NAME>
  typedef enum gnutls_certificate_import_flags
  {
    GNUTLS_X509_CRT_LIST_IMPORT_FAIL_IF_EXCEED = 1,
    GNUTLS_X509_CRT_LIST_FAIL_IF_UNSORTED = 2
  } gnutls_certificate_import_flags;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_crt_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t * cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_list_import2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t ** certs, unsigned int * size, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_list_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t * certs, unsigned int *cert_max, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_crt_fmt_t format, gnutls_datum_t* out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_private_key_usage_period</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, time_t* activation, time_t* expiration, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, char *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_dn_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *oid, size_t * oid_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const char *oid, int indx, unsigned int raw_flag, void *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, char *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_dn_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *oid, size_t * oid_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const char *oid, int indx, unsigned int raw_flag, void *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_check_hostname</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const char *hostname 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_signature_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_signature</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, char *sig, size_t * sizeof_sig 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int flags, unsigned char *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_private_key_usage_period</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, time_t activation, time_t expiration 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_authority_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const void *id, size_t id_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_authority_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, void *id, size_t * id_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_authority_key_gn_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *alt, size_t * alt_size, unsigned int *alt_type, void* serial, size_t *serial_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, void *ret, size_t * ret_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject_unique_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, char *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_unique_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, char *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_pin_function</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crt_t crt, gnutls_pin_callback_t fn, void *userdata 
</FUNCTION>
<ENUM>
<NAME>gnutls_info_access_what_t</NAME>
  typedef enum gnutls_info_access_what_t
    {
      GNUTLS_IA_ACCESSMETHOD_OID = 1,
      GNUTLS_IA_ACCESSLOCATION_GENERALNAME_TYPE = 2,
      /* use 100-108 for the generalName types, populate as needed */
      GNUTLS_IA_URI = 106,
      /* quick-access variants that match both OID and name type. */
      GNUTLS_IA_OCSP_URI = 10006,
      GNUTLS_IA_CAISSUERS_URI = 10106
    } gnutls_info_access_what_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_crt_get_authority_info_access</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int seq, int what, gnutls_datum_t * data, unsigned int *critical 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_CRL_REASON_SUPERSEEDED</NAME>
#define GNUTLS_CRL_REASON_SUPERSEEDED GNUTLS_CRL_REASON_SUPERSEDED,
</MACRO>
<ENUM>
<NAME>gnutls_x509_crl_reason_flags_t</NAME>
  typedef enum gnutls_x509_crl_reason_flags_t
    {
      GNUTLS_CRL_REASON_UNSPECIFIED=0,
      GNUTLS_CRL_REASON_PRIVILEGE_WITHDRAWN=1,
      GNUTLS_CRL_REASON_CERTIFICATE_HOLD=2,
      GNUTLS_CRL_REASON_CESSATION_OF_OPERATION=4,
      GNUTLS_CRL_REASON_SUPERSEDED=8,
      GNUTLS_CRL_REASON_AFFILIATION_CHANGED=16,
      GNUTLS_CRL_REASON_CA_COMPROMISE=32,
      GNUTLS_CRL_REASON_KEY_COMPROMISE=64,
      GNUTLS_CRL_REASON_UNUSED=128,
      GNUTLS_CRL_REASON_AA_COMPROMISE=32768
    } gnutls_x509_crl_reason_flags_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_crt_get_crl_dist_points</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *ret, size_t * ret_size, unsigned int *reason_flags, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_crl_dist_points2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_subject_alt_name_t type, const void *data, unsigned int data_size, unsigned int reason_flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_crl_dist_points</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_subject_alt_name_t type, const void *data_string, unsigned int reason_flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_cpy_crl_dist_points</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t dst, gnutls_x509_crt_t src 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_sign2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_t issuer, gnutls_x509_privkey_t issuer_key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_activation_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_expiration_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_x509_crt_t cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, void *result, size_t * result_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_pk_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_datum_t * m, gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_pk_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject_alt_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *san, size_t * san_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject_alt_name2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *san, size_t * san_size, unsigned int *san_type, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject_alt_othername_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *oid, size_t * oid_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_alt_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *ian, size_t * ian_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_alt_name2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *ian, size_t * ian_size, unsigned int *ian_type, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer_alt_othername_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int seq, void *ret, size_t * ret_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_ca_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_basic_constraints</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int *critical, unsigned int *ca, int *pathlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int *key_usage, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_authority_info_access</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, int what, gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_proxy</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, unsigned int *critical, int *pathlen, char **policyLanguage, char **policy, size_t * sizeof_policy 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_MAX_QUALIFIERS</NAME>
#define GNUTLS_MAX_QUALIFIERS 8
</MACRO>
<ENUM>
<NAME>gnutls_x509_qualifier_t</NAME>
  typedef enum gnutls_x509_qualifier_t 
  {
    GNUTLS_X509_QUALIFIER_UNKNOWN = 0, GNUTLS_X509_QUALIFIER_URI, 
    GNUTLS_X509_QUALIFIER_NOTICE
  } gnutls_x509_qualifier_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_policy_release</NAME>
<RETURNS>void  </RETURNS>
struct gnutls_x509_policy_st* policy 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_policy</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, int indx, struct gnutls_x509_policy_st* policy, unsigned int * critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_policy</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, struct gnutls_x509_policy_st* policy, unsigned int critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_oid_known</NAME>
<RETURNS>int  </RETURNS>
const char *oid 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_X509_DN_OID_RETURN_OID</NAME>
#define GNUTLS_X509_DN_OID_RETURN_OID 1
</MACRO>
<FUNCTION>
<NAME>gnutls_x509_dn_oid_name</NAME>
<RETURNS>const char * </RETURNS>
const char *oid, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_extension_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *oid, size_t * oid_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_extension_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const char *oid, int indx, void *buf, size_t * buf_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_extension_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *oid, size_t * oid_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_extension_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *data, size_t * sizeof_data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_extension_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, const char *oid, const void *buf, size_t sizeof_buf, unsigned int critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, const char *oid, unsigned int raw_flag, const void *name, unsigned int sizeof_name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_issuer_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, const char *oid, unsigned int raw_flag, const void *name, unsigned int sizeof_name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_key</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_ca_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int ca 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_basic_constraints</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, unsigned int ca, int pathLenConstraint 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_subject_alternative_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_subject_alt_name_t type, const char *data_string 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_subject_alt_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_subject_alt_name_t type, const void *data, unsigned int data_size, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_sign</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crt_t issuer, gnutls_x509_privkey_t issuer_key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_sign2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crt_t issuer, gnutls_x509_privkey_t issuer_key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_activation_time</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, time_t act_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_expiration_time</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, time_t exp_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const void *serial, size_t serial_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_subject_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const void *id, size_t id_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_proxy_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crt_t eecrt, unsigned int raw_flag, const void *name, unsigned int sizeof_name 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_proxy</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, int pathLenConstraint, const char *policyLanguage, const char *policy, size_t sizeof_policy 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_certificate_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_certificate_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_raw_issuer_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_datum_t * start 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_raw_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_datum_t * start 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_rdn_get</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * idn, char *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_rdn_get_oid</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * idn, int indx, void *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_rdn_get_by_oid</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * idn, const char *oid, int indx, unsigned int raw_flag, void *buf, size_t * sizeof_buf 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_x509_dn_t</NAME>
  typedef void *gnutls_x509_dn_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_x509_crt_get_subject</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_dn_t * dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_issuer</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_dn_t * dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_get_rdn_ava</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_dn_t dn, int irdn, int iava, gnutls_x509_ava_st * ava 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_dn_t * dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_dn_t dn, const gnutls_datum_t * data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_dn_t dn, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_dn_t dn, gnutls_x509_crt_fmt_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_dn_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_dn_t dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t * crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_fmt_t format, gnutls_datum_t *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_raw_issuer_dn</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_crl_t crl, gnutls_datum_t * dn 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_issuer_dn</NAME>
<RETURNS>int  </RETURNS>
const gnutls_x509_crl_t crl, char *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_issuer_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const char *oid, int indx, unsigned int raw_flag, void *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_dn_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, int indx, void *oid, size_t * sizeof_oid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_signature_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_signature</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, char *sig, size_t * sizeof_sig 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_this_update</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_next_update</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_crt_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_crt_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, int indx, unsigned char *serial, size_t * serial_size, time_t * t 
</FUNCTION>
<MACRO>
<NAME>gnutls_x509_crl_get_certificate_count</NAME>
#define gnutls_x509_crl_get_certificate_count gnutls_x509_crl_get_crt_count
</MACRO>
<MACRO>
<NAME>gnutls_x509_crl_get_certificate</NAME>
#define gnutls_x509_crl_get_certificate gnutls_x509_crl_get_crt_serial
</MACRO>
<FUNCTION>
<NAME>gnutls_x509_crl_check_issuer</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_t issuer 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_list_import2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t ** crls, unsigned int * size, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_list_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t * crls, unsigned int *crl_max, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, unsigned int version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_this_update</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, time_t act_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_next_update</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, time_t exp_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_crt_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const void *serial, size_t serial_size, time_t revocation_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, gnutls_x509_crt_t crt, time_t revocation_time 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_authority_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, void *id, size_t * id_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_authority_key_gn_serial</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, unsigned int seq, void *alt, size_t * alt_size, unsigned int *alt_type, void* serial, size_t *serial_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_number</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, void *ret, size_t * ret_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_extension_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, int indx, void *oid, size_t * sizeof_oid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_extension_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, int indx, void *oid, size_t * sizeof_oid, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_get_extension_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, int indx, void *data, size_t * sizeof_data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_authority_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const void *id, size_t id_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_set_number</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const void *nr, size_t nr_size 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_pkcs7_t</NAME>
  typedef struct gnutls_pkcs7_int *gnutls_pkcs7_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_pkcs7_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t * pkcs7 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_pkcs7_t pkcs7 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, gnutls_x509_crt_fmt_t format, gnutls_datum_t *out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_get_crt_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_get_crt_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, int indx, void *certificate, size_t * certificate_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_set_crt_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, const gnutls_datum_t * crt 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_set_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, gnutls_x509_crt_t crt 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_delete_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, int indx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_get_crl_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, int indx, void *crl, size_t * crl_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_get_crl_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_set_crl_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, const gnutls_datum_t * crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_set_crl</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, gnutls_x509_crl_t crl 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_pkcs7_delete_crl</NAME>
<RETURNS>int  </RETURNS>
gnutls_pkcs7_t pkcs7, int indx 
</FUNCTION>
<ENUM>
<NAME>gnutls_certificate_verify_flags</NAME>
  typedef enum gnutls_certificate_verify_flags
  {
    GNUTLS_VERIFY_DISABLE_CA_SIGN = 1<<0,
    GNUTLS_VERIFY_ALLOW_X509_V1_CA_CRT = 1<<1,
    GNUTLS_VERIFY_DO_NOT_ALLOW_SAME = 1<<2,
    GNUTLS_VERIFY_ALLOW_ANY_X509_V1_CA_CRT = 1<<3,
    GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD2 = 1<<4,
    GNUTLS_VERIFY_ALLOW_SIGN_RSA_MD5 = 1<<5,
    GNUTLS_VERIFY_DISABLE_TIME_CHECKS = 1<<6,
    GNUTLS_VERIFY_DISABLE_TRUSTED_TIME_CHECKS = 1<<7,
    GNUTLS_VERIFY_DO_NOT_ALLOW_X509_V1_CA_CRT = 1<<8,
    GNUTLS_VERIFY_DISABLE_CRL_CHECKS = 1<<9,
    GNUTLS_VERIFY_ALLOW_UNSORTED_CHAIN = 1<<10,
    GNUTLS_VERIFY_DO_NOT_ALLOW_UNSORTED_CHAIN = 1<<11,
  } gnutls_certificate_verify_flags;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_crt_check_issuer</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_x509_crt_t issuer 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_list_verify</NAME>
<RETURNS>int  </RETURNS>
const gnutls_x509_crt_t * cert_list, int cert_list_length, const gnutls_x509_crt_t * CA_list, int CA_list_length, const gnutls_x509_crl_t * CRL_list, int CRL_list_length, unsigned int flags, unsigned int *verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_verify</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const gnutls_x509_crt_t * CA_list, int CA_list_length, unsigned int flags, unsigned int *verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crl_verify</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crl_t crl, const gnutls_x509_crt_t * CA_list, int CA_list_length, unsigned int flags, unsigned int *verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_check_revocation</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const gnutls_x509_crl_t * crl_list, int crl_list_length 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, gnutls_digest_algorithm_t algo, void *buf, size_t * buf_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_get_key_purpose_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, int indx, void *oid, size_t * oid_size, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_key_purpose_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t cert, const void *oid, unsigned int critical 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_PKCS8_PLAIN</NAME>
#define GNUTLS_PKCS8_PLAIN GNUTLS_PKCS_PLAIN
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS8_USE_PKCS12_3DES</NAME>
#define GNUTLS_PKCS8_USE_PKCS12_3DES GNUTLS_PKCS_USE_PKCS12_3DES
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS8_USE_PKCS12_ARCFOUR</NAME>
#define GNUTLS_PKCS8_USE_PKCS12_ARCFOUR GNUTLS_PKCS_USE_PKCS12_ARCFOUR
</MACRO>
<MACRO>
<NAME>GNUTLS_PKCS8_USE_PKCS12_RC2_40</NAME>
#define GNUTLS_PKCS8_USE_PKCS12_RC2_40 GNUTLS_PKCS_USE_PKCS12_RC2_40
</MACRO>
<ENUM>
<NAME>gnutls_pkcs_encrypt_flags_t</NAME>
  typedef enum gnutls_pkcs_encrypt_flags_t
  {
    GNUTLS_PKCS_PLAIN = 1,
    GNUTLS_PKCS_USE_PKCS12_3DES = 2,
    GNUTLS_PKCS_USE_PKCS12_ARCFOUR = 4,
    GNUTLS_PKCS_USE_PKCS12_RC2_40 = 8,
    GNUTLS_PKCS_USE_PBES2_3DES = 16,
    GNUTLS_PKCS_USE_PBES2_AES_128 = 32,
    GNUTLS_PKCS_USE_PBES2_AES_192 = 64,
    GNUTLS_PKCS_USE_PBES2_AES_256 = 128,
    GNUTLS_PKCS_NULL_PASSWORD = 256
  } gnutls_pkcs_encrypt_flags_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_x509_privkey_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_sec_param</NAME>
<RETURNS>gnutls_sec_param_t  </RETURNS>
gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_cpy</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t dst, gnutls_x509_privkey_t src 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_pkcs8</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, const char *password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_openssl</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t *data, const char* password 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format, const char* password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * m, const gnutls_datum_t * e, const gnutls_datum_t * d, const gnutls_datum_t * p, const gnutls_datum_t * q, const gnutls_datum_t * u 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_rsa_raw2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * m, const gnutls_datum_t * e, const gnutls_datum_t * d, const gnutls_datum_t * p, const gnutls_datum_t * q, const gnutls_datum_t * u, const gnutls_datum_t * e1, const gnutls_datum_t * e2 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_ecc_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_ecc_curve_t curve, const gnutls_datum_t * x, const gnutls_datum_t * y, const gnutls_datum_t * k 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_fix</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y, gnutls_datum_t * x 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_import_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, const gnutls_datum_t * p, const gnutls_datum_t * q, const gnutls_datum_t * g, const gnutls_datum_t * y, const gnutls_datum_t * x 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_get_pk_algorithm2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, unsigned int flags, unsigned char *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_generate</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_pk_algorithm_t algo, unsigned int bits, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_verify_params</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_x509_crt_fmt_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export_pkcs8</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_x509_crt_fmt_t format, const char *password, unsigned int flags, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export2_pkcs8</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_x509_crt_fmt_t format, const char *password, unsigned int flags, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export_rsa_raw2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_datum_t * m, gnutls_datum_t * e, gnutls_datum_t * d, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * u, gnutls_datum_t * e1, gnutls_datum_t * e2 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_datum_t * m, gnutls_datum_t * e, gnutls_datum_t * d, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * u 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_privkey_export_ecc_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_privkey_t key, gnutls_ecc_curve_t *curve, gnutls_datum_t * x, gnutls_datum_t * y, gnutls_datum_t* k 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_sign2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_x509_privkey_t key, gnutls_digest_algorithm_t dig, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_certificate_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_verify</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t * crq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_x509_crq_t crq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const gnutls_datum_t * data, gnutls_x509_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_private_key_usage_period</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t cert, time_t* activation, time_t* expiration, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_dn</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, char *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_dn_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *oid, size_t * sizeof_oid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *oid, int indx, unsigned int raw_flag, void *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_dn_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *oid, unsigned int raw_flag, const void *data, unsigned int sizeof_data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int version 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_key</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_x509_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_challenge_password</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *pass 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_challenge_password</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, char *pass, size_t * sizeof_pass 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_attribute_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *oid, void *buf, size_t sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_attribute_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *oid, int indx, void *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_x509_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_x509_crt_fmt_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_crq</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crq_t crq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crt_set_crq_extensions</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crt_t crt, gnutls_x509_crq_t crq 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_private_key_usage_period</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, time_t activation, time_t expiration 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_key_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const gnutls_datum_t * m, const gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_subject_alt_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_x509_subject_alt_name_t nt, const void *data, unsigned int data_size, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_basic_constraints</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int ca, int pathLenConstraint 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_set_key_purpose_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const void *oid, unsigned int critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_key_purpose_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *oid, size_t * sizeof_oid, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_extension_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *data, size_t * sizeof_data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_extension_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *oid, size_t * sizeof_oid, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_attribute_data</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *data, size_t * sizeof_data 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_attribute_info</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, int indx, void *oid, size_t * sizeof_oid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_pk_algorithm</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int flags, unsigned char *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_key_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, gnutls_datum_t * m, gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int *key_usage, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_basic_constraints</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int *critical, unsigned int *ca, int *pathlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_subject_alt_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int seq, void *ret, size_t * ret_size, unsigned int *ret_type, unsigned int *critical 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_subject_alt_othername_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, unsigned int seq, void *ret, size_t * ret_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_crq_get_extension_by_oid</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_crq_t crq, const char *oid, int indx, void *buf, size_t * sizeof_buf, unsigned int *critical 
</FUNCTION>
<TYPEDEF>
<NAME>gnutls_x509_trust_list_t</NAME>
  typedef struct gnutls_x509_trust_list_st *gnutls_x509_trust_list_t;
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_x509_trust_list_init</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t * list, unsigned int size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_deinit</NAME>
<RETURNS>void </RETURNS>
gnutls_x509_trust_list_t list, unsigned int all 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_get_issuer</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_trust_list_t list, gnutls_x509_crt_t cert, gnutls_x509_crt_t* issuer, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_cas</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t list, const gnutls_x509_crt_t * clist, int clist_size, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_named_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_x509_trust_list_t list, gnutls_x509_crt_t cert, const void* name, size_t name_size, unsigned int flags 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_TL_VERIFY_CRL</NAME>
#define GNUTLS_TL_VERIFY_CRL 1
</MACRO>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_crls</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t list, const gnutls_x509_crl_t * crl_list, int crl_size, unsigned int flags, unsigned int verification_flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_verify_named_crt</NAME>
<RETURNS>int  </RETURNS>
 gnutls_x509_trust_list_t list, gnutls_x509_crt_t cert, const void * name, size_t name_size, unsigned int flags, unsigned int *verify, gnutls_verify_output_function func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_verify_crt</NAME>
<RETURNS>int </RETURNS>
 gnutls_x509_trust_list_t list, gnutls_x509_crt_t *cert_list, unsigned int cert_list_size, unsigned int flags, unsigned int *verify, gnutls_verify_output_function func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_trust_mem</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t list, const gnutls_datum_t * cas, const gnutls_datum_t * crls, gnutls_x509_crt_fmt_t type, unsigned int tl_flags, unsigned int tl_vflags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_trust_file</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t list, const char* ca_file, const char* crl_file, gnutls_x509_crt_fmt_t type, unsigned int tl_flags, unsigned int tl_vflags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_x509_trust_list_add_system_trust</NAME>
<RETURNS>int </RETURNS>
gnutls_x509_trust_list_t list, unsigned int tl_flags, unsigned int tl_vflags 
</FUNCTION>
<STRUCT>
<NAME>gnutls_pkcs7_int</NAME>
  struct gnutls_pkcs7_int;
</STRUCT>
<ENUM>
<NAME>gnutls_openpgp_crt_fmt_t</NAME>
  typedef enum gnutls_openpgp_crt_fmt
  {
    GNUTLS_OPENPGP_FMT_RAW,
    GNUTLS_OPENPGP_FMT_BASE64
  } gnutls_openpgp_crt_fmt_t;
</ENUM>
<MACRO>
<NAME>GNUTLS_OPENPGP_KEYID_SIZE</NAME>
#define GNUTLS_OPENPGP_KEYID_SIZE 8
</MACRO>
<TYPEDEF>
<NAME>gnutls_openpgp_keyid_t</NAME>
  typedef unsigned char gnutls_openpgp_keyid_t[GNUTLS_OPENPGP_KEYID_SIZE];
</TYPEDEF>
<FUNCTION>
<NAME>gnutls_openpgp_crt_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, const gnutls_datum_t * data, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, gnutls_openpgp_crt_fmt_t format, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, gnutls_openpgp_crt_fmt_t format, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_print</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t cert, gnutls_certificate_print_formats_t format, gnutls_datum_t * out 
</FUNCTION>
<MACRO>
<NAME>GNUTLS_OPENPGP_MASTER_KEYID_IDX</NAME>
#define GNUTLS_OPENPGP_MASTER_KEYID_IDX INT_MAX
</MACRO>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_key_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int *key_usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, void *fpr, size_t * fprlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx, void *fpr, size_t * fprlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_name</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, int idx, char *buf, size_t * sizeof_buf 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_pk_algorithm</NAME>
<RETURNS>gnutls_pk_algorithm_t </RETURNS>
gnutls_openpgp_crt_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_version</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_creation_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_expiration_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_check_hostname</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, const char *hostname 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_revoked_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_idx</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, const gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_revoked_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_pk_algorithm</NAME>
<RETURNS>gnutls_pk_algorithm_t </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_creation_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_expiration_time</NAME>
<RETURNS>time_t  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_usage</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int idx, unsigned int *key_usage 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_pk_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t crt, unsigned int idx, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_subkey_pk_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t crt, unsigned int idx, gnutls_datum_t * m, gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_pk_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t crt, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_pk_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t crt, gnutls_datum_t * m, gnutls_datum_t * e 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_preferred_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_set_preferred_key_id</NAME>
<RETURNS>int </RETURNS>
gnutls_openpgp_crt_t key, const gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t * key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_openpgp_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_pk_algorithm</NAME>
<RETURNS>gnutls_pk_algorithm_t </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_sec_param</NAME>
<RETURNS>gnutls_sec_param_t </RETURNS>
gnutls_openpgp_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, const gnutls_datum_t * data, gnutls_openpgp_crt_fmt_t format, const char *password, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, void *fpr, size_t * fprlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_fingerprint</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx, void *fpr, size_t * fprlen 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_idx</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, const gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_revoked_status</NAME>
<RETURNS>int </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_revoked_status</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_pk_algorithm</NAME>
<RETURNS>gnutls_pk_algorithm_t </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx, unsigned int *bits 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_expiration_time</NAME>
<RETURNS>time_t</RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_subkey_creation_time</NAME>
<RETURNS>time_t </RETURNS>
gnutls_openpgp_privkey_t key, unsigned int idx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export_subkey_dsa_raw</NAME>
<RETURNS>int </RETURNS>
gnutls_openpgp_privkey_t pkey, unsigned int idx, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y, gnutls_datum_t * x 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export_subkey_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t pkey, unsigned int idx, gnutls_datum_t * m, gnutls_datum_t * e, gnutls_datum_t * d, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * u 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export_dsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t pkey, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * g, gnutls_datum_t * y, gnutls_datum_t * x 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export_rsa_raw</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t pkey, gnutls_datum_t * m, gnutls_datum_t * e, gnutls_datum_t * d, gnutls_datum_t * p, gnutls_datum_t * q, gnutls_datum_t * u 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, gnutls_openpgp_crt_fmt_t format, const char *password, unsigned int flags, void *output_data, size_t * output_data_size 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_export2</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, gnutls_openpgp_crt_fmt_t format, const char *password, unsigned int flags, gnutls_datum_t * out 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_set_preferred_key_id</NAME>
<RETURNS>int </RETURNS>
gnutls_openpgp_privkey_t key, const gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_privkey_get_preferred_key_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_privkey_t key, gnutls_openpgp_keyid_t keyid 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_get_auth_subkey</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t crt, gnutls_openpgp_keyid_t keyid, unsigned int flag 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_init</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_keyring_t * keyring 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_deinit</NAME>
<RETURNS>void  </RETURNS>
gnutls_openpgp_keyring_t keyring 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_import</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_keyring_t keyring, const gnutls_datum_t * data, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_check_id</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_keyring_t ring, const gnutls_openpgp_keyid_t keyid, unsigned int flags 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_verify_ring</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, gnutls_openpgp_keyring_t keyring, unsigned int flags, unsigned int *verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_crt_verify_self</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_crt_t key, unsigned int flags, unsigned int *verify 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_get_crt</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_keyring_t ring, unsigned int idx, gnutls_openpgp_crt_t * cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_keyring_get_crt_count</NAME>
<RETURNS>int  </RETURNS>
gnutls_openpgp_keyring_t ring 
</FUNCTION>
<USER_FUNCTION>
<NAME>gnutls_openpgp_recv_key_func</NAME>
<RETURNS>int </RETURNS>
gnutls_session_t session,
                                               const unsigned char *keyfpr,
                                               unsigned int keyfpr_length,
                                               gnutls_datum_t * key
</USER_FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_set_recv_key_function</NAME>
<RETURNS>void </RETURNS>
gnutls_session_t session, gnutls_openpgp_recv_key_func func 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_key</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_openpgp_crt_t crt, gnutls_openpgp_privkey_t pkey 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_key_file</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const char *certfile, const char *keyfile, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_key_mem</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * cert, const gnutls_datum_t * key, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_key_file2</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const char *certfile, const char *keyfile, const char *subkey_id, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_key_mem2</NAME>
<RETURNS>int </RETURNS>
gnutls_certificate_credentials_t res, const gnutls_datum_t * cert, const gnutls_datum_t * key, const char *subkey_id, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_keyring_mem</NAME>
<RETURNS>int  </RETURNS>
 gnutls_certificate_credentials_t c, const unsigned char *data, size_t dlen, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_certificate_set_openpgp_keyring_file</NAME>
<RETURNS>int  </RETURNS>
 gnutls_certificate_credentials_t c, const char *file, gnutls_openpgp_crt_fmt_t format 
</FUNCTION>
<MACRO>
<NAME>KEYID_IMPORT</NAME>
#define KEYID_IMPORT(dst, src) { \
	dst[0] = _gnutls_read_uint32( src); \
	dst[1] = _gnutls_read_uint32( src+4); }
</MACRO>
<ENUM>
<NAME>key_attr_t</NAME>
typedef enum
{
  KEY_ATTR_NONE = 0,
  KEY_ATTR_SHORT_KEYID = 3,
  KEY_ATTR_KEYID = 4,
  KEY_ATTR_FPR = 5
} key_attr_t;
</ENUM>
<FUNCTION>
<NAME>gnutls_openpgp_count_key_names</NAME>
<RETURNS>int  </RETURNS>
const gnutls_datum_t * cert 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_openpgp_get_key</NAME>
<RETURNS>int  </RETURNS>
gnutls_datum_t * key, gnutls_openpgp_keyring_t keyring, key_attr_t by, uint8_t * pattern 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha1_oneshot</NAME>
<RETURNS>void  </RETURNS>
void *ctx, const void *inp, size_t len 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha256_oneshot</NAME>
<RETURNS>void  </RETURNS>
void *ctx, const void *inp, size_t len 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha1_blocks</NAME>
<RETURNS>void  </RETURNS>
unsigned int *ctx,const void *inp,size_t blocks 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha256_blocks</NAME>
<RETURNS>void  </RETURNS>
unsigned int *ctx,const void *inp,size_t blocks 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha512_blocks</NAME>
<RETURNS>void  </RETURNS>
unsigned int *ctx,const void *inp,size_t blocks 
</FUNCTION>
<FUNCTION>
<NAME>wrap_padlock_hash_fast</NAME>
<RETURNS>int  </RETURNS>
gnutls_digest_algorithm_t algo, const void* text, size_t text_size, void* digest 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha1_update</NAME>
<RETURNS>void  </RETURNS>
struct sha1_ctx *ctx, unsigned length, const uint8_t *data 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha256_update</NAME>
<RETURNS>void  </RETURNS>
struct sha256_ctx *ctx, unsigned length, const uint8_t *data 
</FUNCTION>
<FUNCTION>
<NAME>padlock_sha512_update</NAME>
<RETURNS>void  </RETURNS>
struct sha512_ctx *ctx, unsigned length, const uint8_t *data 
</FUNCTION>
<VARIABLE>
<NAME>aes_gcm_padlock_struct</NAME>
extern const gnutls_crypto_cipher_st aes_gcm_padlock_struct;
</VARIABLE>
<VARIABLE>
<NAME>hmac_sha_padlock_struct</NAME>
extern const gnutls_crypto_mac_st hmac_sha_padlock_struct;
</VARIABLE>
<VARIABLE>
<NAME>sha_padlock_struct</NAME>
extern const gnutls_crypto_digest_st sha_padlock_struct;
</VARIABLE>
<VARIABLE>
<NAME>hmac_sha_padlock_nano_struct</NAME>
extern const gnutls_crypto_mac_st hmac_sha_padlock_nano_struct;
</VARIABLE>
<VARIABLE>
<NAME>sha_padlock_nano_struct</NAME>
extern const gnutls_crypto_digest_st sha_padlock_nano_struct;
</VARIABLE>
<FUNCTION>
<NAME>padlock_aes_cipher_setkey</NAME>
<RETURNS>int  </RETURNS>
void *_ctx, const void *userkey, size_t keysize 
</FUNCTION>
<FUNCTION>
<NAME>padlock_capability</NAME>
<RETURNS>unsigned int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>padlock_reload_key</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>padlock_ecb_encrypt</NAME>
<RETURNS>int  </RETURNS>
void *out, const void *inp, struct padlock_cipher_data *ctx, size_t len 
</FUNCTION>
<FUNCTION>
<NAME>padlock_cbc_encrypt</NAME>
<RETURNS>int  </RETURNS>
void *out, const void *inp, struct padlock_cipher_data *ctx, size_t len 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_cpuid</NAME>
<RETURNS>void  </RETURNS>
unsigned int func, unsigned int *ax, unsigned int *bx, unsigned int *cx, unsigned int* dx 
</FUNCTION>
<FUNCTION>
<NAME>gnutls_have_cpuid</NAME>
<RETURNS>unsigned int  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>register_x86_crypto</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<FUNCTION>
<NAME>register_padlock_crypto</NAME>
<RETURNS>void  </RETURNS>
void 
</FUNCTION>
<MACRO>
<NAME>ALIGN16</NAME>
#define ALIGN16(x) \
        ((void *)(((ptrdiff_t)(x)+(ptrdiff_t)0x0f)&~((ptrdiff_t)0x0f)))
</MACRO>
<MACRO>
<NAME>AES_KEY_ALIGN_SIZE</NAME>
#define AES_KEY_ALIGN_SIZE 4
</MACRO>
<MACRO>
<NAME>AES_MAXNR</NAME>
#define AES_MAXNR 14
</MACRO>
<FUNCTION>
<NAME>aesni_ecb_encrypt</NAME>
<RETURNS>void  </RETURNS>
const unsigned char *in, unsigned char *out, size_t len, const AES_KEY * key, int enc 
</FUNCTION>
<FUNCTION>
<NAME>aesni_cbc_encrypt</NAME>
<RETURNS>void  </RETURNS>
const unsigned char *in, unsigned char *out, size_t len, const AES_KEY * key, unsigned char *ivec, const int enc 
</FUNCTION>
<FUNCTION>
<NAME>aesni_set_decrypt_key</NAME>
<RETURNS>int  </RETURNS>
const unsigned char *userKey, const int bits, AES_KEY * key 
</FUNCTION>
<FUNCTION>
<NAME>aesni_set_encrypt_key</NAME>
<RETURNS>int  </RETURNS>
const unsigned char *userKey, const int bits, AES_KEY * key 
</FUNCTION>
<FUNCTION>
<NAME>aesni_ctr32_encrypt_blocks</NAME>
<RETURNS>void  </RETURNS>
const unsigned char *in, unsigned char *out, size_t blocks, const void *key, const unsigned char *ivec 
</FUNCTION>
<VARIABLE>
<NAME>aes_gcm_struct</NAME>
extern const gnutls_crypto_cipher_st aes_gcm_struct;
</VARIABLE>
<STRUCT>
<NAME>certs_st</NAME>
typedef struct {
  gnutls_pcert_st * cert_list; /* a certificate chain */
  unsigned int cert_list_length; /* its length */
  gnutls_str_array_t names; /* the names in the first certificate */
} certs_st;
</STRUCT>
<TYPEDEF>
<NAME>cert_auth_info_st</NAME>
typedef struct cert_auth_info_st cert_auth_info_st;
</TYPEDEF>
<FUNCTION>
<NAME>certificate_credential_append_crt_list</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_str_array_t names, gnutls_pcert_st* crt, int nr 
</FUNCTION>
<FUNCTION>
<NAME>certificate_credentials_append_pkey</NAME>
<RETURNS>int  </RETURNS>
gnutls_certificate_credentials_t res, gnutls_privkey_t pkey 
</FUNCTION>
<TYPEDEF>
<NAME>psk_auth_info_st</NAME>
typedef struct psk_auth_info_st psk_auth_info_st;
</TYPEDEF>
<TYPEDEF>
<NAME>srp_server_auth_info_st</NAME>
typedef struct srp_server_auth_info_st srp_server_auth_info_st;
</TYPEDEF>
<TYPEDEF>
<NAME>anon_auth_info_st</NAME>
typedef struct anon_auth_info_st anon_auth_info_st;
</TYPEDEF>
