<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY version SYSTEM "version.xml">
]>
<refentry id="gnutls-opencdk">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-opencdk.top_of_page">opencdk</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  GNUTLS Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>opencdk</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-opencdk.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="CDK-KEY-USG-ENCR:CAPS">CDK_KEY_USG_ENCR</link>
#define             <link linkend="CDK-KEY-USG-SIGN:CAPS">CDK_KEY_USG_SIGN</link>
#define             <link linkend="MAX-CDK-DATA-PARTS:CAPS">MAX_CDK_DATA_PARTS</link>
#define             <link linkend="MAX-CDK-PK-PARTS:CAPS">MAX_CDK_PK_PARTS</link>
#define             <link linkend="OPENCDK-VERSION:CAPS">OPENCDK_VERSION</link>
#define             <link linkend="OPENCDK-VERSION-MAJOR:CAPS">OPENCDK_VERSION_MAJOR</link>
#define             <link linkend="OPENCDK-VERSION-MINOR:CAPS">OPENCDK_VERSION_MINOR</link>
#define             <link linkend="OPENCDK-VERSION-PATCH:CAPS">OPENCDK_VERSION_PATCH</link>
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-armor-encode-buffer">cdk_armor_encode_buffer</link>             (<parameter>const unsigned <link linkend="char"><type>char</type></link> *inbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outlen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *nwritten</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="cdk-check-version">cdk_check_version</link>                   (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);
struct              <link linkend="cdk-ctx-s">cdk_ctx_s</link>;
typedef             <link linkend="cdk-ctx-t">cdk_ctx_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-data-transform">cdk_data_transform</link>                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><type>enum cdk_crypto_mode_t</type> mode</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> locusr</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *inbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> insize</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **outbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outsize</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> modval</parameter>);
struct              <link linkend="cdk-desig-revoker-s">cdk_desig_revoker_s</link>;
typedef             <link linkend="cdk-desig-revoker-t">cdk_desig_revoker_t</link>;
enum                <link linkend="cdk-error-t">cdk_error_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-file-decrypt">cdk_file_decrypt</link>                    (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *output</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-file-encrypt">cdk_file_encrypt</link>                    (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *output</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-kbnode-commit">cdk_kbnode_commit</link>                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-kbnode-delete">cdk_kbnode_delete</link>                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);
<link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        <link linkend="cdk-kbnode-find">cdk_kbnode_find</link>                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
<link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        <link linkend="cdk-kbnode-find-next">cdk_kbnode_find_next</link>                (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
<link linkend="cdk-packet-t"><returnvalue>cdk_packet_t</returnvalue></link>        <link linkend="cdk-kbnode-find-packet">cdk_kbnode_find_packet</link>              (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
<link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        <link linkend="cdk-kbnode-find-prev">cdk_kbnode_find_prev</link>                (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
<link linkend="cdk-packet-t"><returnvalue>cdk_packet_t</returnvalue></link>        <link linkend="cdk-kbnode-get-packet">cdk_kbnode_get_packet</link>               (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-kbnode-hash">cdk_kbnode_hash</link>                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="digest-hd-st"><type>digest_hd_st</type></link> *md</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> is_v4</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-kbnode-insert">cdk_kbnode_insert</link>                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-kbnode-move">cdk_kbnode_move</link>                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> where</parameter>);
<link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        <link linkend="cdk-kbnode-new">cdk_kbnode_new</link>                      (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-kbnode-read-from-mem">cdk_kbnode_read_from_mem</link>            (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_node</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> armor</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-kbnode-release">cdk_kbnode_release</link>                  (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-kbnode-remove">cdk_kbnode_remove</link>                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);
struct              <link linkend="cdk-kbnode-s">cdk_kbnode_s</link>;
typedef             <link linkend="cdk-kbnode-t">cdk_kbnode_t</link>;
<link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        <link linkend="cdk-kbnode-walk">cdk_kbnode_walk</link>                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> all</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-kbnode-write-to-mem">cdk_kbnode_write_to_mem</link>             (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbytes</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-kbnode-write-to-mem-alloc">cdk_kbnode_write_to_mem_alloc</link>       (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **r_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_buflen</parameter>);
const unsigned <link linkend="char"><returnvalue>char</returnvalue></link> * <link linkend="cdk-key-desig-revoker-walk">cdk_key_desig_revoker_walk</link>        (<parameter><link linkend="cdk-desig-revoker-t"><type>cdk_desig_revoker_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-desig-revoker-t"><type>cdk_desig_revoker_t</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_class</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_algid</parameter>);
enum                <link linkend="cdk-key-flags-t">cdk_key_flags_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-check-sk">cdk_keydb_check_sk</link>                  (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-export">cdk_keydb_export</link>                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-keydb-free">cdk_keydb_free</link>                      (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-byfpr">cdk_keydb_get_byfpr</link>                 (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-bykeyid">cdk_keydb_get_bykeyid</link>               (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-bypattern">cdk_keydb_get_bypattern</link>             (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *patt</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-keyblock">cdk_keydb_get_keyblock</link>              (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-pk">cdk_keydb_get_pk</link>                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> khd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> *ret_pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-get-sk">cdk_keydb_get_sk</link>                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> khd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> *ret_sk</parameter>);
struct              <link linkend="cdk-keydb-hd-s">cdk_keydb_hd_s</link>;
typedef             <link linkend="cdk-keydb-hd-t">cdk_keydb_hd_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-idx-rebuild">cdk_keydb_idx_rebuild</link>               (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> dbs</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-import">cdk_keydb_import</link>                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-new-from-mem">cdk_keydb_new_from_mem</link>              (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> *r_hd</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> secret</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> armor</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datlen</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-search">cdk_keydb_search</link>                    (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> st</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-keydb-search-release">cdk_keydb_search_release</link>            (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> st</parameter>);
struct              <link linkend="cdk-keydb-search-s">cdk_keydb_search_s</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-keydb-search-start">cdk_keydb_search_start</link>              (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> *st</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *desc</parameter>);
typedef             <link linkend="cdk-keydb-search-t">cdk_keydb_search_t</link>;
struct              <link linkend="cdk-keygen-ctx-s">cdk_keygen_ctx_s</link>;
typedef             <link linkend="cdk-keygen-ctx-t">cdk_keygen_ctx_t</link>;
struct              <link linkend="cdk-keylist-s">cdk_keylist_s</link>;
typedef             <link linkend="cdk-keylist-t">cdk_keylist_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-listkey-close">cdk_listkey_close</link>                   (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> ctx</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-listkey-next">cdk_listkey_next</link>                    (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);
struct              <link linkend="cdk-listkey-s">cdk_listkey_s</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-listkey-start">cdk_listkey_start</link>                   (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> *r_ctx</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *patt</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> fpatt</parameter>);
typedef             <link linkend="cdk-listkey-t">cdk_listkey_t</link>;
enum                <link linkend="cdk-lit-format-t">cdk_lit_format_t</link>;
typedef             <link linkend="cdk-mpi-t">cdk_mpi_t</link>;
typedef             <link linkend="cdk-packet-t">cdk_packet_t</link>;
enum                <link linkend="cdk-packet-type-t">cdk_packet_type_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-check-self-sig">cdk_pk_check_self_sig</link>               (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_status</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-check-sigs">cdk_pk_check_sigs</link>                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_status</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-decrypt">cdk_pk_decrypt</link>                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-pubkey-enc-t"><type>cdk_pkt_pubkey_enc_t</type></link> pke</parameter>,
                                                         <parameter><link linkend="bigint-t"><type>bigint_t</type></link> *r_sk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-encrypt">cdk_pk_encrypt</link>                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-pubkey-enc-t"><type>cdk_pkt_pubkey_enc_t</type></link> pke</parameter>,
                                                         <parameter><link linkend="bigint-t"><type>bigint_t</type></link> sk</parameter>);
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="cdk-pk-fingerprint-get-keyid">cdk_pk_fingerprint_get_keyid</link>        (<parameter>const unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fprlen</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-from-secret-key">cdk_pk_from_secret_key</link>              (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> *ret_pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-get-fingerprint">cdk_pk_get_fingerprint</link>              (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>);
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="cdk-pk-get-keyid">cdk_pk_get_keyid</link>                    (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-get-mpi">cdk_pk_get_mpi</link>                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nwritten</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbits</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pk-get-nbits">cdk_pk_get_nbits</link>                    (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pk-get-nenc">cdk_pk_get_nenc</link>                     (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pk-get-npkey">cdk_pk_get_npkey</link>                    (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pk-get-nsig">cdk_pk_get_nsig</link>                     (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pk-get-nskey">cdk_pk_get_nskey</link>                    (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-pk-release">cdk_pk_release</link>                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-sign">cdk_pk_sign</link>                         (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *md</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-to-fingerprint">cdk_pk_to_fingerprint</link>               (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fprlen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nout</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pk-verify">cdk_pk_verify</link>                       (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *md</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pklist-build">cdk_pklist_build</link>                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> *ret_pkl</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> use</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-pklist-release">cdk_pklist_release</link>                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pklist-select-algo">cdk_pklist_select_algo</link>              (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> preftype</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-pklist-use-mdc">cdk_pklist_use_mdc</link>                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pkt-alloc">cdk_pkt_alloc</link>                       (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> *r_pkt</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);
typedef             <link linkend="cdk-pkt-compressed-t">cdk_pkt_compressed_t</link>;
typedef             <link linkend="cdk-pkt-encrypted-t">cdk_pkt_encrypted_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-pkt-free">cdk_pkt_free</link>                        (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);
typedef             <link linkend="cdk-pkt-literal-t">cdk_pkt_literal_t</link>;
typedef             <link linkend="cdk-pkt-mdc-t">cdk_pkt_mdc_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pkt-new">cdk_pkt_new</link>                         (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> *r_pkt</parameter>);
typedef             <link linkend="cdk-pkt-onepass-sig-t">cdk_pkt_onepass_sig_t</link>;
typedef             <link linkend="cdk-pkt-pubkey-enc-t">cdk_pkt_pubkey_enc_t</link>;
typedef             <link linkend="cdk-pkt-pubkey-t">cdk_pkt_pubkey_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pkt-read">cdk_pkt_read</link>                        (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-pkt-release">cdk_pkt_release</link>                     (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);
typedef             <link linkend="cdk-pkt-seckey-t">cdk_pkt_seckey_t</link>;
typedef             <link linkend="cdk-pkt-signature-t">cdk_pkt_signature_t</link>;
typedef             <link linkend="cdk-pkt-userid-t">cdk_pkt_userid_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pkt-write">cdk_pkt_write</link>                       (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>,
                                                         <parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);
struct              <link linkend="cdk-prefitem-s">cdk_prefitem_s</link>;
typedef             <link linkend="cdk-prefitem-t">cdk_prefitem_t</link>;
typedef             <link linkend="cdk-pubkey-t">cdk_pubkey_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-pubkey-to-sexp">cdk_pubkey_to_sexp</link>                  (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **sexp</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *len</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-s2k-free">cdk_s2k_free</link>                        (<parameter><link linkend="cdk-s2k-t"><type>cdk_s2k_t</type></link> s2k</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-s2k-new">cdk_s2k_new</link>                         (<parameter><link linkend="cdk-s2k-t"><type>cdk_s2k_t</type></link> *ret_s2k</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> digest_algo</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *salt</parameter>);
struct              <link linkend="cdk-s2k-s">cdk_s2k_s</link>;
typedef             <link linkend="cdk-s2k-t">cdk_s2k_t</link>;
typedef             <link linkend="cdk-seckey-t">cdk_seckey_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-seckey-to-sexp">cdk_seckey_to_sexp</link>                  (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **sexp</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *len</parameter>);
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="cdk-sig-get-keyid">cdk_sig_get_keyid</link>                   (<parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="cdk-sk-get-keyid">cdk_sk_get_keyid</link>                    (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-sk-get-mpi">cdk_sk_get_mpi</link>                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nwritten</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbits</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-sk-release">cdk_sk_release</link>                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-sklist-build">cdk_sklist_build</link>                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> *ret_skl</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> locusr</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> unlock</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> use</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-sklist-release">cdk_sklist_release</link>                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-sklist-write">cdk_sklist_write</link>                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> outp</parameter>,
                                                         <parameter><link linkend="digest-hd-st"><type>digest_hd_st</type></link> *mdctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigclass</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigver</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-sklist-write-onepass">cdk_sklist_write_onepass</link>            (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> outp</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigclass</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> mdalgo</parameter>);
typedef             <link linkend="cdk-stream-cbs-t">cdk_stream_cbs_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-close">cdk_stream_close</link>                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-create">cdk_stream_create</link>                   (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-decrypt">cdk_stream_decrypt</link>                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-enable-cache">cdk_stream_enable_cache</link>             (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> val</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-encrypt">cdk_stream_encrypt</link>                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-eof">cdk_stream_eof</link>                      (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-filter-disable">cdk_stream_filter_disable</link>           (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-flush">cdk_stream_flush</link>                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="off-t"><returnvalue>off_t</returnvalue></link>               <link linkend="cdk-stream-get-length">cdk_stream_get_length</link>               (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-getc">cdk_stream_getc</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-is-compressed">cdk_stream_is_compressed</link>            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-kick-off">cdk_stream_kick_off</link>                 (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-mmap">cdk_stream_mmap</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **ret_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *ret_buflen</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-mmap-part">cdk_stream_mmap_part</link>                (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> off</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **ret_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *ret_buflen</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-new">cdk_stream_new</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-new-from-cbs">cdk_stream_new_from_cbs</link>             (<parameter><link linkend="cdk-stream-cbs-t"><type>cdk_stream_cbs_t</type></link> cbs</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *opa</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-open">cdk_stream_open</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-peek">cdk_stream_peek</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-putc">cdk_stream_putc</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> c</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-read">cdk_stream_read</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);
struct              <link linkend="cdk-stream-s">cdk_stream_s</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-seek">cdk_stream_seek</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> offset</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-set-armor-flag">cdk_stream_set_armor_flag</link>           (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-set-compress-flag">cdk_stream_set_compress_flag</link>        (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> algo</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> level</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-set-hash-flag">cdk_stream_set_hash_flag</link>            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> algo</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-set-literal-flag">cdk_stream_set_literal_flag</link>         (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="cdk-lit-format-t"><type>cdk_lit_format_t</type></link> mode</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *fname</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-set-text-flag">cdk_stream_set_text_flag</link>            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *lf</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-sockopen">cdk_stream_sockopen</link>                 (<parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter><type>unsigned short </type> port</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_out</parameter>);
typedef             <link linkend="cdk-stream-t">cdk_stream_t</link>;
<link linkend="off-t"><returnvalue>off_t</returnvalue></link>               <link linkend="cdk-stream-tell">cdk_stream_tell</link>                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-tmp-from-mem">cdk_stream_tmp_from_mem</link>             (<parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *r_out</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-stream-tmp-new">cdk_stream_tmp_new</link>                  (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *r_out</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-stream-tmp-set-mode">cdk_stream_tmp_set_mode</link>             (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> val</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-stream-write">cdk_stream_write</link>                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);
<link linkend="cdk-strlist-t"><returnvalue>cdk_strlist_t</returnvalue></link>       <link linkend="cdk-strlist-add">cdk_strlist_add</link>                     (<parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *string</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-strlist-free">cdk_strlist_free</link>                    (<parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> sl</parameter>);
struct              <link linkend="cdk-strlist-s">cdk_strlist_s</link>;
typedef             <link linkend="cdk-strlist-t">cdk_strlist_t</link>;
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         <link linkend="cdk-subpkt-add">cdk_subpkt_add</link>                      (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> node</parameter>);
<link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        <link linkend="cdk-subpkt-find">cdk_subpkt_find</link>                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);
<link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        <link linkend="cdk-subpkt-find-next">cdk_subpkt_find_next</link>                (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> root</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);
<link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        <link linkend="cdk-subpkt-find-nth">cdk_subpkt_find_nth</link>                 (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> index</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-subpkt-free">cdk_subpkt_free</link>                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>);
const unsigned <link linkend="char"><returnvalue>char</returnvalue></link> * <link linkend="cdk-subpkt-get-data">cdk_subpkt_get_data</link>               (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_type</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbytes</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="cdk-subpkt-init">cdk_subpkt_init</link>                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> node</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);
<link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        <link linkend="cdk-subpkt-new">cdk_subpkt_new</link>                      (<parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);
struct              <link linkend="cdk-subpkt-s">cdk_subpkt_s</link>;
typedef             <link linkend="cdk-subpkt-t">cdk_subpkt_t</link>;
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="cdk-subpkt-type-count">cdk_subpkt_type_count</link>               (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-trustdb-get-ownertrust">cdk_trustdb_get_ownertrust</link>          (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_val</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_flags</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="cdk-trustdb-get-validity">cdk_trustdb_get_validity</link>            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-pkt-userid-t"><type>cdk_pkt_userid_t</type></link> id</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_val</parameter>);
<link linkend="char"><returnvalue>char</returnvalue></link> *              <link linkend="cdk-utf8-decode">cdk_utf8_decode</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> delim</parameter>);
<link linkend="char"><returnvalue>char</returnvalue></link> *              <link linkend="cdk-utf8-encode">cdk_utf8_encode</link>                     (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>);
#define             <link linkend="is-DSA">is_DSA</link>                              (a)
#define             <link linkend="is-ELG">is_ELG</link>                              (a)
#define             <link linkend="is-RSA">is_RSA</link>                              (a)
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         (<link linkend="open">*open</link>)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="read">*read</link>)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);
<link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         (<link linkend="release">*release</link>)                          (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="seek">*seek</link>)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> Param2</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="write">*write</link>)                            (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="gnutls-opencdk.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="gnutls-opencdk.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CDK-KEY-USG-ENCR:CAPS" role="macro">
<title>CDK_KEY_USG_ENCR</title>
<indexterm zone="CDK-KEY-USG-ENCR:CAPS"><primary>CDK_KEY_USG_ENCR</primary></indexterm>
<programlisting>#define CDK_KEY_USG_ENCR (CDK_KEY_USG_COMM_ENCR | CDK_KEY_USG_STORAGE_ENCR)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="CDK-KEY-USG-SIGN:CAPS" role="macro">
<title>CDK_KEY_USG_SIGN</title>
<indexterm zone="CDK-KEY-USG-SIGN:CAPS"><primary>CDK_KEY_USG_SIGN</primary></indexterm>
<programlisting>#define CDK_KEY_USG_SIGN (CDK_KEY_USG_DATA_SIGN | CDK_KEY_USG_CERT_SIGN)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="MAX-CDK-DATA-PARTS:CAPS" role="macro">
<title>MAX_CDK_DATA_PARTS</title>
<indexterm zone="MAX-CDK-DATA-PARTS:CAPS"><primary>MAX_CDK_DATA_PARTS</primary></indexterm>
<programlisting>#define MAX_CDK_DATA_PARTS 2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="MAX-CDK-PK-PARTS:CAPS" role="macro">
<title>MAX_CDK_PK_PARTS</title>
<indexterm zone="MAX-CDK-PK-PARTS:CAPS"><primary>MAX_CDK_PK_PARTS</primary></indexterm>
<programlisting>#define MAX_CDK_PK_PARTS 4
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENCDK-VERSION:CAPS" role="macro">
<title>OPENCDK_VERSION</title>
<indexterm zone="OPENCDK-VERSION:CAPS"><primary>OPENCDK_VERSION</primary></indexterm>
<programlisting>#define OPENCDK_VERSION "0.6.6"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENCDK-VERSION-MAJOR:CAPS" role="macro">
<title>OPENCDK_VERSION_MAJOR</title>
<indexterm zone="OPENCDK-VERSION-MAJOR:CAPS"><primary>OPENCDK_VERSION_MAJOR</primary></indexterm>
<programlisting>#define OPENCDK_VERSION_MAJOR 0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENCDK-VERSION-MINOR:CAPS" role="macro">
<title>OPENCDK_VERSION_MINOR</title>
<indexterm zone="OPENCDK-VERSION-MINOR:CAPS"><primary>OPENCDK_VERSION_MINOR</primary></indexterm>
<programlisting>#define OPENCDK_VERSION_MINOR 6
</programlisting>
<para>
</para></refsect2>
<refsect2 id="OPENCDK-VERSION-PATCH:CAPS" role="macro">
<title>OPENCDK_VERSION_PATCH</title>
<indexterm zone="OPENCDK-VERSION-PATCH:CAPS"><primary>OPENCDK_VERSION_PATCH</primary></indexterm>
<programlisting>#define OPENCDK_VERSION_PATCH 6
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-armor-encode-buffer" role="function">
<title>cdk_armor_encode_buffer ()</title>
<indexterm zone="cdk-armor-encode-buffer"><primary>cdk_armor_encode_buffer</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_armor_encode_buffer             (<parameter>const unsigned <link linkend="char"><type>char</type></link> *inbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> inlen</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *outbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outlen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *nwritten</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
Encode the given buffer into base64 format. The base64
string will be null terminated but the null will
not be contained in the size.
</para><variablelist role="params">
<varlistentry><term><parameter>inbuf</parameter>&#160;:</term>
<listitem><simpara>the raw input buffer</simpara></listitem></varlistentry>
<varlistentry><term><parameter>inlen</parameter>&#160;:</term>
<listitem><simpara>raw buffer len</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outbuf</parameter>&#160;:</term>
<listitem><simpara>the destination buffer for the base64 output</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outlen</parameter>&#160;:</term>
<listitem><simpara>destination buffer len</simpara></listitem></varlistentry>
<varlistentry><term><parameter>nwritten</parameter>&#160;:</term>
<listitem><simpara>actual length of the base64 data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the base64 file type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-check-version" role="function">
<title>cdk_check_version ()</title>
<indexterm zone="cdk-check-version"><primary>cdk_check_version</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        cdk_check_version                   (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-ctx-s" role="struct">
<title>struct cdk_ctx_s</title>
<indexterm zone="cdk-ctx-s"><primary>cdk_ctx_s</primary></indexterm>
<programlisting>struct cdk_ctx_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-ctx-t" role="typedef">
<title>cdk_ctx_t</title>
<indexterm zone="cdk-ctx-t"><primary>cdk_ctx_t</primary></indexterm>
<programlisting>  typedef struct cdk_ctx_s *cdk_ctx_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-data-transform" role="function">
<title>cdk_data_transform ()</title>
<indexterm zone="cdk-data-transform"><primary>cdk_data_transform</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_data_transform                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><type>enum cdk_crypto_mode_t</type> mode</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> locusr</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *inbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> insize</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **outbuf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *outsize</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> modval</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-desig-revoker-s" role="struct">
<title>struct cdk_desig_revoker_s</title>
<indexterm zone="cdk-desig-revoker-s"><primary>cdk_desig_revoker_s</primary></indexterm>
<programlisting>struct cdk_desig_revoker_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-desig-revoker-t" role="typedef">
<title>cdk_desig_revoker_t</title>
<indexterm zone="cdk-desig-revoker-t"><primary>cdk_desig_revoker_t</primary></indexterm>
<programlisting>  typedef struct cdk_desig_revoker_s *cdk_desig_revoker_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-error-t" role="enum">
<title>enum cdk_error_t</title>
<indexterm zone="cdk-error-t"><primary>cdk_error_t</primary></indexterm>
<programlisting>typedef enum {
    CDK_EOF = -1,
    CDK_Success = 0,
    CDK_General_Error = 1,
    CDK_File_Error = 2,
    CDK_Bad_Sig = 3,
    CDK_Inv_Packet = 4,
    CDK_Inv_Algo = 5,
    CDK_Not_Implemented = 6,
    CDK_Armor_Error = 8,
    CDK_Armor_CRC_Error = 9,
    CDK_MPI_Error = 10,
    CDK_Inv_Value = 11,
    CDK_Error_No_Key = 12,
    CDK_Chksum_Error = 13,
    CDK_Time_Conflict = 14,
    CDK_Zlib_Error = 15,
    CDK_Weak_Key = 16,
    CDK_Out_Of_Core = 17,
    CDK_Wrong_Seckey = 18,
    CDK_Bad_MDC = 19,
    CDK_Inv_Mode = 20,
    CDK_Error_No_Keyring = 21,
    CDK_Wrong_Format = 22,
    CDK_Inv_Packet_Ver = 23,
    CDK_Too_Short = 24,
    CDK_Unusable_Key = 25,
    CDK_No_Data = 26,
    CDK_No_Passphrase = 27,
    CDK_Network_Error = 28
} cdk_error_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-file-decrypt" role="function">
<title>cdk_file_decrypt ()</title>
<indexterm zone="cdk-file-decrypt"><primary>cdk_file_decrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_file_decrypt                    (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *output</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-file-encrypt" role="function">
<title>cdk_file_encrypt ()</title>
<indexterm zone="cdk-file-encrypt"><primary>cdk_file_encrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_file_encrypt                    (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *output</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-kbnode-commit" role="function">
<title>cdk_kbnode_commit ()</title>
<indexterm zone="cdk-kbnode-commit"><primary>cdk_kbnode_commit</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_kbnode_commit                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>);</programlisting>
<para>
Commits changes made to the kblist at ROOT. Note that ROOT my change,
and it is therefore passed by reference.
The function has the effect of removing all nodes marked as deleted.
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the nodes</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>true if any node has been changed</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-delete" role="function">
<title>cdk_kbnode_delete ()</title>
<indexterm zone="cdk-kbnode-delete"><primary>cdk_kbnode_delete</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_kbnode_delete                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);</programlisting>
<para>
Marks the given node as deleted.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-find" role="function">
<title>cdk_kbnode_find ()</title>
<indexterm zone="cdk-kbnode-find"><primary>cdk_kbnode_find</primary></indexterm>
<programlisting><link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        cdk_kbnode_find                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Tries to find the next node with the packettype <parameter>pkttype</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-find-next" role="function">
<title>cdk_kbnode_find_next ()</title>
<indexterm zone="cdk-kbnode-find-next"><primary>cdk_kbnode_find_next</primary></indexterm>
<programlisting><link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        cdk_kbnode_find_next                (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Ditto, but find the next packet.  The behaviour is trivial if
<parameter>pkttype</parameter> is 0 but if it is specified, the next node with a packet
of this type is returned.  The function has some knowledge about
the valid ordering of packets: e.g. if the next signature packet
is requested, the function will not return one if it encounters
a user-id.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-find-packet" role="function">
<title>cdk_kbnode_find_packet ()</title>
<indexterm zone="cdk-kbnode-find-packet"><primary>cdk_kbnode_find_packet</primary></indexterm>
<programlisting><link linkend="cdk-packet-t"><returnvalue>cdk_packet_t</returnvalue></link>        cdk_kbnode_find_packet              (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Same as cdk_kbnode_find but it returns the packet instead of the node.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-find-prev" role="function">
<title>cdk_kbnode_find_prev ()</title>
<indexterm zone="cdk-kbnode-find-prev"><primary>cdk_kbnode_find_prev</primary></indexterm>
<programlisting><link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        cdk_kbnode_find_prev                (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Finds the previous node (if <parameter>pkttype</parameter> = 0) or the previous node
with pkttype <parameter>pkttype</parameter> in the list starting with <parameter>root</parameter> of <parameter>node</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the root key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-get-packet" role="function">
<title>cdk_kbnode_get_packet ()</title>
<indexterm zone="cdk-kbnode-get-packet"><primary>cdk_kbnode_get_packet</primary></indexterm>
<programlisting><link linkend="cdk-packet-t"><returnvalue>cdk_packet_t</returnvalue></link>        cdk_kbnode_get_packet               (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);</programlisting>
<para>
Get packet in node.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the packet which is stored inside the node in <parameter>node</parameter>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-hash" role="function">
<title>cdk_kbnode_hash ()</title>
<indexterm zone="cdk-kbnode-hash"><primary>cdk_kbnode_hash</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_kbnode_hash                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="digest-hd-st"><type>digest_hd_st</type></link> *md</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> is_v4</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
Hashes the key node contents. Two modes are supported. If the packet
type is used (!= 0) then the function searches the first node with
this type. Otherwise the node is seen as a single node and the type
is extracted from it.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_v4</parameter>&#160;:</term>
<listitem><simpara>OpenPGP signature (yes=1, no=0)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type to hash (if (0) use the packet type from the node)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>flags which depend on the operation</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-insert" role="function">
<title>cdk_kbnode_insert ()</title>
<indexterm zone="cdk-kbnode-insert"><primary>cdk_kbnode_insert</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_kbnode_insert                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Inserts <parameter>node</parameter> into the list after <parameter>root</parameter> but before a packet which is not of
type <parameter>pkttype</parameter> (only if <parameter>pkttype</parameter> != 0).
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the root key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to add</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-move" role="function">
<title>cdk_kbnode_move ()</title>
<indexterm zone="cdk-kbnode-move"><primary>cdk_kbnode_move</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_kbnode_move                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> where</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-kbnode-new" role="function">
<title>cdk_kbnode_new ()</title>
<indexterm zone="cdk-kbnode-new"><primary>cdk_kbnode_new</primary></indexterm>
<programlisting><link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        cdk_kbnode_new                      (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);</programlisting>
<para>
Allocates a new key node and adds a packet.
</para><variablelist role="params">
<varlistentry><term><parameter>pkt</parameter>&#160;:</term>
<listitem><simpara>the packet to add</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-read-from-mem" role="function">
<title>cdk_kbnode_read_from_mem ()</title>
<indexterm zone="cdk-kbnode-read-from-mem"><primary>cdk_kbnode_read_from_mem</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_kbnode_read_from_mem            (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_node</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> armor</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);</programlisting>
<para>
Tries to read a key node from the memory buffer <parameter>buf</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ret_node</parameter>&#160;:</term>
<listitem><simpara>the new key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>armor</parameter>&#160;:</term>
<listitem><simpara>whether base64 or not</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the buffer which stores the key sequence</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&#160;:</term>
<listitem><simpara>the length of the buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-release" role="function">
<title>cdk_kbnode_release ()</title>
<indexterm zone="cdk-kbnode-release"><primary>cdk_kbnode_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_kbnode_release                  (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);</programlisting>
<para>
Releases the memory of the node.
</para></refsect2>
<refsect2 id="cdk-kbnode-remove" role="function">
<title>cdk_kbnode_remove ()</title>
<indexterm zone="cdk-kbnode-remove"><primary>cdk_kbnode_remove</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_kbnode_remove                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>);</programlisting>
<para>
Removes a node from the root node.
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the root node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to delete</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-s" role="struct">
<title>struct cdk_kbnode_s</title>
<indexterm zone="cdk-kbnode-s"><primary>cdk_kbnode_s</primary></indexterm>
<programlisting>struct cdk_kbnode_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-kbnode-t" role="typedef">
<title>cdk_kbnode_t</title>
<indexterm zone="cdk-kbnode-t"><primary>cdk_kbnode_t</primary></indexterm>
<programlisting>  typedef struct cdk_kbnode_s *cdk_kbnode_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-kbnode-walk" role="function">
<title>cdk_kbnode_walk ()</title>
<indexterm zone="cdk-kbnode-walk"><primary>cdk_kbnode_walk</primary></indexterm>
<programlisting><link linkend="cdk-kbnode-t"><returnvalue>cdk_kbnode_t</returnvalue></link>        cdk_kbnode_walk                     (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> all</parameter>);</programlisting>
<para>
Walks through a list of kbnodes. This function returns
the next kbnode for each call; before using the function the first
time, the caller must set CONTEXT to NULL (This has simply the effect
to start with ROOT).
</para></refsect2>
<refsect2 id="cdk-kbnode-write-to-mem" role="function">
<title>cdk_kbnode_write_to_mem ()</title>
<indexterm zone="cdk-kbnode-write-to-mem"><primary>cdk_kbnode_write_to_mem</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_kbnode_write_to_mem             (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbytes</parameter>);</programlisting>
<para>
Tries to write the contents of the key node to the buffer <parameter>buf</parameter> and
return the length of it in <parameter>r_nbytes</parameter>. If buf is (0), only the
length of the node is calculated and returned in <parameter>r_nbytes</parameter>.
Whenever it is possible, the cdk_kbnode_write_to_mem_alloc should be used.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the buffer to store the node data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbytes</parameter>&#160;:</term>
<listitem><simpara>the new length of the buffer.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-kbnode-write-to-mem-alloc" role="function">
<title>cdk_kbnode_write_to_mem_alloc ()</title>
<indexterm zone="cdk-kbnode-write-to-mem-alloc"><primary>cdk_kbnode_write_to_mem_alloc</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_kbnode_write_to_mem_alloc       (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> node</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **r_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_buflen</parameter>);</programlisting>
<para>
The function acts similar to cdk_kbnode_write_to_mem but
it allocates the buffer to avoid the lengthy second run.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the key node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_buf</parameter>&#160;:</term>
<listitem><simpara>buffer to hold the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_buflen</parameter>&#160;:</term>
<listitem><simpara>buffer length of the allocated raw data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-key-desig-revoker-walk" role="function">
<title>cdk_key_desig_revoker_walk ()</title>
<indexterm zone="cdk-key-desig-revoker-walk"><primary>cdk_key_desig_revoker_walk</primary></indexterm>
<programlisting>const unsigned <link linkend="char"><returnvalue>char</returnvalue></link> * cdk_key_desig_revoker_walk        (<parameter><link linkend="cdk-desig-revoker-t"><type>cdk_desig_revoker_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-desig-revoker-t"><type>cdk_desig_revoker_t</type></link> *ctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_class</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_algid</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-key-flags-t" role="enum">
<title>enum cdk_key_flags_t</title>
<indexterm zone="cdk-key-flags-t"><primary>cdk_key_flags_t</primary></indexterm>
<programlisting>typedef enum {
    CDK_FLAG_KEY_REVOKED = 256,
    CDK_FLAG_KEY_EXPIRED = 512,
    CDK_FLAG_SIG_EXPIRED = 1024
} cdk_key_flags_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-check-sk" role="function">
<title>cdk_keydb_check_sk ()</title>
<indexterm zone="cdk-keydb-check-sk"><primary>cdk_keydb_check_sk</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_check_sk                  (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);</programlisting>
<para>
Check if a secret key with the given key ID is available
in the key database.
</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&#160;:</term>
<listitem><simpara>the key db handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>the 64-bit keyid</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-export" role="function">
<title>cdk_keydb_export ()</title>
<indexterm zone="cdk-keydb-export"><primary>cdk_keydb_export</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_export                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>);</programlisting>
<para>
Export a list of keys to the given output stream.
Use string list with names for pattering searching.
This procedure strips local signatures.
</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&#160;:</term>
<listitem><simpara>the keydb handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>the output stream</simpara></listitem></varlistentry>
<varlistentry><term><parameter>remusr</parameter>&#160;:</term>
<listitem><simpara>the list of key pattern to export</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-free" role="function">
<title>cdk_keydb_free ()</title>
<indexterm zone="cdk-keydb-free"><primary>cdk_keydb_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_keydb_free                      (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>);</programlisting>
<para>
Free the keydb object.
</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&#160;:</term>
<listitem><simpara>the keydb object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-get-byfpr" role="function">
<title>cdk_keydb_get_byfpr ()</title>
<indexterm zone="cdk-keydb-get-byfpr"><primary>cdk_keydb_get_byfpr</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_byfpr                 (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-get-bykeyid" role="function">
<title>cdk_keydb_get_bykeyid ()</title>
<indexterm zone="cdk-keydb-get-bykeyid"><primary>cdk_keydb_get_bykeyid</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_bykeyid               (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-get-bypattern" role="function">
<title>cdk_keydb_get_bypattern ()</title>
<indexterm zone="cdk-keydb-get-bypattern"><primary>cdk_keydb_get_bypattern</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_bypattern             (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *patt</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_pk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-get-keyblock" role="function">
<title>cdk_keydb_get_keyblock ()</title>
<indexterm zone="cdk-keydb-get-keyblock"><primary>cdk_keydb_get_keyblock</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_keyblock              (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-get-pk" role="function">
<title>cdk_keydb_get_pk ()</title>
<indexterm zone="cdk-keydb-get-pk"><primary>cdk_keydb_get_pk</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_pk                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> khd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> *ret_pk</parameter>);</programlisting>
<para>
Perform a key database search by keyid and return the raw public
key without any signatures or user id's.
</para><variablelist role="params">
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>keyid of the key</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-get-sk" role="function">
<title>cdk_keydb_get_sk ()</title>
<indexterm zone="cdk-keydb-get-sk"><primary>cdk_keydb_get_sk</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_get_sk                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> khd</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>,
                                                         <parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> *ret_sk</parameter>);</programlisting>
<para>
Perform a key database search by keyid and return
only the raw secret key without the additional nodes,
like the user id or the signatures.
</para><variablelist role="params">
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>the keyid of the key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_sk</parameter>&#160;:</term>
<listitem><simpara>the allocated secret key</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-hd-s" role="struct">
<title>struct cdk_keydb_hd_s</title>
<indexterm zone="cdk-keydb-hd-s"><primary>cdk_keydb_hd_s</primary></indexterm>
<programlisting>struct cdk_keydb_hd_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-hd-t" role="typedef">
<title>cdk_keydb_hd_t</title>
<indexterm zone="cdk-keydb-hd-t"><primary>cdk_keydb_hd_t</primary></indexterm>
<programlisting>  typedef struct cdk_keydb_hd_s *cdk_keydb_hd_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-idx-rebuild" role="function">
<title>cdk_keydb_idx_rebuild ()</title>
<indexterm zone="cdk-keydb-idx-rebuild"><primary>cdk_keydb_idx_rebuild</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_idx_rebuild               (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> dbs</parameter>);</programlisting>
<para>
Rebuild the key index files for the given key database.
</para></refsect2>
<refsect2 id="cdk-keydb-import" role="function">
<title>cdk_keydb_import ()</title>
<indexterm zone="cdk-keydb-import"><primary>cdk_keydb_import</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_import                    (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-new-from-mem" role="function">
<title>cdk_keydb_new_from_mem ()</title>
<indexterm zone="cdk-keydb-new-from-mem"><primary>cdk_keydb_new_from_mem</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_new_from_mem              (<parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> *r_hd</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> secret</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> armor</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> datlen</parameter>);</programlisting>
<para>
Create a new keyring db handle from the contents of a buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>r_hd</parameter>&#160;:</term>
<listitem><simpara>The keydb output handle.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secret</parameter>&#160;:</term>
<listitem><simpara>does the stream contain secret key data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>armor</parameter>&#160;:</term>
<listitem><simpara>the stream is base64</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>The raw key data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>datlen</parameter>&#160;:</term>
<listitem><simpara>The length of the raw data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-search" role="function">
<title>cdk_keydb_search ()</title>
<indexterm zone="cdk-keydb-search"><primary>cdk_keydb_search</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_search                    (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> st</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);</programlisting>
<para>
Search for a key in the given keyring. The search mode is handled
via <parameter>ks</parameter>. If the key was found, <parameter>ret_key</parameter> contains the key data.
</para><variablelist role="params">
<varlistentry><term><parameter>st</parameter>&#160;:</term>
<listitem><simpara>the search handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hd</parameter>&#160;:</term>
<listitem><simpara>the keydb object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_key</parameter>&#160;:</term>
<listitem><simpara>kbnode object to store the key</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-search-release" role="function">
<title>cdk_keydb_search_release ()</title>
<indexterm zone="cdk-keydb-search-release"><primary>cdk_keydb_search_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_keydb_search_release            (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> st</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-search-s" role="struct">
<title>struct cdk_keydb_search_s</title>
<indexterm zone="cdk-keydb-search-s"><primary>cdk_keydb_search_s</primary></indexterm>
<programlisting>struct cdk_keydb_search_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keydb-search-start" role="function">
<title>cdk_keydb_search_start ()</title>
<indexterm zone="cdk-keydb-search-start"><primary>cdk_keydb_search_start</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_keydb_search_start              (<parameter><link linkend="cdk-keydb-search-t"><type>cdk_keydb_search_t</type></link> *st</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *desc</parameter>);</programlisting>
<para>
Create a new keydb search object.
</para><variablelist role="params">
<varlistentry><term><parameter>st</parameter>&#160;:</term>
<listitem><simpara>search handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>key database handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>specifies the search type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&#160;:</term>
<listitem><simpara>description which depends on the type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-keydb-search-t" role="typedef">
<title>cdk_keydb_search_t</title>
<indexterm zone="cdk-keydb-search-t"><primary>cdk_keydb_search_t</primary></indexterm>
<programlisting>  typedef struct cdk_keydb_search_s *cdk_keydb_search_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keygen-ctx-s" role="struct">
<title>struct cdk_keygen_ctx_s</title>
<indexterm zone="cdk-keygen-ctx-s"><primary>cdk_keygen_ctx_s</primary></indexterm>
<programlisting>struct cdk_keygen_ctx_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keygen-ctx-t" role="typedef">
<title>cdk_keygen_ctx_t</title>
<indexterm zone="cdk-keygen-ctx-t"><primary>cdk_keygen_ctx_t</primary></indexterm>
<programlisting>  typedef struct cdk_keygen_ctx_s *cdk_keygen_ctx_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keylist-s" role="struct">
<title>struct cdk_keylist_s</title>
<indexterm zone="cdk-keylist-s"><primary>cdk_keylist_s</primary></indexterm>
<programlisting>struct cdk_keylist_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-keylist-t" role="typedef">
<title>cdk_keylist_t</title>
<indexterm zone="cdk-keylist-t"><primary>cdk_keylist_t</primary></indexterm>
<programlisting>  typedef struct cdk_keylist_s *cdk_keylist_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-listkey-close" role="function">
<title>cdk_listkey_close ()</title>
<indexterm zone="cdk-listkey-close"><primary>cdk_listkey_close</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_listkey_close                   (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> ctx</parameter>);</programlisting>
<para>
Free the list key context.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>the list key context</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-listkey-next" role="function">
<title>cdk_listkey_next ()</title>
<indexterm zone="cdk-listkey-next"><primary>cdk_listkey_next</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_listkey_next                    (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> *ret_key</parameter>);</programlisting>
<para>
Retrieve the next key from the pattern of the key list context.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>list key context</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-listkey-s" role="struct">
<title>struct cdk_listkey_s</title>
<indexterm zone="cdk-listkey-s"><primary>cdk_listkey_s</primary></indexterm>
<programlisting>struct cdk_listkey_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-listkey-start" role="function">
<title>cdk_listkey_start ()</title>
<indexterm zone="cdk-listkey-start"><primary>cdk_listkey_start</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_listkey_start                   (<parameter><link linkend="cdk-listkey-t"><type>cdk_listkey_t</type></link> *r_ctx</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *patt</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> fpatt</parameter>);</programlisting>
<para>
Prepare a key listing with the given parameters. Two modes are supported.
The first mode uses string pattern to determine if the key should be
returned or not. The other mode uses a string list to request the key
which should be listed.
</para><variablelist role="params">
<varlistentry><term><parameter>r_ctx</parameter>&#160;:</term>
<listitem><simpara>pointer to store the new context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>db</parameter>&#160;:</term>
<listitem><simpara>the key database handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>patt</parameter>&#160;:</term>
<listitem><simpara>string pattern</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpatt</parameter>&#160;:</term>
<listitem><simpara>recipients from a stringlist to show</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-listkey-t" role="typedef">
<title>cdk_listkey_t</title>
<indexterm zone="cdk-listkey-t"><primary>cdk_listkey_t</primary></indexterm>
<programlisting>  typedef struct cdk_listkey_s *cdk_listkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-lit-format-t" role="enum">
<title>enum cdk_lit_format_t</title>
<indexterm zone="cdk-lit-format-t"><primary>cdk_lit_format_t</primary></indexterm>
<programlisting>typedef enum {
    CDK_LITFMT_BINARY = 0,
    CDK_LITFMT_TEXT = 1,
    CDK_LITFMT_UNICODE = 2
} cdk_lit_format_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-mpi-t" role="typedef">
<title>cdk_mpi_t</title>
<indexterm zone="cdk-mpi-t"><primary>cdk_mpi_t</primary></indexterm>
<programlisting>  typedef bigint_t cdk_mpi_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-packet-t" role="typedef">
<title>cdk_packet_t</title>
<indexterm zone="cdk-packet-t"><primary>cdk_packet_t</primary></indexterm>
<programlisting>  typedef struct cdk_packet_s *cdk_packet_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-packet-type-t" role="enum">
<title>enum cdk_packet_type_t</title>
<indexterm zone="cdk-packet-type-t"><primary>cdk_packet_type_t</primary></indexterm>
<programlisting>typedef enum {
    CDK_PKT_RESERVED = 0,
    CDK_PKT_PUBKEY_ENC = 1,
    CDK_PKT_SIGNATURE = 2,
    CDK_PKT_ONEPASS_SIG = 4,
    CDK_PKT_SECRET_KEY = 5,
    CDK_PKT_PUBLIC_KEY = 6,
    CDK_PKT_SECRET_SUBKEY = 7,
    CDK_PKT_COMPRESSED = 8,
    CDK_PKT_MARKER = 10,
    CDK_PKT_LITERAL = 11,
    CDK_PKT_RING_TRUST = 12,
    CDK_PKT_USER_ID = 13,
    CDK_PKT_PUBLIC_SUBKEY = 14,
    CDK_PKT_OLD_COMMENT = 16,
    CDK_PKT_ATTRIBUTE = 17,
    CDK_PKT_MDC = 19
} cdk_packet_type_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-check-self-sig" role="function">
<title>cdk_pk_check_self_sig ()</title>
<indexterm zone="cdk-pk-check-self-sig"><primary>cdk_pk_check_self_sig</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_check_self_sig               (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_status</parameter>);</programlisting>
<para>
A convenient function to make sure the key is valid.
Valid means the self signature is ok.
</para><variablelist role="params">
<varlistentry><term><parameter>r_status</parameter>&#160;:</term>
<listitem><simpara>output the status of the key.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-check-sigs" role="function">
<title>cdk_pk_check_sigs ()</title>
<indexterm zone="cdk-pk-check-sigs"><primary>cdk_pk_check_sigs</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_check_sigs                   (<parameter><link linkend="cdk-kbnode-t"><type>cdk_kbnode_t</type></link> knode</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_status</parameter>);</programlisting>
<para>
Check all signatures. When no key is available for checking, the
sigstat is marked as 'NOKEY'. The <parameter>r_status</parameter> contains the key flags
which are or-ed or (0) when there are no flags.
</para><variablelist role="params">
<varlistentry><term><parameter>hd</parameter>&#160;:</term>
<listitem><simpara>an optinal key database handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_status</parameter>&#160;:</term>
<listitem><simpara>variable to store the status of the key</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-decrypt" role="function">
<title>cdk_pk_decrypt ()</title>
<indexterm zone="cdk-pk-decrypt"><primary>cdk_pk_decrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_decrypt                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-pubkey-enc-t"><type>cdk_pkt_pubkey_enc_t</type></link> pke</parameter>,
                                                         <parameter><link linkend="bigint-t"><type>bigint_t</type></link> *r_sk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-encrypt" role="function">
<title>cdk_pk_encrypt ()</title>
<indexterm zone="cdk-pk-encrypt"><primary>cdk_pk_encrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_encrypt                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-pubkey-enc-t"><type>cdk_pkt_pubkey_enc_t</type></link> pke</parameter>,
                                                         <parameter><link linkend="bigint-t"><type>bigint_t</type></link> sk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-fingerprint-get-keyid" role="function">
<title>cdk_pk_fingerprint_get_keyid ()</title>
<indexterm zone="cdk-pk-fingerprint-get-keyid"><primary>cdk_pk_fingerprint_get_keyid</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        cdk_pk_fingerprint_get_keyid        (<parameter>const unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fprlen</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);</programlisting>
<para>
Derive the key ID from the key fingerprint.
For version 3 keys, this is not working.
</para><variablelist role="params">
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara>the key fingerprint</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fprlen</parameter>&#160;:</term>
<listitem><simpara>the length of the fingerprint</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-from-secret-key" role="function">
<title>cdk_pk_from_secret_key ()</title>
<indexterm zone="cdk-pk-from-secret-key"><primary>cdk_pk_from_secret_key</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_from_secret_key              (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> *ret_pk</parameter>);</programlisting>
<para>
Create a new public key from a secret key.
</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&#160;:</term>
<listitem><simpara>the secret key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_pk</parameter>&#160;:</term>
<listitem><simpara>the new public key</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-fingerprint" role="function">
<title>cdk_pk_get_fingerprint ()</title>
<indexterm zone="cdk-pk-get-fingerprint"><primary>cdk_pk_get_fingerprint</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_get_fingerprint              (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>);</programlisting>
<para>
Return the fingerprint of the given public key.
The buffer must be at least 20 octets.
This function should be considered deprecated and
the new <link linkend="cdk-pk-to-fingerprint"><function>cdk_pk_to_fingerprint()</function></link> should be used whenever
possible to avoid overflows.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>the public key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara>the buffer to hold the fingerprint</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-keyid" role="function">
<title>cdk_pk_get_keyid ()</title>
<indexterm zone="cdk-pk-get-keyid"><primary>cdk_pk_get_keyid</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        cdk_pk_get_keyid                    (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);</programlisting>
<para>
Calculate the key ID of the given public key.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>the public key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>buffer to store the key ID</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-mpi" role="function">
<title>cdk_pk_get_mpi ()</title>
<indexterm zone="cdk-pk-get-mpi"><primary>cdk_pk_get_mpi</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_get_mpi                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nwritten</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbits</parameter>);</programlisting>
<para>
Return the MPI with the given index of the public key.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>public key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara>index of the MPI to retrieve</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>buffer to hold the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nwritten</parameter>&#160;:</term>
<listitem><simpara>output how large the raw data is</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbits</parameter>&#160;:</term>
<listitem><simpara>size of the MPI in bits.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-nbits" role="function">
<title>cdk_pk_get_nbits ()</title>
<indexterm zone="cdk-pk-get-nbits"><primary>cdk_pk_get_nbits</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pk_get_nbits                    (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>);</programlisting>
<para>
Return the number of MPIs a signature consists of.
</para></refsect2>
<refsect2 id="cdk-pk-get-nenc" role="function">
<title>cdk_pk_get_nenc ()</title>
<indexterm zone="cdk-pk-get-nenc"><primary>cdk_pk_get_nenc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pk_get_nenc                     (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);</programlisting>
<para>
Return the number of MPI's the encrypted data consists of.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>the public key algorithm</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-npkey" role="function">
<title>cdk_pk_get_npkey ()</title>
<indexterm zone="cdk-pk-get-npkey"><primary>cdk_pk_get_npkey</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pk_get_npkey                    (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);</programlisting>
<para>
Return the number of multiprecison integer forming an public
key with the given algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>The public key algorithm.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-get-nsig" role="function">
<title>cdk_pk_get_nsig ()</title>
<indexterm zone="cdk-pk-get-nsig"><primary>cdk_pk_get_nsig</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pk_get_nsig                     (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-get-nskey" role="function">
<title>cdk_pk_get_nskey ()</title>
<indexterm zone="cdk-pk-get-nskey"><primary>cdk_pk_get_nskey</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pk_get_nskey                    (<parameter><link linkend="int"><type>int</type></link> algo</parameter>);</programlisting>
<para>
Return the number of multiprecision integers forming an
secret key with the given algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>the public key algorithm</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-release" role="function">
<title>cdk_pk_release ()</title>
<indexterm zone="cdk-pk-release"><primary>cdk_pk_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_pk_release                      (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-sign" role="function">
<title>cdk_pk_sign ()</title>
<indexterm zone="cdk-pk-sign"><primary>cdk_pk_sign</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_sign                         (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *md</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pk-to-fingerprint" role="function">
<title>cdk_pk_to_fingerprint ()</title>
<indexterm zone="cdk-pk-to-fingerprint"><primary>cdk_pk_to_fingerprint</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_to_fingerprint               (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fprlen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nout</parameter>);</programlisting>
<para>
Calculate a fingerprint of the given key and
return it in the given byte array.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>the public key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nout</parameter>&#160;:</term>
<listitem><simpara>actual length of the fingerprint.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pk-verify" role="function">
<title>cdk_pk_verify ()</title>
<indexterm zone="cdk-pk-verify"><primary>cdk_pk_verify</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pk_verify                       (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *md</parameter>);</programlisting>
<para>
Verify the signature in <parameter>sig</parameter> and compare it with the message digest in <parameter>md</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>the public key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sig</parameter>&#160;:</term>
<listitem><simpara>signature</simpara></listitem></varlistentry>
<varlistentry><term><parameter>md</parameter>&#160;:</term>
<listitem><simpara>the message digest</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pklist-build" role="function">
<title>cdk_pklist_build ()</title>
<indexterm zone="cdk-pklist-build"><primary>cdk_pklist_build</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pklist_build                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> *ret_pkl</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> use</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pklist-release" role="function">
<title>cdk_pklist_release ()</title>
<indexterm zone="cdk-pklist-release"><primary>cdk_pklist_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_pklist_release                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pklist-select-algo" role="function">
<title>cdk_pklist_select_algo ()</title>
<indexterm zone="cdk-pklist-select-algo"><primary>cdk_pklist_select_algo</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pklist_select_algo              (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> preftype</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pklist-use-mdc" role="function">
<title>cdk_pklist_use_mdc ()</title>
<indexterm zone="cdk-pklist-use-mdc"><primary>cdk_pklist_use_mdc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_pklist_use_mdc                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> pkl</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-alloc" role="function">
<title>cdk_pkt_alloc ()</title>
<indexterm zone="cdk-pkt-alloc"><primary>cdk_pkt_alloc</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pkt_alloc                       (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> *r_pkt</parameter>,
                                                         <parameter><link linkend="cdk-packet-type-t"><type>cdk_packet_type_t</type></link> pkttype</parameter>);</programlisting>
<para>
Allocate a new packet structure with the given packet type.
</para><variablelist role="params">
<varlistentry><term><parameter>r_pkt</parameter>&#160;:</term>
<listitem><simpara>output is the new packet</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkttype</parameter>&#160;:</term>
<listitem><simpara>the requested packet type</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pkt-compressed-t" role="typedef">
<title>cdk_pkt_compressed_t</title>
<indexterm zone="cdk-pkt-compressed-t"><primary>cdk_pkt_compressed_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_compressed_s *cdk_pkt_compressed_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-encrypted-t" role="typedef">
<title>cdk_pkt_encrypted_t</title>
<indexterm zone="cdk-pkt-encrypted-t"><primary>cdk_pkt_encrypted_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_encrypted_s *cdk_pkt_encrypted_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-free" role="function">
<title>cdk_pkt_free ()</title>
<indexterm zone="cdk-pkt-free"><primary>cdk_pkt_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_pkt_free                        (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-literal-t" role="typedef">
<title>cdk_pkt_literal_t</title>
<indexterm zone="cdk-pkt-literal-t"><primary>cdk_pkt_literal_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_literal_s *cdk_pkt_literal_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-mdc-t" role="typedef">
<title>cdk_pkt_mdc_t</title>
<indexterm zone="cdk-pkt-mdc-t"><primary>cdk_pkt_mdc_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_mdc_s *cdk_pkt_mdc_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-new" role="function">
<title>cdk_pkt_new ()</title>
<indexterm zone="cdk-pkt-new"><primary>cdk_pkt_new</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pkt_new                         (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> *r_pkt</parameter>);</programlisting>
<para>
Allocate a new packet.
</para><variablelist role="params">
<varlistentry><term><parameter>r_pkt</parameter>&#160;:</term>
<listitem><simpara>the new packet</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pkt-onepass-sig-t" role="typedef">
<title>cdk_pkt_onepass_sig_t</title>
<indexterm zone="cdk-pkt-onepass-sig-t"><primary>cdk_pkt_onepass_sig_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_onepass_sig_s *cdk_pkt_onepass_sig_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-pubkey-enc-t" role="typedef">
<title>cdk_pkt_pubkey_enc_t</title>
<indexterm zone="cdk-pkt-pubkey-enc-t"><primary>cdk_pkt_pubkey_enc_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_pubkey_enc_s *cdk_pkt_pubkey_enc_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-pubkey-t" role="typedef">
<title>cdk_pkt_pubkey_t</title>
<indexterm zone="cdk-pkt-pubkey-t"><primary>cdk_pkt_pubkey_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_pubkey_s *cdk_pkt_pubkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-read" role="function">
<title>cdk_pkt_read ()</title>
<indexterm zone="cdk-pkt-read"><primary>cdk_pkt_read</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pkt_read                        (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);</programlisting>
<para>
Parse the next packet on the <parameter>inp</parameter> stream and return its contents in <parameter>pkt</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&#160;:</term>
<listitem><simpara>the input stream</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkt</parameter>&#160;:</term>
<listitem><simpara>allocated packet handle to store the packet</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pkt-release" role="function">
<title>cdk_pkt_release ()</title>
<indexterm zone="cdk-pkt-release"><primary>cdk_pkt_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_pkt_release                     (<parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);</programlisting>
<para>
Free the contents of the given package and
release the memory of the structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pkt</parameter>&#160;:</term>
<listitem><simpara>the packet</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-pkt-seckey-t" role="typedef">
<title>cdk_pkt_seckey_t</title>
<indexterm zone="cdk-pkt-seckey-t"><primary>cdk_pkt_seckey_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_seckey_s *cdk_pkt_seckey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-signature-t" role="typedef">
<title>cdk_pkt_signature_t</title>
<indexterm zone="cdk-pkt-signature-t"><primary>cdk_pkt_signature_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_signature_s *cdk_pkt_signature_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-userid-t" role="typedef">
<title>cdk_pkt_userid_t</title>
<indexterm zone="cdk-pkt-userid-t"><primary>cdk_pkt_userid_t</primary></indexterm>
<programlisting>  typedef struct cdk_pkt_userid_s *cdk_pkt_userid_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pkt-write" role="function">
<title>cdk_pkt_write ()</title>
<indexterm zone="cdk-pkt-write"><primary>cdk_pkt_write</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pkt_write                       (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>,
                                                         <parameter><link linkend="cdk-packet-t"><type>cdk_packet_t</type></link> pkt</parameter>);</programlisting>
<para>
Write the contents of <parameter>pkt</parameter> into the <parameter>out</parameter> stream.
Return 0 on success.
</para><variablelist role="params">
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>the output stream handle</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkt</parameter>&#160;:</term>
<listitem><simpara>the packet itself</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-prefitem-s" role="struct">
<title>struct cdk_prefitem_s</title>
<indexterm zone="cdk-prefitem-s"><primary>cdk_prefitem_s</primary></indexterm>
<programlisting>struct cdk_prefitem_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-prefitem-t" role="typedef">
<title>cdk_prefitem_t</title>
<indexterm zone="cdk-prefitem-t"><primary>cdk_prefitem_t</primary></indexterm>
<programlisting>  typedef struct cdk_prefitem_s *cdk_prefitem_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pubkey-t" role="typedef">
<title>cdk_pubkey_t</title>
<indexterm zone="cdk-pubkey-t"><primary>cdk_pubkey_t</primary></indexterm>
<programlisting>  typedef cdk_pkt_pubkey_t cdk_pubkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-pubkey-to-sexp" role="function">
<title>cdk_pubkey_to_sexp ()</title>
<indexterm zone="cdk-pubkey-to-sexp"><primary>cdk_pubkey_to_sexp</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_pubkey_to_sexp                  (<parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **sexp</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *len</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-s2k-free" role="function">
<title>cdk_s2k_free ()</title>
<indexterm zone="cdk-s2k-free"><primary>cdk_s2k_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_s2k_free                        (<parameter><link linkend="cdk-s2k-t"><type>cdk_s2k_t</type></link> s2k</parameter>);</programlisting>
<para>
Release the given S2K object.
</para><variablelist role="params">
<varlistentry><term><parameter>s2k</parameter>&#160;:</term>
<listitem><simpara>the S2K object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-s2k-new" role="function">
<title>cdk_s2k_new ()</title>
<indexterm zone="cdk-s2k-new"><primary>cdk_s2k_new</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_s2k_new                         (<parameter><link linkend="cdk-s2k-t"><type>cdk_s2k_t</type></link> *ret_s2k</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> mode</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> digest_algo</parameter>,
                                                         <parameter>const unsigned <link linkend="char"><type>char</type></link> *salt</parameter>);</programlisting>
<para>
Create a new S2K object with the given parameter.
The <parameter>salt</parameter> parameter must be always 8 octets.
</para><variablelist role="params">
<varlistentry><term><parameter>ret_s2k</parameter>&#160;:</term>
<listitem><simpara>output for the new S2K object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the S2K mode (simple, salted, iter+salted)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>digest_algo</parameter>&#160;:</term>
<listitem><simpara>the hash algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>salt</parameter>&#160;:</term>
<listitem><simpara>random salt</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-s2k-s" role="struct">
<title>struct cdk_s2k_s</title>
<indexterm zone="cdk-s2k-s"><primary>cdk_s2k_s</primary></indexterm>
<programlisting>struct cdk_s2k_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-s2k-t" role="typedef">
<title>cdk_s2k_t</title>
<indexterm zone="cdk-s2k-t"><primary>cdk_s2k_t</primary></indexterm>
<programlisting>  typedef struct cdk_s2k_s *cdk_s2k_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-seckey-t" role="typedef">
<title>cdk_seckey_t</title>
<indexterm zone="cdk-seckey-t"><primary>cdk_seckey_t</primary></indexterm>
<programlisting>  typedef cdk_pkt_seckey_t cdk_seckey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-seckey-to-sexp" role="function">
<title>cdk_seckey_to_sexp ()</title>
<indexterm zone="cdk-seckey-to-sexp"><primary>cdk_seckey_to_sexp</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_seckey_to_sexp                  (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> **sexp</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *len</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-sig-get-keyid" role="function">
<title>cdk_sig_get_keyid ()</title>
<indexterm zone="cdk-sig-get-keyid"><primary>cdk_sig_get_keyid</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        cdk_sig_get_keyid                   (<parameter><link linkend="cdk-pkt-signature-t"><type>cdk_pkt_signature_t</type></link> sig</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);</programlisting>
<para>
Retrieve the key ID from the given signature.
</para><variablelist role="params">
<varlistentry><term><parameter>sig</parameter>&#160;:</term>
<listitem><simpara>the signature</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>buffer to hold the key ID</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-sk-get-keyid" role="function">
<title>cdk_sk_get_keyid ()</title>
<indexterm zone="cdk-sk-get-keyid"><primary>cdk_sk_get_keyid</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        cdk_sk_get_keyid                    (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *keyid</parameter>);</programlisting>
<para>
Calculate the key ID of the secret key, actually the public key.
</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&#160;:</term>
<listitem><simpara>the secret key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyid</parameter>&#160;:</term>
<listitem><simpara>buffer to hold the key ID</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-sk-get-mpi" role="function">
<title>cdk_sk_get_mpi ()</title>
<indexterm zone="cdk-sk-get-mpi"><primary>cdk_sk_get_mpi</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_sk_get_mpi                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nwritten</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbits</parameter>);</programlisting>
<para>
Return the MPI of the given secret key with the
index <parameter>idx</parameter>. It is important to check if the key
is protected and thus no real MPI data will be returned then.
</para><variablelist role="params">
<varlistentry><term><parameter>sk</parameter>&#160;:</term>
<listitem><simpara>secret key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara>index of the MPI to retrieve</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>buffer to hold the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nwritten</parameter>&#160;:</term>
<listitem><simpara>output length of the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbits</parameter>&#160;:</term>
<listitem><simpara>length of the MPI data in bits.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-sk-release" role="function">
<title>cdk_sk_release ()</title>
<indexterm zone="cdk-sk-release"><primary>cdk_sk_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_sk_release                      (<parameter><link linkend="cdk-seckey-t"><type>cdk_seckey_t</type></link> sk</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-sklist-build" role="function">
<title>cdk_sklist_build ()</title>
<indexterm zone="cdk-sklist-build"><primary>cdk_sklist_build</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_sklist_build                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> *ret_skl</parameter>,
                                                         <parameter><link linkend="cdk-keydb-hd-t"><type>cdk_keydb_hd_t</type></link> db</parameter>,
                                                         <parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> locusr</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> unlock</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> use</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-sklist-release" role="function">
<title>cdk_sklist_release ()</title>
<indexterm zone="cdk-sklist-release"><primary>cdk_sklist_release</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_sklist_release                  (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-sklist-write" role="function">
<title>cdk_sklist_write ()</title>
<indexterm zone="cdk-sklist-write"><primary>cdk_sklist_write</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_sklist_write                    (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> outp</parameter>,
                                                         <parameter><link linkend="digest-hd-st"><type>digest_hd_st</type></link> *mdctx</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigclass</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigver</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-sklist-write-onepass" role="function">
<title>cdk_sklist_write_onepass ()</title>
<indexterm zone="cdk-sklist-write-onepass"><primary>cdk_sklist_write_onepass</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_sklist_write_onepass            (<parameter><link linkend="cdk-keylist-t"><type>cdk_keylist_t</type></link> skl</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> outp</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> sigclass</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> mdalgo</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-cbs-t" role="typedef">
<title>cdk_stream_cbs_t</title>
<indexterm zone="cdk-stream-cbs-t"><primary>cdk_stream_cbs_t</primary></indexterm>
<programlisting>  typedef struct cdk_stream_cbs_s *cdk_stream_cbs_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-close" role="function">
<title>cdk_stream_close ()</title>
<indexterm zone="cdk-stream-close"><primary>cdk_stream_close</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_close                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
Close a stream and flush all buffers.  This function work different
for read or write streams. When the stream is for reading, the
filtering is already done and we can simply close the file and all
buffers.  But for the case it's a write stream, we need to apply
all registered filters now. The file is closed in the filter
function and not here.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-create" role="function">
<title>cdk_stream_create ()</title>
<indexterm zone="cdk-stream-create"><primary>cdk_stream_create</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_create                   (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);</programlisting>
<para>
Creates a new stream.
The difference to cdk_stream_new is, that no filtering can be used with
this kind of stream and everything is written directly to the stream.
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara>the filename</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&#160;:</term>
<listitem><simpara>the object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-decrypt" role="function">
<title>cdk_stream_decrypt ()</title>
<indexterm zone="cdk-stream-decrypt"><primary>cdk_stream_decrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_decrypt                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-enable-cache" role="function">
<title>cdk_stream_enable_cache ()</title>
<indexterm zone="cdk-stream-enable-cache"><primary>cdk_stream_enable_cache</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_enable_cache             (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> val</parameter>);</programlisting>
<para>
Enables or disable the cache section of a stream object.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara>1=on, 0=off</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-encrypt" role="function">
<title>cdk_stream_encrypt ()</title>
<indexterm zone="cdk-stream-encrypt"><primary>cdk_stream_encrypt</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_encrypt                  (<parameter><link linkend="cdk-ctx-t"><type>cdk_ctx_t</type></link> hd</parameter>,
                                                         <parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> remusr</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-eof" role="function">
<title>cdk_stream_eof ()</title>
<indexterm zone="cdk-stream-eof"><primary>cdk_stream_eof</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_eof                      (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
Return if the associated file handle was set to EOF.  This
 function will only work with read streams.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-filter-disable" role="function">
<title>cdk_stream_filter_disable ()</title>
<indexterm zone="cdk-stream-filter-disable"><primary>cdk_stream_filter_disable</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_filter_disable           (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
Disables the filter with the type 'type'.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>The numberic filter ID.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-flush" role="function">
<title>cdk_stream_flush ()</title>
<indexterm zone="cdk-stream-flush"><primary>cdk_stream_flush</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_flush                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-get-length" role="function">
<title>cdk_stream_get_length ()</title>
<indexterm zone="cdk-stream-get-length"><primary>cdk_stream_get_length</primary></indexterm>
<programlisting><link linkend="off-t"><returnvalue>off_t</returnvalue></link>               cdk_stream_get_length               (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
Return the length of the associated file handle.  This function
should work for both read and write streams. For write streams an
additional flush is used to write possible pending data.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-getc" role="function">
<title>cdk_stream_getc ()</title>
<indexterm zone="cdk-stream-getc"><primary>cdk_stream_getc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_getc                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-is-compressed" role="function">
<title>cdk_stream_is_compressed ()</title>
<indexterm zone="cdk-stream-is-compressed"><primary>cdk_stream_is_compressed</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_is_compressed            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
Check whether stream is compressed.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 if the stream is uncompressed, otherwise the compression
algorithm.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-kick-off" role="function">
<title>cdk_stream_kick_off ()</title>
<indexterm zone="cdk-stream-kick-off"><primary>cdk_stream_kick_off</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_kick_off                 (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> out</parameter>);</programlisting>
<para>
Passes the entire data from <parameter>inp</parameter> into the output stream <parameter>out</parameter>
with all the activated filters.
</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&#160;:</term>
<listitem><simpara>the input stream</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>the output stream.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-mmap" role="function">
<title>cdk_stream_mmap ()</title>
<indexterm zone="cdk-stream-mmap"><primary>cdk_stream_mmap</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_mmap                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **ret_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *ret_buflen</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-mmap-part" role="function">
<title>cdk_stream_mmap_part ()</title>
<indexterm zone="cdk-stream-mmap-part"><primary>cdk_stream_mmap_part</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_mmap_part                (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> off</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> len</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> **ret_buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *ret_buflen</parameter>);</programlisting>
<para>
Maps the data of the given stream into a memory section. <parameter>ret_count</parameter>
contains the length of the buffer.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream</simpara></listitem></varlistentry>
<varlistentry><term><parameter>off</parameter>&#160;:</term>
<listitem><simpara>the offset where to start</simpara></listitem></varlistentry>
<varlistentry><term><parameter>len</parameter>&#160;:</term>
<listitem><simpara>how much bytes shall be mapped</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buf</parameter>&#160;:</term>
<listitem><simpara>the buffer to store the content</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_buflen</parameter>&#160;:</term>
<listitem><simpara>length of the buffer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-new" role="function">
<title>cdk_stream_new ()</title>
<indexterm zone="cdk-stream-new"><primary>cdk_stream_new</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_new                      (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);</programlisting>
<para>
Create a new stream into the given file.
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara>The name of the new file</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&#160;:</term>
<listitem><simpara>The new STREAM object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-new-from-cbs" role="function">
<title>cdk_stream_new_from_cbs ()</title>
<indexterm zone="cdk-stream-new-from-cbs"><primary>cdk_stream_new_from_cbs</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_new_from_cbs             (<parameter><link linkend="cdk-stream-cbs-t"><type>cdk_stream_cbs_t</type></link> cbs</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *opa</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);</programlisting>
<para>
This function creates a stream which uses user callback
for the core operations (open, close, read, write, seek).
</para><variablelist role="params">
<varlistentry><term><parameter>cbs</parameter>&#160;:</term>
<listitem><simpara>the callback context with all user callback functions</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opa</parameter>&#160;:</term>
<listitem><simpara>uint8_t handle which is passed to all callbacks.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&#160;:</term>
<listitem><simpara>the allocated stream</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-open" role="function">
<title>cdk_stream_open ()</title>
<indexterm zone="cdk-stream-open"><primary>cdk_stream_open</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_open                     (<parameter>const <link linkend="char"><type>char</type></link> *file</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_s</parameter>);</programlisting>
<para>
Creates a new stream based on an existing file. The stream is
opened in read-only mode.
</para><variablelist role="params">
<varlistentry><term><parameter>file</parameter>&#160;:</term>
<listitem><simpara>The file to open</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_s</parameter>&#160;:</term>
<listitem><simpara>The new STREAM object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-peek" role="function">
<title>cdk_stream_peek ()</title>
<indexterm zone="cdk-stream-peek"><primary>cdk_stream_peek</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_peek                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);</programlisting>
<para>
The function acts like cdk_stream_read with the difference that
the file pointer is moved to the old position after the bytes were read.
</para><variablelist role="params">
<varlistentry><term><parameter>inp</parameter>&#160;:</term>
<listitem><simpara>the input stream handle</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-putc" role="function">
<title>cdk_stream_putc ()</title>
<indexterm zone="cdk-stream-putc"><primary>cdk_stream_putc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_putc                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> c</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-read" role="function">
<title>cdk_stream_read ()</title>
<indexterm zone="cdk-stream-read"><primary>cdk_stream_read</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_read                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>
Tries to read count bytes from the STREAM object.
When this function is called the first time, it can take a while
because all filters need to be processed. Please remember that you
need to add the filters in reserved order.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>The buffer to insert the readed bytes.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&#160;:</term>
<listitem><simpara>Request so much bytes.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-s" role="struct">
<title>struct cdk_stream_s</title>
<indexterm zone="cdk-stream-s"><primary>cdk_stream_s</primary></indexterm>
<programlisting>struct cdk_stream_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-seek" role="function">
<title>cdk_stream_seek ()</title>
<indexterm zone="cdk-stream-seek"><primary>cdk_stream_seek</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_seek                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> offset</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-set-armor-flag" role="function">
<title>cdk_stream_set_armor_flag ()</title>
<indexterm zone="cdk-stream-set-armor-flag"><primary>cdk_stream_set_armor_flag</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_set_armor_flag           (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
If the file is in read-mode, no armor type needs to be
defined (armor_type=0) because the armor filter will be
used for decoding existing armor data.
For the write mode, <parameter>armor_type</parameter> can be set to any valid
armor type (message, key, sig).
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type of armor to use</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-set-compress-flag" role="function">
<title>cdk_stream_set_compress_flag ()</title>
<indexterm zone="cdk-stream-set-compress-flag"><primary>cdk_stream_set_compress_flag</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_set_compress_flag        (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> algo</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> level</parameter>);</programlisting>
<para>
In read mode it kicks off the decompression filter to retrieve
the uncompressed data.
In write mode the stream data will be compressed with the
given algorithm at the given level.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>the compression algo</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>level of compression (0..9)</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-set-hash-flag" role="function">
<title>cdk_stream_set_hash_flag ()</title>
<indexterm zone="cdk-stream-set-hash-flag"><primary>cdk_stream_set_hash_flag</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_set_hash_flag            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> algo</parameter>);</programlisting>
<para>
This is for read-only streams. It pushes a digest filter to
calculate the digest of the given stream data.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-set-literal-flag" role="function">
<title>cdk_stream_set_literal_flag ()</title>
<indexterm zone="cdk-stream-set-literal-flag"><primary>cdk_stream_set_literal_flag</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_set_literal_flag         (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="cdk-lit-format-t"><type>cdk_lit_format_t</type></link> mode</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *fname</parameter>);</programlisting>
<para>
In read mode it kicks off the literal decoding routine to
unwrap the data from the packet. The <parameter>mode</parameter> parameter is ignored.
In write mode the function can be used to wrap the stream data
into a literal packet with the given mode and file name.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&#160;:</term>
<listitem><simpara>the mode to use (binary, text, unicode)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fname</parameter>&#160;:</term>
<listitem><simpara>the file name to store in the packet.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-set-text-flag" role="function">
<title>cdk_stream_set_text_flag ()</title>
<indexterm zone="cdk-stream-set-text-flag"><primary>cdk_stream_set_text_flag</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_set_text_flag            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *lf</parameter>);</programlisting>
<para>
Pushes the text filter to store the stream data in cannoncial format.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>the stream object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lf</parameter>&#160;:</term>
<listitem><simpara>line ending</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-sockopen" role="function">
<title>cdk_stream_sockopen ()</title>
<indexterm zone="cdk-stream-sockopen"><primary>cdk_stream_sockopen</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_sockopen                 (<parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter><type>unsigned short </type> port</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *ret_out</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-t" role="typedef">
<title>cdk_stream_t</title>
<indexterm zone="cdk-stream-t"><primary>cdk_stream_t</primary></indexterm>
<programlisting>  typedef struct cdk_stream_s *cdk_stream_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-tell" role="function">
<title>cdk_stream_tell ()</title>
<indexterm zone="cdk-stream-tell"><primary>cdk_stream_tell</primary></indexterm>
<programlisting><link linkend="off-t"><returnvalue>off_t</returnvalue></link>               cdk_stream_tell                     (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-tmp-from-mem" role="function">
<title>cdk_stream_tmp_from_mem ()</title>
<indexterm zone="cdk-stream-tmp-from-mem"><primary>cdk_stream_tmp_from_mem</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_tmp_from_mem             (<parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>,
                                                         <parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *r_out</parameter>);</programlisting>
<para>
Creates a new tempory stream with the given contests.
</para><variablelist role="params">
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the buffer which shall be written to the temp stream.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&#160;:</term>
<listitem><simpara>how large the buffer is</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_out</parameter>&#160;:</term>
<listitem><simpara>the new stream with the given contents.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-tmp-new" role="function">
<title>cdk_stream_tmp_new ()</title>
<indexterm zone="cdk-stream-tmp-new"><primary>cdk_stream_tmp_new</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_stream_tmp_new                  (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> *r_out</parameter>);</programlisting>
<para>
Allocates a new tempory stream which is not associated with a file.
</para><variablelist role="params">
<varlistentry><term><parameter>r_out</parameter>&#160;:</term>
<listitem><simpara>the new temp stream.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-stream-tmp-set-mode" role="function">
<title>cdk_stream_tmp_set_mode ()</title>
<indexterm zone="cdk-stream-tmp-set-mode"><primary>cdk_stream_tmp_set_mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_stream_tmp_set_mode             (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> val</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-stream-write" role="function">
<title>cdk_stream_write ()</title>
<indexterm zone="cdk-stream-write"><primary>cdk_stream_write</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_stream_write                    (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> s</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> count</parameter>);</programlisting>
<para>
Tries to write count bytes into the stream.
In this function we simply write the bytes to the stream. We can't
use the filters here because it would mean they have to support
partial flushing.
</para><variablelist role="params">
<varlistentry><term><parameter>s</parameter>&#160;:</term>
<listitem><simpara>The STREAM object</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>The buffer with the values to write.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>count</parameter>&#160;:</term>
<listitem><simpara>The size of the buffer.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-strlist-add" role="function">
<title>cdk_strlist_add ()</title>
<indexterm zone="cdk-strlist-add"><primary>cdk_strlist_add</primary></indexterm>
<programlisting><link linkend="cdk-strlist-t"><returnvalue>cdk_strlist_t</returnvalue></link>       cdk_strlist_add                     (<parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> *list</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *string</parameter>);</programlisting>
<para>
Add the given list to the string list.
</para><variablelist role="params">
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>destination string list</simpara></listitem></varlistentry>
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara>the string to add</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-strlist-free" role="function">
<title>cdk_strlist_free ()</title>
<indexterm zone="cdk-strlist-free"><primary>cdk_strlist_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_strlist_free                    (<parameter><link linkend="cdk-strlist-t"><type>cdk_strlist_t</type></link> sl</parameter>);</programlisting>
<para>
Release the string list object.
</para><variablelist role="params">
<varlistentry><term><parameter>sl</parameter>&#160;:</term>
<listitem><simpara>the string list</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-strlist-s" role="struct">
<title>struct cdk_strlist_s</title>
<indexterm zone="cdk-strlist-s"><primary>cdk_strlist_s</primary></indexterm>
<programlisting>struct cdk_strlist_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-strlist-t" role="typedef">
<title>cdk_strlist_t</title>
<indexterm zone="cdk-strlist-t"><primary>cdk_strlist_t</primary></indexterm>
<programlisting>  typedef struct cdk_strlist_s *cdk_strlist_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-subpkt-add" role="function">
<title>cdk_subpkt_add ()</title>
<indexterm zone="cdk-subpkt-add"><primary>cdk_subpkt_add</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         cdk_subpkt_add                      (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> root</parameter>,
                                                         <parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> node</parameter>);</programlisting>
<para>
Add the node in <parameter>node</parameter> to the root node <parameter>root</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the root node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the node to add</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-find" role="function">
<title>cdk_subpkt_find ()</title>
<indexterm zone="cdk-subpkt-find"><primary>cdk_subpkt_find</primary></indexterm>
<programlisting><link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        cdk_subpkt_find                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);</programlisting>
<para>
Find the given packet type in the node. If no packet with this
type was found, return null otherwise pointer to the node.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>the sub packet node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the packet type to find</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-find-next" role="function">
<title>cdk_subpkt_find_next ()</title>
<indexterm zone="cdk-subpkt-find-next"><primary>cdk_subpkt_find_next</primary></indexterm>
<programlisting><link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        cdk_subpkt_find_next                (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> root</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);</programlisting>
<para>
Try to find the next node after <parameter>root</parameter> with type.
If type is 0, the next node will be returned.
</para><variablelist role="params">
<varlistentry><term><parameter>root</parameter>&#160;:</term>
<listitem><simpara>the base where to begin the iteration</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>the type to find or 0 for the next node.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-find-nth" role="function">
<title>cdk_subpkt_find_nth ()</title>
<indexterm zone="cdk-subpkt-find-nth"><primary>cdk_subpkt_find_nth</primary></indexterm>
<programlisting><link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        cdk_subpkt_find_nth                 (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> index</parameter>);</programlisting>
<para>
Return the nth sub packet of the given type.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>The sub packet context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>The sub packet type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>index</parameter>&#160;:</term>
<listitem><simpara>The nth packet to retrieve, 0 means the first</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-free" role="function">
<title>cdk_subpkt_free ()</title>
<indexterm zone="cdk-subpkt-free"><primary>cdk_subpkt_free</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_subpkt_free                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>);</programlisting>
<para>
Release the context.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>the sub packet node to free</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-get-data" role="function">
<title>cdk_subpkt_get_data ()</title>
<indexterm zone="cdk-subpkt-get-data"><primary>cdk_subpkt_get_data</primary></indexterm>
<programlisting>const unsigned <link linkend="char"><returnvalue>char</returnvalue></link> * cdk_subpkt_get_data               (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_type</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *r_nbytes</parameter>);</programlisting>
<para>
Extract the data from the given sub packet. The type is returned
in <parameter>r_type</parameter> and the size in <parameter>r_nbytes</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>the sub packet node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_type</parameter>&#160;:</term>
<listitem><simpara>pointer store the packet type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>r_nbytes</parameter>&#160;:</term>
<listitem><simpara>pointer to store the packet size</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-init" role="function">
<title>cdk_subpkt_init ()</title>
<indexterm zone="cdk-subpkt-init"><primary>cdk_subpkt_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                cdk_subpkt_init                     (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> node</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> buflen</parameter>);</programlisting>
<para>
Set the packet data of the given root and set the type of it.
</para><variablelist role="params">
<varlistentry><term><parameter>node</parameter>&#160;:</term>
<listitem><simpara>the sub packet node</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>type of the packet which data should be initialized</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buf</parameter>&#160;:</term>
<listitem><simpara>the buffer with the actual data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buflen</parameter>&#160;:</term>
<listitem><simpara>the size of the data</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-new" role="function">
<title>cdk_subpkt_new ()</title>
<indexterm zone="cdk-subpkt-new"><primary>cdk_subpkt_new</primary></indexterm>
<programlisting><link linkend="cdk-subpkt-t"><returnvalue>cdk_subpkt_t</returnvalue></link>        cdk_subpkt_new                      (<parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);</programlisting>
<para>
Create a new sub packet node with the size of <parameter>size</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>the size of the new context</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-subpkt-s" role="struct">
<title>struct cdk_subpkt_s</title>
<indexterm zone="cdk-subpkt-s"><primary>cdk_subpkt_s</primary></indexterm>
<programlisting>struct cdk_subpkt_s;</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-subpkt-t" role="typedef">
<title>cdk_subpkt_t</title>
<indexterm zone="cdk-subpkt-t"><primary>cdk_subpkt_t</primary></indexterm>
<programlisting>  typedef struct cdk_subpkt_s *cdk_subpkt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-subpkt-type-count" role="function">
<title>cdk_subpkt_type_count ()</title>
<indexterm zone="cdk-subpkt-type-count"><primary>cdk_subpkt_type_count</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              cdk_subpkt_type_count               (<parameter><link linkend="cdk-subpkt-t"><type>cdk_subpkt_t</type></link> ctx</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> type</parameter>);</programlisting>
<para>
Return the amount of sub packets with this type.
</para><variablelist role="params">
<varlistentry><term><parameter>ctx</parameter>&#160;:</term>
<listitem><simpara>The sub packet context</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>The sub packet type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cdk-trustdb-get-ownertrust" role="function">
<title>cdk_trustdb_get_ownertrust ()</title>
<indexterm zone="cdk-trustdb-get-ownertrust"><primary>cdk_trustdb_get_ownertrust</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_trustdb_get_ownertrust          (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-pubkey-t"><type>cdk_pubkey_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_val</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_flags</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-trustdb-get-validity" role="function">
<title>cdk_trustdb_get_validity ()</title>
<indexterm zone="cdk-trustdb-get-validity"><primary>cdk_trustdb_get_validity</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 cdk_trustdb_get_validity            (<parameter><link linkend="cdk-stream-t"><type>cdk_stream_t</type></link> inp</parameter>,
                                                         <parameter><link linkend="cdk-pkt-userid-t"><type>cdk_pkt_userid_t</type></link> id</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *r_val</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-utf8-decode" role="function">
<title>cdk_utf8_decode ()</title>
<indexterm zone="cdk-utf8-decode"><primary>cdk_utf8_decode</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              cdk_utf8_decode                     (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> length</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> delim</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="cdk-utf8-encode" role="function">
<title>cdk_utf8_encode ()</title>
<indexterm zone="cdk-utf8-encode"><primary>cdk_utf8_encode</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              cdk_utf8_encode                     (<parameter>const <link linkend="char"><type>char</type></link> *string</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="is-DSA" role="macro">
<title>is_DSA()</title>
<indexterm zone="is-DSA"><primary>is_DSA</primary></indexterm>
<programlisting>#define is_DSA(a) ((a) == CDK_PK_DSA)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="is-ELG" role="macro">
<title>is_ELG()</title>
<indexterm zone="is-ELG"><primary>is_ELG</primary></indexterm>
<programlisting>#define is_ELG(a) ((a) == CDK_PK_ELG_E)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="is-RSA" role="macro">
<title>is_RSA()</title>
<indexterm zone="is-RSA"><primary>is_RSA</primary></indexterm>
<programlisting>#define             is_RSA(a)</programlisting>
<para>
</para></refsect2>
<refsect2 id="open" role="function">
<title>open ()</title>
<indexterm zone="open"><primary>open</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         (*open)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="read" role="function">
<title>read ()</title>
<indexterm zone="read"><primary>read</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*read)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="release" role="function">
<title>release ()</title>
<indexterm zone="release"><primary>release</primary></indexterm>
<programlisting><link linkend="cdk-error-t"><returnvalue>cdk_error_t</returnvalue></link>         (*release)                          (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="seek" role="function">
<title>seek ()</title>
<indexterm zone="seek"><primary>seek</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*seek)                             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="off-t"><type>off_t</type></link> Param2</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="write" role="function">
<title>write ()</title>
<indexterm zone="write"><primary>write</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*write)                            (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *buf</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);</programlisting>
<para>
</para></refsect2>

</refsect1>

</refentry>
