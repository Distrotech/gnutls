<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY version SYSTEM "version.xml">
]>
<refentry id="gnutls-gnutls">
<refmeta>
<refentrytitle role="top_of_page" id="gnutls-gnutls.top_of_page">gnutls</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  GNUTLS Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>gnutls</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="gnutls-gnutls.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="GNUTLS-CIPHER-ARCFOUR:CAPS">GNUTLS_CIPHER_ARCFOUR</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-128-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_128_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-256-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_256_CBC</link>
#define             <link linkend="GNUTLS-CIPHER-RIJNDAEL-CBC:CAPS">GNUTLS_CIPHER_RIJNDAEL_CBC</link>
#define             <link linkend="GNUTLS-CLIENT:CAPS">GNUTLS_CLIENT</link>
#define             <link linkend="GNUTLS-DATAGRAM:CAPS">GNUTLS_DATAGRAM</link>
#define             <link linkend="GNUTLS-DEFAULT-HANDSHAKE-TIMEOUT:CAPS">GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT</link>
#define             <link linkend="GNUTLS-DIG-SHA:CAPS">GNUTLS_DIG_SHA</link>
#define             <link linkend="GNUTLS-E-AGAIN:CAPS">GNUTLS_E_AGAIN</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MAX:CAPS">GNUTLS_E_APPLICATION_ERROR_MAX</link>
#define             <link linkend="GNUTLS-E-APPLICATION-ERROR-MIN:CAPS">GNUTLS_E_APPLICATION_ERROR_MIN</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-ERROR:CAPS">GNUTLS_E_ASN1_DER_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-DER-OVERFLOW:CAPS">GNUTLS_E_ASN1_DER_OVERFLOW</link>
#define             <link linkend="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND:CAPS">GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-GENERIC-ERROR:CAPS">GNUTLS_E_ASN1_GENERIC_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND:CAPS">GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-SYNTAX-ERROR:CAPS">GNUTLS_E_ASN1_SYNTAX_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-ERROR:CAPS">GNUTLS_E_ASN1_TAG_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-TAG-IMPLICIT:CAPS">GNUTLS_E_ASN1_TAG_IMPLICIT</link>
#define             <link linkend="GNUTLS-E-ASN1-TYPE-ANY-ERROR:CAPS">GNUTLS_E_ASN1_TYPE_ANY_ERROR</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-FOUND:CAPS">GNUTLS_E_ASN1_VALUE_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-ASN1-VALUE-NOT-VALID:CAPS">GNUTLS_E_ASN1_VALUE_NOT_VALID</link>
#define             <link linkend="GNUTLS-E-BAD-COOKIE:CAPS">GNUTLS_E_BAD_COOKIE</link>
#define             <link linkend="GNUTLS-E-BASE64-DECODING-ERROR:CAPS">GNUTLS_E_BASE64_DECODING_ERROR</link>
#define             <link linkend="GNUTLS-E-BASE64-ENCODING-ERROR:CAPS">GNUTLS_E_BASE64_ENCODING_ERROR</link>
#define             <link linkend="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR:CAPS">GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-ERROR:CAPS">GNUTLS_E_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS">GNUTLS_E_CERTIFICATE_KEY_MISMATCH</link>
#define             <link linkend="GNUTLS-E-CERTIFICATE-LIST-UNSORTED:CAPS">GNUTLS_E_CERTIFICATE_LIST_UNSORTED</link>
#define             <link linkend="GNUTLS-E-CHANNEL-BINDING-NOT-AVAILABLE:CAPS">GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE</link>
#define             <link linkend="GNUTLS-E-COMPRESSION-FAILED:CAPS">GNUTLS_E_COMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-CONSTRAINT-ERROR:CAPS">GNUTLS_E_CONSTRAINT_ERROR</link>
#define             <link linkend="GNUTLS-E-CRYPTODEV-DEVICE-ERROR:CAPS">GNUTLS_E_CRYPTODEV_DEVICE_ERROR</link>
#define             <link linkend="GNUTLS-E-CRYPTODEV-IOCTL-ERROR:CAPS">GNUTLS_E_CRYPTODEV_IOCTL_ERROR</link>
#define             <link linkend="GNUTLS-E-CRYPTO-ALREADY-REGISTERED:CAPS">GNUTLS_E_CRYPTO_ALREADY_REGISTERED</link>
#define             <link linkend="GNUTLS-E-CRYPTO-INIT-FAILED:CAPS">GNUTLS_E_CRYPTO_INIT_FAILED</link>
#define             <link linkend="GNUTLS-E-DB-ERROR:CAPS">GNUTLS_E_DB_ERROR</link>
#define             <link linkend="GNUTLS-E-DECOMPRESSION-FAILED:CAPS">GNUTLS_E_DECOMPRESSION_FAILED</link>
#define             <link linkend="GNUTLS-E-DECRYPTION-FAILED:CAPS">GNUTLS_E_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS">GNUTLS_E_DH_PRIME_UNACCEPTABLE</link>
#define             <link linkend="GNUTLS-E-ECC-NO-SUPPORTED-CURVES:CAPS">GNUTLS_E_ECC_NO_SUPPORTED_CURVES</link>
#define             <link linkend="GNUTLS-E-ECC-UNSUPPORTED-CURVE:CAPS">GNUTLS_E_ECC_UNSUPPORTED_CURVE</link>
#define             <link linkend="GNUTLS-E-ENCRYPTION-FAILED:CAPS">GNUTLS_E_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-ERROR-IN-FINISHED-PACKET:CAPS">GNUTLS_E_ERROR_IN_FINISHED_PACKET</link>
#define             <link linkend="GNUTLS-E-EXPIRED:CAPS">GNUTLS_E_EXPIRED</link>
#define             <link linkend="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS">GNUTLS_E_FATAL_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-FILE-ERROR:CAPS">GNUTLS_E_FILE_ERROR</link>
#define             <link linkend="GNUTLS-E-GOT-APPLICATION-DATA:CAPS">GNUTLS_E_GOT_APPLICATION_DATA</link>
#define             <link linkend="GNUTLS-E-HANDSHAKE-TOO-LARGE:CAPS">GNUTLS_E_HANDSHAKE_TOO_LARGE</link>
#define             <link linkend="GNUTLS-E-HASH-FAILED:CAPS">GNUTLS_E_HASH_FAILED</link>
#define             <link linkend="GNUTLS-E-HEARTBEAT-PING-RECEIVED:CAPS">GNUTLS_E_HEARTBEAT_PING_RECEIVED</link>
#define             <link linkend="GNUTLS-E-HEARTBEAT-PONG-RECEIVED:CAPS">GNUTLS_E_HEARTBEAT_PONG_RECEIVED</link>
#define             <link linkend="GNUTLS-E-IA-VERIFY-FAILED:CAPS">GNUTLS_E_IA_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-ILLEGAL-PARAMETER:CAPS">GNUTLS_E_ILLEGAL_PARAMETER</link>
#define             <link linkend="GNUTLS-E-ILLEGAL-SRP-USERNAME:CAPS">GNUTLS_E_ILLEGAL_SRP_USERNAME</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY:CAPS">GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</link>
#define             <link linkend="GNUTLS-E-INCOMPAT-DSA-KEY-WITH-TLS-PROTOCOL:CAPS">GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CRED:CAPS">GNUTLS_E_INSUFFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-INSUFFICIENT-CREDENTIALS:CAPS">GNUTLS_E_INSUFFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CRED:CAPS">GNUTLS_E_INSUFICIENT_CRED</link>
#define             <link linkend="GNUTLS-E-INSUFICIENT-CREDENTIALS:CAPS">GNUTLS_E_INSUFICIENT_CREDENTIALS</link>
#define             <link linkend="GNUTLS-E-INTERNAL-ERROR:CAPS">GNUTLS_E_INTERNAL_ERROR</link>
#define             <link linkend="GNUTLS-E-INTERRUPTED:CAPS">GNUTLS_E_INTERRUPTED</link>
#define             <link linkend="GNUTLS-E-INVALID-PASSWORD:CAPS">GNUTLS_E_INVALID_PASSWORD</link>
#define             <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS">GNUTLS_E_INVALID_REQUEST</link>
#define             <link linkend="GNUTLS-E-INVALID-SESSION:CAPS">GNUTLS_E_INVALID_SESSION</link>
#define             <link linkend="GNUTLS-E-KEY-USAGE-VIOLATION:CAPS">GNUTLS_E_KEY_USAGE_VIOLATION</link>
#define             <link linkend="GNUTLS-E-LARGE-PACKET:CAPS">GNUTLS_E_LARGE_PACKET</link>
#define             <link linkend="GNUTLS-E-LOCKING-ERROR:CAPS">GNUTLS_E_LOCKING_ERROR</link>
#define             <link linkend="GNUTLS-E-MAC-VERIFY-FAILED:CAPS">GNUTLS_E_MAC_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-MEMORY-ERROR:CAPS">GNUTLS_E_MEMORY_ERROR</link>
#define             <link linkend="GNUTLS-E-MPI-PRINT-FAILED:CAPS">GNUTLS_E_MPI_PRINT_FAILED</link>
#define             <link linkend="GNUTLS-E-MPI-SCAN-FAILED:CAPS">GNUTLS_E_MPI_SCAN_FAILED</link>
#define             <link linkend="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS">GNUTLS_E_NO_CERTIFICATE_FOUND</link>
#define             <link linkend="GNUTLS-E-NO-CERTIFICATE-STATUS:CAPS">GNUTLS_E_NO_CERTIFICATE_STATUS</link>
#define             <link linkend="GNUTLS-E-NO-CIPHER-SUITES:CAPS">GNUTLS_E_NO_CIPHER_SUITES</link>
#define             <link linkend="GNUTLS-E-NO-COMPRESSION-ALGORITHMS:CAPS">GNUTLS_E_NO_COMPRESSION_ALGORITHMS</link>
#define             <link linkend="GNUTLS-E-NO-PRIORITIES-WERE-SET:CAPS">GNUTLS_E_NO_PRIORITIES_WERE_SET</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-DH-PARAMS:CAPS">GNUTLS_E_NO_TEMPORARY_DH_PARAMS</link>
#define             <link linkend="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS:CAPS">GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</link>
#define             <link linkend="GNUTLS-E-OCSP-RESPONSE-ERROR:CAPS">GNUTLS_E_OCSP_RESPONSE_ERROR</link>
#define             <link linkend="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED:CAPS">GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</link>
#define             <link linkend="GNUTLS-E-OPENPGP-GETKEY-FAILED:CAPS">GNUTLS_E_OPENPGP_GETKEY_FAILED</link>
#define             <link linkend="GNUTLS-E-OPENPGP-KEYRING-ERROR:CAPS">GNUTLS_E_OPENPGP_KEYRING_ERROR</link>
#define             <link linkend="GNUTLS-E-OPENPGP-PREFERRED-KEY-ERROR:CAPS">GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR</link>
#define             <link linkend="GNUTLS-E-OPENPGP-SUBKEY-ERROR:CAPS">GNUTLS_E_OPENPGP_SUBKEY_ERROR</link>
#define             <link linkend="GNUTLS-E-OPENPGP-UID-REVOKED:CAPS">GNUTLS_E_OPENPGP_UID_REVOKED</link>
#define             <link linkend="GNUTLS-E-PARSING-ERROR:CAPS">GNUTLS_E_PARSING_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-ATTRIBUTE-ERROR:CAPS">GNUTLS_E_PKCS11_ATTRIBUTE_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-DATA-ERROR:CAPS">GNUTLS_E_PKCS11_DATA_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-DEVICE-ERROR:CAPS">GNUTLS_E_PKCS11_DEVICE_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-ERROR:CAPS">GNUTLS_E_PKCS11_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-KEY-ERROR:CAPS">GNUTLS_E_PKCS11_KEY_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-LOAD-ERROR:CAPS">GNUTLS_E_PKCS11_LOAD_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-PIN-ERROR:CAPS">GNUTLS_E_PKCS11_PIN_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-PIN-EXPIRED:CAPS">GNUTLS_E_PKCS11_PIN_EXPIRED</link>
#define             <link linkend="GNUTLS-E-PKCS11-PIN-LOCKED:CAPS">GNUTLS_E_PKCS11_PIN_LOCKED</link>
#define             <link linkend="GNUTLS-E-PKCS11-REQUESTED-OBJECT-NOT-AVAILBLE:CAPS">GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE</link>
#define             <link linkend="GNUTLS-E-PKCS11-SESSION-ERROR:CAPS">GNUTLS_E_PKCS11_SESSION_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-SIGNATURE-ERROR:CAPS">GNUTLS_E_PKCS11_SIGNATURE_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-SLOT-ERROR:CAPS">GNUTLS_E_PKCS11_SLOT_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-TOKEN-ERROR:CAPS">GNUTLS_E_PKCS11_TOKEN_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-UNSUPPORTED-FEATURE-ERROR:CAPS">GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS11-USER-ERROR:CAPS">GNUTLS_E_PKCS11_USER_ERROR</link>
#define             <link linkend="GNUTLS-E-PKCS1-WRONG-PAD:CAPS">GNUTLS_E_PKCS1_WRONG_PAD</link>
#define             <link linkend="GNUTLS-E-PK-DECRYPTION-FAILED:CAPS">GNUTLS_E_PK_DECRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-ENCRYPTION-FAILED:CAPS">GNUTLS_E_PK_ENCRYPTION_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIGN-FAILED:CAPS">GNUTLS_E_PK_SIGN_FAILED</link>
#define             <link linkend="GNUTLS-E-PK-SIG-VERIFY-FAILED:CAPS">GNUTLS_E_PK_SIG_VERIFY_FAILED</link>
#define             <link linkend="GNUTLS-E-PREMATURE-TERMINATION:CAPS">GNUTLS_E_PREMATURE_TERMINATION</link>
#define             <link linkend="GNUTLS-E-PULL-ERROR:CAPS">GNUTLS_E_PULL_ERROR</link>
#define             <link linkend="GNUTLS-E-PUSH-ERROR:CAPS">GNUTLS_E_PUSH_ERROR</link>
#define             <link linkend="GNUTLS-E-RANDOM-FAILED:CAPS">GNUTLS_E_RANDOM_FAILED</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION:CAPS">GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS">GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</link>
#define             <link linkend="GNUTLS-E-RECORD-LIMIT-REACHED:CAPS">GNUTLS_E_RECORD_LIMIT_REACHED</link>
#define             <link linkend="GNUTLS-E-REHANDSHAKE:CAPS">GNUTLS_E_REHANDSHAKE</link>
#define             <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS">GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</link>
#define             <link linkend="GNUTLS-E-SAFE-RENEGOTIATION-FAILED:CAPS">GNUTLS_E_SAFE_RENEGOTIATION_FAILED</link>
#define             <link linkend="GNUTLS-E-SESSION-EOF:CAPS">GNUTLS_E_SESSION_EOF</link>
#define             <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS">GNUTLS_E_SHORT_MEMORY_BUFFER</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-ERROR:CAPS">GNUTLS_E_SRP_PWD_ERROR</link>
#define             <link linkend="GNUTLS-E-SRP-PWD-PARSING-ERROR:CAPS">GNUTLS_E_SRP_PWD_PARSING_ERROR</link>
#define             <link linkend="GNUTLS-E-SUCCESS:CAPS">GNUTLS_E_SUCCESS</link>
#define             <link linkend="GNUTLS-E-TIMEDOUT:CAPS">GNUTLS_E_TIMEDOUT</link>
#define             <link linkend="GNUTLS-E-TOO-MANY-EMPTY-PACKETS:CAPS">GNUTLS_E_TOO_MANY_EMPTY_PACKETS</link>
#define             <link linkend="GNUTLS-E-TOO-MANY-HANDSHAKE-PACKETS:CAPS">GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS</link>
#define             <link linkend="GNUTLS-E-TPM-ERROR:CAPS">GNUTLS_E_TPM_ERROR</link>
#define             <link linkend="GNUTLS-E-TPM-KEY-NOT-FOUND:CAPS">GNUTLS_E_TPM_KEY_NOT_FOUND</link>
#define             <link linkend="GNUTLS-E-TPM-KEY-PASSWORD-ERROR:CAPS">GNUTLS_E_TPM_KEY_PASSWORD_ERROR</link>
#define             <link linkend="GNUTLS-E-TPM-SESSION-ERROR:CAPS">GNUTLS_E_TPM_SESSION_ERROR</link>
#define             <link linkend="GNUTLS-E-TPM-SRK-PASSWORD-ERROR:CAPS">GNUTLS_E_TPM_SRK_PASSWORD_ERROR</link>
#define             <link linkend="GNUTLS-E-TPM-UNINITIALIZED:CAPS">GNUTLS_E_TPM_UNINITIALIZED</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET:CAPS">GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET:CAPS">GNUTLS_E_UNEXPECTED_PACKET</link>
#define             <link linkend="GNUTLS-E-UNEXPECTED-PACKET-LENGTH:CAPS">GNUTLS_E_UNEXPECTED_PACKET_LENGTH</link>
#define             <link linkend="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS">GNUTLS_E_UNIMPLEMENTED_FEATURE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-SUITE:CAPS">GNUTLS_E_UNKNOWN_CIPHER_SUITE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-CIPHER-TYPE:CAPS">GNUTLS_E_UNKNOWN_CIPHER_TYPE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-HASH-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_HASH_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE:CAPS">GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE:CAPS">GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-PK-ALGORITHM:CAPS">GNUTLS_E_UNKNOWN_PK_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNKNOWN-SRP-USERNAME:CAPS">GNUTLS_E_UNKNOWN_SRP_USERNAME</link>
#define             <link linkend="GNUTLS-E-UNSAFE-RENEGOTIATION-DENIED:CAPS">GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE:CAPS">GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-SIGNATURE-ALGORITHM:CAPS">GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-UNSUPPORTED-VERSION-PACKET:CAPS">GNUTLS_E_UNSUPPORTED_VERSION_PACKET</link>
#define             <link linkend="GNUTLS-E-UNWANTED-ALGORITHM:CAPS">GNUTLS_E_UNWANTED_ALGORITHM</link>
#define             <link linkend="GNUTLS-E-USER-ERROR:CAPS">GNUTLS_E_USER_ERROR</link>
#define             <link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS">GNUTLS_E_WARNING_ALERT_RECEIVED</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-FPHF-RECEIVED:CAPS">GNUTLS_E_WARNING_IA_FPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-WARNING-IA-IPHF-RECEIVED:CAPS">GNUTLS_E_WARNING_IA_IPHF_RECEIVED</link>
#define             <link linkend="GNUTLS-E-X509-CERTIFICATE-ERROR:CAPS">GNUTLS_E_X509_CERTIFICATE_ERROR</link>
#define             <link linkend="GNUTLS-E-X509-UNKNOWN-SAN:CAPS">GNUTLS_E_X509_UNKNOWN_SAN</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE:CAPS">GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION:CAPS">GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-EXTENSION:CAPS">GNUTLS_E_X509_UNSUPPORTED_EXTENSION</link>
#define             <link linkend="GNUTLS-E-X509-UNSUPPORTED-OID:CAPS">GNUTLS_E_X509_UNSUPPORTED_OID</link>
#define             <link linkend="GNUTLS-HB-LOCAL-ALLOWED-TO-SEND:CAPS">GNUTLS_HB_LOCAL_ALLOWED_TO_SEND</link>
#define             <link linkend="GNUTLS-HB-PEER-ALLOWED-TO-SEND:CAPS">GNUTLS_HB_PEER_ALLOWED_TO_SEND</link>
#define             <link linkend="GNUTLS-HB-PEER-NOT-ALLOWED-TO-SEND:CAPS">GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND</link>
#define             <link linkend="GNUTLS-HEARTBEAT-WAIT:CAPS">GNUTLS_HEARTBEAT_WAIT</link>
#define             <link linkend="GNUTLS-KEY-CRL-SIGN:CAPS">GNUTLS_KEY_CRL_SIGN</link>
#define             <link linkend="GNUTLS-KEY-DATA-ENCIPHERMENT:CAPS">GNUTLS_KEY_DATA_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-DECIPHER-ONLY:CAPS">GNUTLS_KEY_DECIPHER_ONLY</link>
#define             <link linkend="GNUTLS-KEY-DIGITAL-SIGNATURE:CAPS">GNUTLS_KEY_DIGITAL_SIGNATURE</link>
#define             <link linkend="GNUTLS-KEY-ENCIPHER-ONLY:CAPS">GNUTLS_KEY_ENCIPHER_ONLY</link>
#define             <link linkend="GNUTLS-KEY-KEY-AGREEMENT:CAPS">GNUTLS_KEY_KEY_AGREEMENT</link>
#define             <link linkend="GNUTLS-KEY-KEY-CERT-SIGN:CAPS">GNUTLS_KEY_KEY_CERT_SIGN</link>
#define             <link linkend="GNUTLS-KEY-KEY-ENCIPHERMENT:CAPS">GNUTLS_KEY_KEY_ENCIPHERMENT</link>
#define             <link linkend="GNUTLS-KEY-NON-REPUDIATION:CAPS">GNUTLS_KEY_NON_REPUDIATION</link>
#define             <link linkend="GNUTLS-MAC-SHA:CAPS">GNUTLS_MAC_SHA</link>
#define             <link linkend="GNUTLS-MAX-ALGORITHM-NUM:CAPS">GNUTLS_MAX_ALGORITHM_NUM</link>
#define             <link linkend="GNUTLS-MAX-SESSION-ID:CAPS">GNUTLS_MAX_SESSION_ID</link>
#define             <link linkend="GNUTLS-NONBLOCK:CAPS">GNUTLS_NONBLOCK</link>
#define             <link linkend="GNUTLS-NO-EXTENSIONS:CAPS">GNUTLS_NO_EXTENSIONS</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-CONTEXT-SPECIFIC:CAPS">GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-COUNT-LOW:CAPS">GNUTLS_PKCS11_PIN_COUNT_LOW</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-FINAL-TRY:CAPS">GNUTLS_PKCS11_PIN_FINAL_TRY</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-SO:CAPS">GNUTLS_PKCS11_PIN_SO</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-USER:CAPS">GNUTLS_PKCS11_PIN_USER</link>
#define             <link linkend="GNUTLS-PKCS11-PIN-WRONG:CAPS">GNUTLS_PKCS11_PIN_WRONG</link>
#define             <link linkend="GNUTLS-PK-ECC:CAPS">GNUTLS_PK_ECC</link>
#define             <link linkend="GNUTLS-SERVER:CAPS">GNUTLS_SERVER</link>
#define             <link linkend="GNUTLS-VERSION:CAPS">GNUTLS_VERSION</link>
#define             <link linkend="GNUTLS-VERSION-MAJOR:CAPS">GNUTLS_VERSION_MAJOR</link>
#define             <link linkend="GNUTLS-VERSION-MINOR:CAPS">GNUTLS_VERSION_MINOR</link>
#define             <link linkend="GNUTLS-VERSION-NUMBER:CAPS">GNUTLS_VERSION_NUMBER</link>
#define             <link linkend="GNUTLS-VERSION-PATCH:CAPS">GNUTLS_VERSION_PATCH</link>
#define             <link linkend="HAVE-SSIZE-T:CAPS">HAVE_SSIZE_T</link>
enum                <link linkend="gnutls-alert-description-t">gnutls_alert_description_t</link>;
<link linkend="gnutls-alert-description-t"><returnvalue>gnutls_alert_description_t</returnvalue></link> <link linkend="gnutls-alert-get">gnutls_alert_get</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-alert-get-name">gnutls_alert_get_name</link>               (<parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> alert</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-alert-get-strname">gnutls_alert_get_strname</link>            (<parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> alert</parameter>);
enum                <link linkend="gnutls-alert-level-t">gnutls_alert_level_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-alert-send">gnutls_alert_send</link>                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-alert-level-t"><type>gnutls_alert_level_t</type></link> level</parameter>,
                                                         <parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> desc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-alert-send-appropriate">gnutls_alert_send_appropriate</link>       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> err</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              (<link linkend="gnutls-alloc-function">*gnutls_alloc_function</link>)            (<parameter><link linkend="size-t"><type>size_t</type></link> Param1</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-anon-allocate-client-credentials">gnutls_anon_allocate_client_credentials</link>
                                                        (<parameter><link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> *sc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-anon-allocate-server-credentials">gnutls_anon_allocate_server_credentials</link>
                                                        (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> *sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-anon-free-client-credentials">gnutls_anon_free_client_credentials</link> (<parameter><link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-anon-free-server-credentials">gnutls_anon_free_server_credentials</link> (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-anon-set-params-function">gnutls_anon_set_params_function</link>     (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-anon-set-server-dh-params">gnutls_anon_set_server_dh_params</link>    (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-anon-set-server-params-function">gnutls_anon_set_server_params_function</link>
                                                        (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="gnutls-audit-log-func">*gnutls_audit_log_func</link>)            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *Param2</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-bye">gnutls_bye</link>                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-close-request-t"><type>gnutls_close_request_t</type></link> how</parameter>);
extern gnutls_calloc_function <link linkend="gnutls-calloc">gnutls_calloc</link>;
<link linkend="void"><returnvalue>void</returnvalue></link> *              (<link linkend="gnutls-calloc-function">*gnutls_calloc_function</link>)           (<parameter><link linkend="size-t"><type>size_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param2</parameter>);
<link linkend="time-t"><returnvalue>time_t</returnvalue></link>              <link linkend="gnutls-certificate-activation-time-peers">gnutls_certificate_activation_time_peers</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-allocate-credentials">gnutls_certificate_allocate_credentials</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> *res</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-client-get-request-status">gnutls_certificate_client_get_request_status</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
struct              <link linkend="gnutls-certificate-credentials-st">gnutls_certificate_credentials_st</link>;
<link linkend="time-t"><returnvalue>time_t</returnvalue></link>              <link linkend="gnutls-certificate-expiration-time-peers">gnutls_certificate_expiration_time_peers</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-free-ca-names">gnutls_certificate_free_ca_names</link>    (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-free-cas">gnutls_certificate_free_cas</link>         (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-free-credentials">gnutls_certificate_free_credentials</link> (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-free-crls">gnutls_certificate_free_crls</link>        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-free-keys">gnutls_certificate_free_keys</link>        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-get-issuer">gnutls_certificate_get_issuer</link>       (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> cert</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *issuer</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
const <link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link> * <link linkend="gnutls-certificate-get-ours">gnutls_certificate_get_ours</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
const <link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link> * <link linkend="gnutls-certificate-get-peers">gnutls_certificate_get_peers</link>     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *list_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-get-peers-subkey-id">gnutls_certificate_get_peers_subkey_id</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *id</parameter>);
enum                <link linkend="gnutls-certificate-print-formats-t">gnutls_certificate_print_formats_t</link>;
enum                <link linkend="gnutls-certificate-request-t">gnutls_certificate_request_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-send-x509-rdn-sequence">gnutls_certificate_send_x509_rdn_sequence</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> status</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-server-set-request">gnutls_certificate_server_set_request</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-request-t"><type>gnutls_certificate_request_t</type></link> req</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-dh-params">gnutls_certificate_set_dh_params</link>    (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-ocsp-status-request-file">gnutls_certificate_set_ocsp_status_request_file</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *response_file</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-ocsp-status-request-function">gnutls_certificate_set_ocsp_status_request_function</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-status-request-ocsp-func"><type>gnutls_status_request_ocsp_func</type></link> ocsp_func</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-params-function">gnutls_certificate_set_params_function</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-pin-function">gnutls_certificate_set_pin_function</link> (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="gnutls-pin-callback-t"><type>gnutls_pin_callback_t</type></link> fn</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *userdata</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-retrieve-function">gnutls_certificate_set_retrieve_function</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-retrieve-function"><type>gnutls_certificate_retrieve_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-verify-flags">gnutls_certificate_set_verify_flags</link> (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-verify-function">gnutls_certificate_set_verify_function</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-verify-function"><type>gnutls_certificate_verify_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-certificate-set-verify-limits">gnutls_certificate_set_verify_limits</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_bits</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_depth</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-crl">gnutls_certificate_set_x509_crl</link>     (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> *crl_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> crl_list_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-crl-file">gnutls_certificate_set_x509_crl_file</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *crlfile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-crl-mem">gnutls_certificate_set_x509_crl_mem</link> (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *CRL</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-key">gnutls_certificate_set_x509_key</link>     (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *cert_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> cert_list_size</parameter>,
                                                         <parameter><link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> key</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-key-file">gnutls_certificate_set_x509_key_file</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *certfile</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *keyfile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-key-mem">gnutls_certificate_set_x509_key_mem</link> (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-simple-pkcs12-file">gnutls_certificate_set_x509_simple_pkcs12_file</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *pkcs12file</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-simple-pkcs12-mem">gnutls_certificate_set_x509_simple_pkcs12_mem</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *p12blob</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-system-trust">gnutls_certificate_set_x509_system_trust</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-trust">gnutls_certificate_set_x509_trust</link>   (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *ca_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ca_list_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-trust-file">gnutls_certificate_set_x509_trust_file</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *cafile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-set-x509-trust-mem">gnutls_certificate_set_x509_trust_mem</link>
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *ca</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);
enum                <link linkend="gnutls-certificate-status-t">gnutls_certificate_status_t</link>;
<link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> <link linkend="gnutls-certificate-type-get">gnutls_certificate_type_get</link>   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> <link linkend="gnutls-certificate-type-get-id">gnutls_certificate_type_get_id</link>
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-certificate-type-get-name">gnutls_certificate_type_get_name</link>    (<parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type</parameter>);
const <link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> * <link linkend="gnutls-certificate-type-list">gnutls_certificate_type_list</link>
                                                        (<parameter><type>void</type></parameter>);
enum                <link linkend="gnutls-certificate-type-t">gnutls_certificate_type_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-verification-status-print">gnutls_certificate_verification_status_print</link>
                                                        (<parameter>unsigned <link linkend="int"><type>int</type></link> status</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *out</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-verify-peers2">gnutls_certificate_verify_peers2</link>    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *status</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-certificate-verify-peers3">gnutls_certificate_verify_peers3</link>    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *hostname</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *status</parameter>);
enum                <link linkend="gnutls-channel-binding-t">gnutls_channel_binding_t</link>;
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-check-version">gnutls_check_version</link>                (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);
enum                <link linkend="gnutls-cipher-algorithm-t">gnutls_cipher_algorithm_t</link>;
<link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> <link linkend="gnutls-cipher-get">gnutls_cipher_get</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> <link linkend="gnutls-cipher-get-id">gnutls_cipher_get_id</link>          (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="gnutls-cipher-get-key-size">gnutls_cipher_get_key_size</link>          (<parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-cipher-get-name">gnutls_cipher_get_name</link>              (<parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> * <link linkend="gnutls-cipher-list">gnutls_cipher_list</link>    (<parameter><type>void</type></parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-cipher-suite-get-name">gnutls_cipher_suite_get_name</link>        (<parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> kx_algorithm</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> cipher_algorithm</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> mac_algorithm</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-cipher-suite-info">gnutls_cipher_suite_info</link>            (<parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *cs_id</parameter>,
                                                         <parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> *kx</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> *mac</parameter>,
                                                         <parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> *min_version</parameter>);
enum                <link linkend="gnutls-close-request-t">gnutls_close_request_t</link>;
<link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> <link linkend="gnutls-compression-get">gnutls_compression_get</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> <link linkend="gnutls-compression-get-id">gnutls_compression_get_id</link>   (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-compression-get-name">gnutls_compression_get_name</link>         (<parameter><link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> * <link linkend="gnutls-compression-list">gnutls_compression_list</link>
                                                        (<parameter><type>void</type></parameter>);
enum                <link linkend="gnutls-compression-method-t">gnutls_compression_method_t</link>;
#define             <link linkend="gnutls-cred-set">gnutls_cred_set</link>
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-credentials-clear">gnutls_credentials_clear</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-credentials-set">gnutls_credentials_set</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-credentials-type-t"><type>gnutls_credentials_type_t</type></link> type</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *cred</parameter>);
enum                <link linkend="gnutls-credentials-type-t">gnutls_credentials_type_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-db-check-entry">gnutls_db_check_entry</link>               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> session_entry</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="gnutls-db-get-ptr">gnutls_db_get_ptr</link>                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-db-remove-func">*gnutls_db_remove_func</link>)            (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-remove-session">gnutls_db_remove_session</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link>      (<link linkend="gnutls-db-retr-func">*gnutls_db_retr_func</link>)              (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-set-cache-expiration">gnutls_db_set_cache_expiration</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> seconds</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-set-ptr">gnutls_db_set_ptr</link>                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-set-remove-function">gnutls_db_set_remove_function</link>       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-remove-func"><type>gnutls_db_remove_func</type></link> rem_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-set-retrieve-function">gnutls_db_set_retrieve_function</link>     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-retr-func"><type>gnutls_db_retr_func</type></link> retr_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-db-set-store-function">gnutls_db_set_store_function</link>        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-store-func"><type>gnutls_db_store_func</type></link> store_func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-db-store-func">*gnutls_db_store_func</link>)             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-deinit">gnutls_deinit</link>                       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-get-group">gnutls_dh_get_group</link>                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_gen</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_prime</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-get-peers-public-bits">gnutls_dh_get_peers_public_bits</link>     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-get-prime-bits">gnutls_dh_get_prime_bits</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-get-pubkey">gnutls_dh_get_pubkey</link>                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_key</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-get-secret-bits">gnutls_dh_get_secret_bits</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-cpy">gnutls_dh_params_cpy</link>                (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dst</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> src</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-dh-params-deinit">gnutls_dh_params_deinit</link>             (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-export2-pkcs3">gnutls_dh_params_export2_pkcs3</link>      (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-export-pkcs3">gnutls_dh_params_export_pkcs3</link>       (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *params_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *params_data_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-export-raw">gnutls_dh_params_export_raw</link>         (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *bits</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-generate2">gnutls_dh_params_generate2</link>          (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-import-pkcs3">gnutls_dh_params_import_pkcs3</link>       (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pkcs3_params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-import-raw">gnutls_dh_params_import_raw</link>         (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-dh-params-init">gnutls_dh_params_init</link>               (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> *dh_params</parameter>);
struct              <link linkend="gnutls-dh-params-int">gnutls_dh_params_int</link>;
typedef             <link linkend="gnutls-dh-params-t">gnutls_dh_params_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-dh-set-prime-bits">gnutls_dh_set_prime_bits</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);
enum                <link linkend="gnutls-digest-algorithm-t">gnutls_digest_algorithm_t</link>;
<link linkend="gnutls-ecc-curve-t"><returnvalue>gnutls_ecc_curve_t</returnvalue></link>  <link linkend="gnutls-ecc-curve-get">gnutls_ecc_curve_get</link>                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-ecc-curve-get-name">gnutls_ecc_curve_get_name</link>           (<parameter><link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link> curve</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-ecc-curve-get-size">gnutls_ecc_curve_get_size</link>           (<parameter><link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link> curve</parameter>);
const <link linkend="gnutls-ecc-curve-t"><returnvalue>gnutls_ecc_curve_t</returnvalue></link> * <link linkend="gnutls-ecc-curve-list">gnutls_ecc_curve_list</link>        (<parameter><type>void</type></parameter>);
enum                <link linkend="gnutls-ecc-curve-t">gnutls_ecc_curve_t</link>;
struct              <link linkend="gnutls-ecdh-params-int">gnutls_ecdh_params_int</link>;
typedef             <link linkend="gnutls-ecdh-params-t">gnutls_ecdh_params_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-errno-func">*gnutls_errno_func</link>)                (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-error-is-fatal">gnutls_error_is_fatal</link>               (<parameter><link linkend="int"><type>int</type></link> error</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-error-to-alert">gnutls_error_to_alert</link>               (<parameter><link linkend="int"><type>int</type></link> err</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *level</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-fingerprint">gnutls_fingerprint</link>                  (<parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
extern gnutls_free_function <link linkend="gnutls-free">gnutls_free</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="gnutls-free-function">*gnutls_free_function</link>)             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-deinit">gnutls_global_deinit</link>                (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-global-init">gnutls_global_init</link>                  (<parameter><type>void</type></parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-audit-log-function">gnutls_global_set_audit_log_function</link>
                                                        (<parameter><link linkend="gnutls-audit-log-func"><type>gnutls_audit_log_func</type></link> log_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-log-function">gnutls_global_set_log_function</link>      (<parameter><link linkend="gnutls-log-func"><type>gnutls_log_func</type></link> log_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-log-level">gnutls_global_set_log_level</link>         (<parameter><link linkend="int"><type>int</type></link> level</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-mem-functions">gnutls_global_set_mem_functions</link>     (<parameter><link linkend="gnutls-alloc-function"><type>gnutls_alloc_function</type></link> alloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-alloc-function"><type>gnutls_alloc_function</type></link> secure_alloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-is-secure-function"><type>gnutls_is_secure_function</type></link> is_secure_func</parameter>,
                                                         <parameter><link linkend="gnutls-realloc-function"><type>gnutls_realloc_function</type></link> realloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-free-function"><type>gnutls_free_function</type></link> free_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-mutex">gnutls_global_set_mutex</link>             (<parameter><link linkend="mutex-init-func"><type>mutex_init_func</type></link> init</parameter>,
                                                         <parameter><link linkend="mutex-deinit-func"><type>mutex_deinit_func</type></link> deinit</parameter>,
                                                         <parameter><link linkend="mutex-lock-func"><type>mutex_lock_func</type></link> lock</parameter>,
                                                         <parameter><link linkend="mutex-unlock-func"><type>mutex_unlock_func</type></link> unlock</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-global-set-time-function">gnutls_global_set_time_function</link>     (<parameter><link linkend="gnutls-time-func"><type>gnutls_time_func</type></link> time_func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-handshake">gnutls_handshake</link>                    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
enum                <link linkend="gnutls-handshake-description-t">gnutls_handshake_description_t</link>;
<link linkend="gnutls-handshake-description-t"><returnvalue>gnutls_handshake_description_t</returnvalue></link> <link linkend="gnutls-handshake-get-last-in">gnutls_handshake_get_last_in</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-handshake-description-t"><returnvalue>gnutls_handshake_description_t</returnvalue></link> <link linkend="gnutls-handshake-get-last-out">gnutls_handshake_get_last_out</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-handshake-post-client-hello-func">*gnutls_handshake_post_client_hello_func</link>)
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> Param1</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-handshake-set-max-packet-length">gnutls_handshake_set_max_packet_length</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> max</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-handshake-set-post-client-hello-function">gnutls_handshake_set_post_client_hello_function</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-handshake-post-client-hello-func"><type>gnutls_handshake_post_client_hello_func</type></link> func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-handshake-set-private-extensions">gnutls_handshake_set_private_extensions</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> allow</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-handshake-set-timeout">gnutls_handshake_set_timeout</link>        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> ms</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-heartbeat-allowed">gnutls_heartbeat_allowed</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> type</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-heartbeat-enable">gnutls_heartbeat_enable</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> type</parameter>);
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="gnutls-heartbeat-get-timeout">gnutls_heartbeat_get_timeout</link>        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-heartbeat-ping">gnutls_heartbeat_ping</link>               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_tries</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-heartbeat-pong">gnutls_heartbeat_pong</link>               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-heartbeat-set-timeouts">gnutls_heartbeat_set_timeouts</link>       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> retrans_timeout</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> total_timeout</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-hex2bin">gnutls_hex2bin</link>                      (<parameter>const <link linkend="char"><type>char</type></link> *hex_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> hex_size</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *bin_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *bin_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-hex-decode">gnutls_hex_decode</link>                   (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hex_data</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-hex-encode">gnutls_hex_encode</link>                   (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-init">gnutls_init</link>                         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> *session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-is-secure-function">*gnutls_is_secure_function</link>)        (<parameter>const <link linkend="void"><type>void</type></link> *Param1</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-key-generate">gnutls_key_generate</link>                 (<parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_size</parameter>);
enum                <link linkend="gnutls-kx-algorithm-t">gnutls_kx_algorithm_t</link>;
<link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> <link linkend="gnutls-kx-get">gnutls_kx_get</link>                     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> <link linkend="gnutls-kx-get-id">gnutls_kx_get_id</link>                  (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-kx-get-name">gnutls_kx_get_name</link>                  (<parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> * <link linkend="gnutls-kx-list">gnutls_kx_list</link>            (<parameter><type>void</type></parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-load-file">gnutls_load_file</link>                    (<parameter>const <link linkend="char"><type>char</type></link> *filename</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                (<link linkend="gnutls-log-func">*gnutls_log_func</link>)                  (<parameter><link linkend="int"><type>int</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *Param2</parameter>);
enum                <link linkend="gnutls-mac-algorithm-t">gnutls_mac_algorithm_t</link>;
<link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> <link linkend="gnutls-mac-get">gnutls_mac_get</link>                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> <link linkend="gnutls-mac-get-id">gnutls_mac_get_id</link>                (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="gnutls-mac-get-key-size">gnutls_mac_get_key_size</link>             (<parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-mac-get-name">gnutls_mac_get_name</link>                 (<parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> * <link linkend="gnutls-mac-list">gnutls_mac_list</link>          (<parameter><type>void</type></parameter>);
extern gnutls_alloc_function <link linkend="gnutls-malloc">gnutls_malloc</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-ocsp-status-request-enable-client">gnutls_ocsp_status_request_enable_client</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *responder_id</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> responder_id_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *request_extensions</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-ocsp-status-request-get">gnutls_ocsp_status_request_get</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *response</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-ocsp-status-request-is-checked">gnutls_ocsp_status_request_is_checked</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
struct              <link linkend="gnutls-openpgp-crt-int">gnutls_openpgp_crt_int</link>;
enum                <link linkend="gnutls-openpgp-crt-status-t">gnutls_openpgp_crt_status_t</link>;
typedef             <link linkend="gnutls-openpgp-crt-t">gnutls_openpgp_crt_t</link>;
struct              <link linkend="gnutls-openpgp-keyring-int">gnutls_openpgp_keyring_int</link>;
typedef             <link linkend="gnutls-openpgp-keyring-t">gnutls_openpgp_keyring_t</link>;
struct              <link linkend="gnutls-openpgp-privkey-int">gnutls_openpgp_privkey_int</link>;
typedef             <link linkend="gnutls-openpgp-privkey-t">gnutls_openpgp_privkey_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-openpgp-send-cert">gnutls_openpgp_send_cert</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-openpgp-crt-status-t"><type>gnutls_openpgp_crt_status_t</type></link> status</parameter>);
enum                <link linkend="gnutls-params-type-t">gnutls_params_type_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-pem-base64-decode">gnutls_pem_base64_decode</link>            (<parameter>const <link linkend="char"><type>char</type></link> *header</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-pem-base64-decode-alloc">gnutls_pem_base64_decode_alloc</link>      (<parameter>const <link linkend="char"><type>char</type></link> *header</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-pem-base64-encode">gnutls_pem_base64_encode</link>            (<parameter>const <link linkend="char"><type>char</type></link> *msg</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-pem-base64-encode-alloc">gnutls_pem_base64_encode_alloc</link>      (<parameter>const <link linkend="char"><type>char</type></link> *msg</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-perror">gnutls_perror</link>                       (<parameter><link linkend="int"><type>int</type></link> error</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-pin-callback-t">*gnutls_pin_callback_t</link>)            (<parameter><link linkend="void"><type>void</type></link> *userdata</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> attempt</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *token_url</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *token_label</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *pin</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> pin_max</parameter>);
enum                <link linkend="gnutls-pin-flag-t">gnutls_pin_flag_t</link>;
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-pk-algorithm-get-name">gnutls_pk_algorithm_get_name</link>        (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algorithm</parameter>);
enum                <link linkend="gnutls-pk-algorithm-t">gnutls_pk_algorithm_t</link>;
<link linkend="gnutls-sec-param-t"><returnvalue>gnutls_sec_param_t</returnvalue></link>  <link linkend="gnutls-pk-bits-to-sec-param">gnutls_pk_bits_to_sec_param</link>         (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algo</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);
<link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> <link linkend="gnutls-pk-get-id">gnutls_pk_get_id</link>                  (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-pk-get-name">gnutls_pk_get_name</link>                  (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> * <link linkend="gnutls-pk-list">gnutls_pk_list</link>            (<parameter><type>void</type></parameter>);
<link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> <link linkend="gnutls-pk-to-sign">gnutls_pk_to_sign</link>               (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash</parameter>);
struct              <link linkend="gnutls-pkcs11-privkey-st">gnutls_pkcs11_privkey_st</link>;
typedef             <link linkend="gnutls-pkcs11-privkey-t">gnutls_pkcs11_privkey_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-prf">gnutls_prf</link>                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> label_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *label</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> server_random_first</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> extra_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *extra</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outsize</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-prf-raw">gnutls_prf_raw</link>                      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> label_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *label</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> seed_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *seed</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outsize</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-certificate-type-list">gnutls_priority_certificate_type_list</link>
                                                        (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-compression-list">gnutls_priority_compression_list</link>    (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-priority-deinit">gnutls_priority_deinit</link>              (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> priority_cache</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-ecc-curve-list">gnutls_priority_ecc_curve_list</link>      (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-get-cipher-suite-index">gnutls_priority_get_cipher_suite_index</link>
                                                        (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *sidx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-init">gnutls_priority_init</link>                (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> *priority_cache</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *priorities</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-protocol-list">gnutls_priority_protocol_list</link>       (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-set">gnutls_priority_set</link>                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> priority</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-set-direct">gnutls_priority_set_direct</link>          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *priorities</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-priority-sign-list">gnutls_priority_sign_list</link>           (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);
struct              <link linkend="gnutls-priority-st">gnutls_priority_st</link>;
typedef             <link linkend="gnutls-priority-t">gnutls_priority_t</link>;
enum                <link linkend="gnutls-privkey-type-t">gnutls_privkey_type_t</link>;
<link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link>   <link linkend="gnutls-protocol-get-id">gnutls_protocol_get_id</link>              (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-protocol-get-name">gnutls_protocol_get_name</link>            (<parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> version</parameter>);
<link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link>   <link linkend="gnutls-protocol-get-version">gnutls_protocol_get_version</link>         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
const <link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link> * <link linkend="gnutls-protocol-list">gnutls_protocol_list</link>          (<parameter><type>void</type></parameter>);
enum                <link linkend="gnutls-protocol-t">gnutls_protocol_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-psk-allocate-client-credentials">gnutls_psk_allocate_client_credentials</link>
                                                        (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> *sc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-psk-allocate-server-credentials">gnutls_psk_allocate_server_credentials</link>
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> *sc</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-psk-client-get-hint">gnutls_psk_client_get_hint</link>          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-free-client-credentials">gnutls_psk_free_client_credentials</link>  (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-free-server-credentials">gnutls_psk_free_server_credentials</link>  (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> sc</parameter>);
enum                <link linkend="gnutls-psk-key-flags">gnutls_psk_key_flags</link>;
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-psk-server-get-username">gnutls_psk_server_get_username</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-psk-set-client-credentials">gnutls_psk_set_client_credentials</link>   (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter><link linkend="gnutls-psk-key-flags"><type>gnutls_psk_key_flags</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-set-client-credentials-function">gnutls_psk_set_client_credentials_function</link>
                                                        (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-psk-client-credentials-function"><type>gnutls_psk_client_credentials_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-set-params-function">gnutls_psk_set_params_function</link>      (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-psk-set-server-credentials-file">gnutls_psk_set_server_credentials_file</link>
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_file</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-set-server-credentials-function">gnutls_psk_set_server_credentials_function</link>
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-psk-server-credentials-function"><type>gnutls_psk_server_credentials_function</type></link> *func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-psk-set-server-credentials-hint">gnutls_psk_set_server_credentials_hint</link>
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *hint</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-set-server-dh-params">gnutls_psk_set_server_dh_params</link>     (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-psk-set-server-params-function">gnutls_psk_set_server_params_function</link>
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (<link linkend="gnutls-pull-func">*gnutls_pull_func</link>)                 (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *Param2</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-pull-timeout-func">*gnutls_pull_timeout_func</link>)         (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> ms</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (<link linkend="gnutls-push-func">*gnutls_push_func</link>)                 (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *Param2</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-random-art">gnutls_random_art</link>                   (<parameter><link linkend="gnutls-random-art-t"><type>gnutls_random_art_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *key_type</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_size</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fpr_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *art</parameter>);
enum                <link linkend="gnutls-random-art-t">gnutls_random_art_t</link>;
#define             <link linkend="gnutls-read">gnutls_read</link>
extern gnutls_realloc_function <link linkend="gnutls-realloc">gnutls_realloc</link>;
<link linkend="void"><returnvalue>void</returnvalue></link> *              (<link linkend="gnutls-realloc-function">*gnutls_realloc_function</link>)          (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param2</parameter>);
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="gnutls-record-check-pending">gnutls_record_check_pending</link>         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-record-disable-padding">gnutls_record_disable_padding</link>       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-record-get-direction">gnutls_record_get_direction</link>         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="size-t"><returnvalue>size_t</returnvalue></link>              <link linkend="gnutls-record-get-max-size">gnutls_record_get_max_size</link>          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             <link linkend="gnutls-record-recv">gnutls_record_recv</link>                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             <link linkend="gnutls-record-recv-seq">gnutls_record_recv_seq</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *seq</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             <link linkend="gnutls-record-send">gnutls_record_send</link>                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             <link linkend="gnutls-record-set-max-size">gnutls_record_set_max_size</link>          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-rehandshake">gnutls_rehandshake</link>                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
typedef             <link linkend="gnutls-rsa-params-t">gnutls_rsa_params_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-safe-renegotiation-status">gnutls_safe_renegotiation_status</link>    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-sec-param-get-name">gnutls_sec_param_get_name</link>           (<parameter><link linkend="gnutls-sec-param-t"><type>gnutls_sec_param_t</type></link> param</parameter>);
enum                <link linkend="gnutls-sec-param-t">gnutls_sec_param_t</link>;
unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        <link linkend="gnutls-sec-param-to-pk-bits">gnutls_sec_param_to_pk_bits</link>         (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algo</parameter>,
                                                         <parameter><link linkend="gnutls-sec-param-t"><type>gnutls_sec_param_t</type></link> param</parameter>);
extern gnutls_alloc_function <link linkend="gnutls-secure-malloc">gnutls_secure_malloc</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-server-name-get">gnutls_server_name_get</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *data_length</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *type</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> indx</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-server-name-set">gnutls_server_name_set</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-server-name-type-t"><type>gnutls_server_name_type_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *name</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> name_length</parameter>);
enum                <link linkend="gnutls-server-name-type-t">gnutls_server_name_type_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-channel-binding">gnutls_session_channel_binding</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-channel-binding-t"><type>gnutls_channel_binding_t</type></link> cbtype</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cb</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-session-enable-compatibility-mode">gnutls_session_enable_compatibility_mode</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-get-data">gnutls_session_get_data</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *session_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *session_data_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-get-data2">gnutls_session_get_data2</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-get-id">gnutls_session_get_id</link>               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *session_id</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *session_id_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-get-id2">gnutls_session_get_id2</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *session_id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link> *              <link linkend="gnutls-session-get-ptr">gnutls_session_get_ptr</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-session-get-random">gnutls_session_get_random</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server</parameter>);
struct              <link linkend="gnutls-session-int">gnutls_session_int</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-is-resumed">gnutls_session_is_resumed</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-resumption-requested">gnutls_session_resumption_requested</link> (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-set-data">gnutls_session_set_data</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *session_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> session_data_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-set-premaster">gnutls_session_set_premaster</link>        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> entity</parameter>,
                                                         <parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> version</parameter>,
                                                         <parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> kx</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> cipher</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> mac</parameter>,
                                                         <parameter><link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> comp</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *master</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *session_id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-session-set-ptr">gnutls_session_set_ptr</link>              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);
typedef             <link linkend="gnutls-session-t">gnutls_session_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-ticket-enable-client">gnutls_session_ticket_enable_client</link> (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-ticket-enable-server">gnutls_session_ticket_enable_server</link> (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-session-ticket-key-generate">gnutls_session_ticket_key_generate</link>  (<parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-set-default-priority">gnutls_set_default_priority</link>         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-sign-algorithm-get">gnutls_sign_algorithm_get</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
#define             <link linkend="gnutls-sign-algorithm-get-name">gnutls_sign_algorithm_get_name</link>
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-sign-algorithm-get-requested">gnutls_sign_algorithm_get_requested</link> (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> indx</parameter>,
                                                         <parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> *algo</parameter>);
enum                <link linkend="gnutls-sign-algorithm-t">gnutls_sign_algorithm_t</link>;
<link linkend="gnutls-digest-algorithm-t"><returnvalue>gnutls_digest_algorithm_t</returnvalue></link> <link linkend="gnutls-sign-get-hash-algorithm">gnutls_sign_get_hash_algorithm</link>
                                                        (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> sign</parameter>);
<link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> <link linkend="gnutls-sign-get-id">gnutls_sign_get_id</link>              (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-sign-get-name">gnutls_sign_get_name</link>                (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> algorithm</parameter>);
<link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> <link linkend="gnutls-sign-get-pk-algorithm">gnutls_sign_get_pk_algorithm</link>      (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> sign</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-sign-is-secure">gnutls_sign_is_secure</link>               (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> algorithm</parameter>);
const <link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> * <link linkend="gnutls-sign-list">gnutls_sign_list</link>        (<parameter><type>void</type></parameter>);
extern const gnutls_datum_t <link linkend="gnutls-srp-1024-group-generator">gnutls_srp_1024_group_generator</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-1024-group-prime">gnutls_srp_1024_group_prime</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-1536-group-generator">gnutls_srp_1536_group_generator</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-1536-group-prime">gnutls_srp_1536_group_prime</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-2048-group-generator">gnutls_srp_2048_group_generator</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-2048-group-prime">gnutls_srp_2048_group_prime</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-3072-group-generator">gnutls_srp_3072_group_generator</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-3072-group-prime">gnutls_srp_3072_group_prime</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-4096-group-generator">gnutls_srp_4096_group_generator</link>;
extern const gnutls_datum_t <link linkend="gnutls-srp-4096-group-prime">gnutls_srp_4096_group_prime</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-allocate-client-credentials">gnutls_srp_allocate_client_credentials</link>
                                                        (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> *sc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-allocate-server-credentials">gnutls_srp_allocate_server_credentials</link>
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> *sc</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-base64-decode">gnutls_srp_base64_decode</link>            (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-base64-decode-alloc">gnutls_srp_base64_decode_alloc</link>      (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-base64-encode">gnutls_srp_base64_encode</link>            (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-base64-encode-alloc">gnutls_srp_base64_encode_alloc</link>      (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-srp-free-client-credentials">gnutls_srp_free_client_credentials</link>  (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> sc</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-srp-free-server-credentials">gnutls_srp_free_server_credentials</link>  (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> sc</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-srp-server-get-username">gnutls_srp_server_get_username</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-set-client-credentials">gnutls_srp_set_client_credentials</link>   (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-srp-set-client-credentials-function">gnutls_srp_set_client_credentials_function</link>
                                                        (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-srp-client-credentials-function"><type>gnutls_srp_client_credentials_function</type></link> *func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-srp-set-prime-bits">gnutls_srp_set_prime_bits</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-set-server-credentials-file">gnutls_srp_set_server_credentials_file</link>
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_conf_file</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-srp-set-server-credentials-function">gnutls_srp_set_server_credentials_function</link>
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-srp-server-credentials-function"><type>gnutls_srp_server_credentials_function</type></link> *func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srp-verifier">gnutls_srp_verifier</link>                 (<parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *salt</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *res</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-get-keys">gnutls_srtp_get_keys</link>                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *key_material</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_material_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client_key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client_salt</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server_key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server_salt</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-get-mki">gnutls_srtp_get_mki</link>                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *mki</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-get-profile-id">gnutls_srtp_get_profile_id</link>          (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> *profile</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-srtp-get-profile-name">gnutls_srtp_get_profile_name</link>        (<parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> profile</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-get-selected-profile">gnutls_srtp_get_selected_profile</link>    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> *profile</parameter>);
enum                <link linkend="gnutls-srtp-profile-t">gnutls_srtp_profile_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-set-mki">gnutls_srtp_set_mki</link>                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *mki</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-set-profile">gnutls_srtp_set_profile</link>             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> profile</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-srtp-set-profile-direct">gnutls_srtp_set_profile_direct</link>      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *profiles</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-store-commitment">gnutls_store_commitment</link>             (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash_algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hash</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-store-pubkey">gnutls_store_pubkey</link>                 (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> cert_type</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
<link linkend="char"><returnvalue>char</returnvalue></link> *              (<link linkend="gnutls-strdup">*gnutls_strdup</link>)                    (<parameter>const <link linkend="char"><type>char</type></link> *Param1</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-strerror">gnutls_strerror</link>                     (<parameter><link linkend="int"><type>int</type></link> error</parameter>);
const <link linkend="char"><returnvalue>char</returnvalue></link> *        <link linkend="gnutls-strerror-name">gnutls_strerror_name</link>                (<parameter><link linkend="int"><type>int</type></link> error</parameter>);
enum                <link linkend="gnutls-supplemental-data-format-type-t">gnutls_supplemental_data_format_type_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-tdb-deinit">gnutls_tdb_deinit</link>                   (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-tdb-init">gnutls_tdb_init</link>                     (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> *tdb</parameter>);
struct              <link linkend="gnutls-tdb-int">gnutls_tdb_int</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-tdb-set-store-commitment-func">gnutls_tdb_set_store_commitment_func</link>
                                                        (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-store-commitment-func"><type>gnutls_tdb_store_commitment_func</type></link> cstore</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-tdb-set-store-func">gnutls_tdb_set_store_func</link>           (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-store-func"><type>gnutls_tdb_store_func</type></link> store</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-tdb-set-verify-func">gnutls_tdb_set_verify_func</link>          (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-verify-func"><type>gnutls_tdb_verify_func</type></link> verify</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-tdb-store-commitment-func">*gnutls_tdb_store_commitment_func</link>) (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash_algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hash</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-tdb-store-func">*gnutls_tdb_store_func</link>)            (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pubkey</parameter>);
typedef             <link linkend="gnutls-tdb-t">gnutls_tdb_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="gnutls-tdb-verify-func">*gnutls_tdb_verify_func</link>)           (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pubkey</parameter>);
<link linkend="time-t"><returnvalue>time_t</returnvalue></link>              (<link linkend="gnutls-time-func">*gnutls_time_func</link>)                 (<parameter><link linkend="time-t"><type>time_t</type></link> *t</parameter>);
<link linkend="gnutls-transport-ptr-t"><returnvalue>gnutls_transport_ptr_t</returnvalue></link> <link linkend="gnutls-transport-get-ptr">gnutls_transport_get_ptr</link>         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-get-ptr2">gnutls_transport_get_ptr2</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> *recv_ptr</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> *send_ptr</parameter>);
typedef             <link linkend="gnutls-transport-ptr-t">gnutls_transport_ptr_t</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-errno">gnutls_transport_set_errno</link>          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> err</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-errno-function">gnutls_transport_set_errno_function</link> (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-errno-func"><type>gnutls_errno_func</type></link> errno_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-ptr">gnutls_transport_set_ptr</link>            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-ptr2">gnutls_transport_set_ptr2</link>           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> recv_ptr</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> send_ptr</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-pull-function">gnutls_transport_set_pull_function</link>  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-pull-func"><type>gnutls_pull_func</type></link> pull_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-pull-timeout-function">gnutls_transport_set_pull_timeout_function</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-pull-timeout-func"><type>gnutls_pull_timeout_func</type></link> func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-push-function">gnutls_transport_set_push_function</link>  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-push-func"><type>gnutls_push_func</type></link> push_func</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="gnutls-transport-set-vec-push-function">gnutls_transport_set_vec_push_function</link>
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-vec-push-func"><type>gnutls_vec_push_func</type></link> vec_func</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-url-is-supported">gnutls_url_is_supported</link>             (<parameter>const <link linkend="char"><type>char</type></link> *url</parameter>);
<link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (<link linkend="gnutls-vec-push-func">*gnutls_vec_push_func</link>)             (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="giovec-t"><type>giovec_t</type></link> *iov</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> iovcnt</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 <link linkend="gnutls-verify-stored-pubkey">gnutls_verify_stored_pubkey</link>         (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> cert_type</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);
#define             <link linkend="gnutls-write">gnutls_write</link>
struct              <link linkend="gnutls-x509-crl-int">gnutls_x509_crl_int</link>;
typedef             <link linkend="gnutls-x509-crl-t">gnutls_x509_crl_t</link>;
struct              <link linkend="gnutls-x509-crq-int">gnutls_x509_crq_int</link>;
typedef             <link linkend="gnutls-x509-crq-t">gnutls_x509_crq_t</link>;
enum                <link linkend="gnutls-x509-crt-fmt-t">gnutls_x509_crt_fmt_t</link>;
struct              <link linkend="gnutls-x509-crt-int">gnutls_x509_crt_int</link>;
typedef             <link linkend="gnutls-x509-crt-t">gnutls_x509_crt_t</link>;
struct              <link linkend="gnutls-x509-privkey-int">gnutls_x509_privkey_int</link>;
typedef             <link linkend="gnutls-x509-privkey-t">gnutls_x509_privkey_t</link>;
enum                <link linkend="gnutls-x509-subject-alt-name-t">gnutls_x509_subject_alt_name_t</link>;
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="mutex-deinit-func">*mutex_deinit_func</link>)                (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="mutex-init-func">*mutex_init_func</link>)                  (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="mutex-lock-func">*mutex_lock_func</link>)                  (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);
<link linkend="int"><returnvalue>int</returnvalue></link>                 (<link linkend="mutex-unlock-func">*mutex_unlock_func</link>)                (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="gnutls-gnutls.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="gnutls-gnutls.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GNUTLS-CIPHER-ARCFOUR:CAPS" role="macro">
<title>GNUTLS_CIPHER_ARCFOUR</title>
<indexterm zone="GNUTLS-CIPHER-ARCFOUR:CAPS"><primary>GNUTLS_CIPHER_ARCFOUR</primary></indexterm>
<programlisting>#define GNUTLS_CIPHER_ARCFOUR GNUTLS_CIPHER_ARCFOUR_128
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-128-CBC:CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_128_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-128-CBC:CAPS"><primary>GNUTLS_CIPHER_RIJNDAEL_128_CBC</primary></indexterm>
<programlisting>#define GNUTLS_CIPHER_RIJNDAEL_128_CBC GNUTLS_CIPHER_AES_128_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-256-CBC:CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_256_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-256-CBC:CAPS"><primary>GNUTLS_CIPHER_RIJNDAEL_256_CBC</primary></indexterm>
<programlisting>#define GNUTLS_CIPHER_RIJNDAEL_256_CBC GNUTLS_CIPHER_AES_256_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CIPHER-RIJNDAEL-CBC:CAPS" role="macro">
<title>GNUTLS_CIPHER_RIJNDAEL_CBC</title>
<indexterm zone="GNUTLS-CIPHER-RIJNDAEL-CBC:CAPS"><primary>GNUTLS_CIPHER_RIJNDAEL_CBC</primary></indexterm>
<programlisting>#define GNUTLS_CIPHER_RIJNDAEL_CBC GNUTLS_CIPHER_AES_128_CBC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-CLIENT:CAPS" role="macro">
<title>GNUTLS_CLIENT</title>
<indexterm zone="GNUTLS-CLIENT:CAPS"><primary>GNUTLS_CLIENT</primary></indexterm>
<programlisting>#define GNUTLS_CLIENT (1&lt;&lt;1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-DATAGRAM:CAPS" role="macro">
<title>GNUTLS_DATAGRAM</title>
<indexterm zone="GNUTLS-DATAGRAM:CAPS"><primary>GNUTLS_DATAGRAM</primary></indexterm>
<programlisting>#define GNUTLS_DATAGRAM (1&lt;&lt;2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-DEFAULT-HANDSHAKE-TIMEOUT:CAPS" role="macro">
<title>GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT</title>
<indexterm zone="GNUTLS-DEFAULT-HANDSHAKE-TIMEOUT:CAPS"><primary>GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT</primary></indexterm>
<programlisting>#define GNUTLS_DEFAULT_HANDSHAKE_TIMEOUT ((unsigned int)-1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-DIG-SHA:CAPS" role="macro">
<title>GNUTLS_DIG_SHA</title>
<indexterm zone="GNUTLS-DIG-SHA:CAPS"><primary>GNUTLS_DIG_SHA</primary></indexterm>
<programlisting>#define GNUTLS_DIG_SHA GNUTLS_DIG_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-AGAIN:CAPS" role="macro">
<title>GNUTLS_E_AGAIN</title>
<indexterm zone="GNUTLS-E-AGAIN:CAPS"><primary>GNUTLS_E_AGAIN</primary></indexterm>
<programlisting>#define GNUTLS_E_AGAIN -28
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-APPLICATION-ERROR-MAX:CAPS" role="macro">
<title>GNUTLS_E_APPLICATION_ERROR_MAX</title>
<indexterm zone="GNUTLS-E-APPLICATION-ERROR-MAX:CAPS"><primary>GNUTLS_E_APPLICATION_ERROR_MAX</primary></indexterm>
<programlisting>#define GNUTLS_E_APPLICATION_ERROR_MAX -65000
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-APPLICATION-ERROR-MIN:CAPS" role="macro">
<title>GNUTLS_E_APPLICATION_ERROR_MIN</title>
<indexterm zone="GNUTLS-E-APPLICATION-ERROR-MIN:CAPS"><primary>GNUTLS_E_APPLICATION_ERROR_MIN</primary></indexterm>
<programlisting>#define GNUTLS_E_APPLICATION_ERROR_MIN -65500
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-DER-ERROR:CAPS" role="macro">
<title>GNUTLS_E_ASN1_DER_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-DER-ERROR:CAPS"><primary>GNUTLS_E_ASN1_DER_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_DER_ERROR -69
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-DER-OVERFLOW:CAPS" role="macro">
<title>GNUTLS_E_ASN1_DER_OVERFLOW</title>
<indexterm zone="GNUTLS-E-ASN1-DER-OVERFLOW:CAPS"><primary>GNUTLS_E_ASN1_DER_OVERFLOW</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_DER_OVERFLOW -77
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND:CAPS" role="macro">
<title>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-ELEMENT-NOT-FOUND:CAPS"><primary>GNUTLS_E_ASN1_ELEMENT_NOT_FOUND</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_ELEMENT_NOT_FOUND -67
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-GENERIC-ERROR:CAPS" role="macro">
<title>GNUTLS_E_ASN1_GENERIC_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-GENERIC-ERROR:CAPS"><primary>GNUTLS_E_ASN1_GENERIC_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_GENERIC_ERROR -71
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND:CAPS" role="macro">
<title>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-IDENTIFIER-NOT-FOUND:CAPS"><primary>GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_IDENTIFIER_NOT_FOUND -68
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-SYNTAX-ERROR:CAPS" role="macro">
<title>GNUTLS_E_ASN1_SYNTAX_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-SYNTAX-ERROR:CAPS"><primary>GNUTLS_E_ASN1_SYNTAX_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_SYNTAX_ERROR -76
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TAG-ERROR:CAPS" role="macro">
<title>GNUTLS_E_ASN1_TAG_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-TAG-ERROR:CAPS"><primary>GNUTLS_E_ASN1_TAG_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_TAG_ERROR -73
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TAG-IMPLICIT:CAPS" role="macro">
<title>GNUTLS_E_ASN1_TAG_IMPLICIT</title>
<indexterm zone="GNUTLS-E-ASN1-TAG-IMPLICIT:CAPS"><primary>GNUTLS_E_ASN1_TAG_IMPLICIT</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_TAG_IMPLICIT -74
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-TYPE-ANY-ERROR:CAPS" role="macro">
<title>GNUTLS_E_ASN1_TYPE_ANY_ERROR</title>
<indexterm zone="GNUTLS-E-ASN1-TYPE-ANY-ERROR:CAPS"><primary>GNUTLS_E_ASN1_TYPE_ANY_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_TYPE_ANY_ERROR -75
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-VALUE-NOT-FOUND:CAPS" role="macro">
<title>GNUTLS_E_ASN1_VALUE_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-ASN1-VALUE-NOT-FOUND:CAPS"><primary>GNUTLS_E_ASN1_VALUE_NOT_FOUND</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_VALUE_NOT_FOUND -70
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ASN1-VALUE-NOT-VALID:CAPS" role="macro">
<title>GNUTLS_E_ASN1_VALUE_NOT_VALID</title>
<indexterm zone="GNUTLS-E-ASN1-VALUE-NOT-VALID:CAPS"><primary>GNUTLS_E_ASN1_VALUE_NOT_VALID</primary></indexterm>
<programlisting>#define GNUTLS_E_ASN1_VALUE_NOT_VALID -72
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BAD-COOKIE:CAPS" role="macro">
<title>GNUTLS_E_BAD_COOKIE</title>
<indexterm zone="GNUTLS-E-BAD-COOKIE:CAPS"><primary>GNUTLS_E_BAD_COOKIE</primary></indexterm>
<programlisting>#define GNUTLS_E_BAD_COOKIE -214
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-DECODING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_BASE64_DECODING_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-DECODING-ERROR:CAPS"><primary>GNUTLS_E_BASE64_DECODING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_BASE64_DECODING_ERROR -34
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-ENCODING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_BASE64_ENCODING_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-ENCODING-ERROR:CAPS"><primary>GNUTLS_E_BASE64_ENCODING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_BASE64_ENCODING_ERROR -201
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR:CAPS" role="macro">
<title>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</title>
<indexterm zone="GNUTLS-E-BASE64-UNEXPECTED-HEADER-ERROR:CAPS"><primary>GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_BASE64_UNEXPECTED_HEADER_ERROR -207
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CERTIFICATE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_CERTIFICATE_ERROR</title>
<indexterm zone="GNUTLS-E-CERTIFICATE-ERROR:CAPS"><primary>GNUTLS_E_CERTIFICATE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_CERTIFICATE_ERROR -43
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS" role="macro">
<title>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</title>
<indexterm zone="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS"><primary>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</primary></indexterm>
<programlisting>#define GNUTLS_E_CERTIFICATE_KEY_MISMATCH -60
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CERTIFICATE-LIST-UNSORTED:CAPS" role="macro">
<title>GNUTLS_E_CERTIFICATE_LIST_UNSORTED</title>
<indexterm zone="GNUTLS-E-CERTIFICATE-LIST-UNSORTED:CAPS"><primary>GNUTLS_E_CERTIFICATE_LIST_UNSORTED</primary></indexterm>
<programlisting>#define GNUTLS_E_CERTIFICATE_LIST_UNSORTED -324
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CHANNEL-BINDING-NOT-AVAILABLE:CAPS" role="macro">
<title>GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE</title>
<indexterm zone="GNUTLS-E-CHANNEL-BINDING-NOT-AVAILABLE:CAPS"><primary>GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE</primary></indexterm>
<programlisting>#define GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE -213
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-COMPRESSION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_COMPRESSION_FAILED</title>
<indexterm zone="GNUTLS-E-COMPRESSION-FAILED:CAPS"><primary>GNUTLS_E_COMPRESSION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_COMPRESSION_FAILED -27
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CONSTRAINT-ERROR:CAPS" role="macro">
<title>GNUTLS_E_CONSTRAINT_ERROR</title>
<indexterm zone="GNUTLS-E-CONSTRAINT-ERROR:CAPS"><primary>GNUTLS_E_CONSTRAINT_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_CONSTRAINT_ERROR -101
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CRYPTODEV-DEVICE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_CRYPTODEV_DEVICE_ERROR</title>
<indexterm zone="GNUTLS-E-CRYPTODEV-DEVICE-ERROR:CAPS"><primary>GNUTLS_E_CRYPTODEV_DEVICE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_CRYPTODEV_DEVICE_ERROR -212
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CRYPTODEV-IOCTL-ERROR:CAPS" role="macro">
<title>GNUTLS_E_CRYPTODEV_IOCTL_ERROR</title>
<indexterm zone="GNUTLS-E-CRYPTODEV-IOCTL-ERROR:CAPS"><primary>GNUTLS_E_CRYPTODEV_IOCTL_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_CRYPTODEV_IOCTL_ERROR -211
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CRYPTO-ALREADY-REGISTERED:CAPS" role="macro">
<title>GNUTLS_E_CRYPTO_ALREADY_REGISTERED</title>
<indexterm zone="GNUTLS-E-CRYPTO-ALREADY-REGISTERED:CAPS"><primary>GNUTLS_E_CRYPTO_ALREADY_REGISTERED</primary></indexterm>
<programlisting>#define GNUTLS_E_CRYPTO_ALREADY_REGISTERED -209
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-CRYPTO-INIT-FAILED:CAPS" role="macro">
<title>GNUTLS_E_CRYPTO_INIT_FAILED</title>
<indexterm zone="GNUTLS-E-CRYPTO-INIT-FAILED:CAPS"><primary>GNUTLS_E_CRYPTO_INIT_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_CRYPTO_INIT_FAILED -318
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DB-ERROR:CAPS" role="macro">
<title>GNUTLS_E_DB_ERROR</title>
<indexterm zone="GNUTLS-E-DB-ERROR:CAPS"><primary>GNUTLS_E_DB_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_DB_ERROR -30
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DECOMPRESSION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_DECOMPRESSION_FAILED</title>
<indexterm zone="GNUTLS-E-DECOMPRESSION-FAILED:CAPS"><primary>GNUTLS_E_DECOMPRESSION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_DECOMPRESSION_FAILED -26       /* GNUTLS_A_DECOMPRESSION_FAILURE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DECRYPTION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_DECRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-DECRYPTION-FAILED:CAPS"><primary>GNUTLS_E_DECRYPTION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_DECRYPTION_FAILED -24  /* GNUTLS_A_DECRYPTION_FAILED, GNUTLS_A_BAD_RECORD_MAC */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS" role="macro">
<title>GNUTLS_E_DH_PRIME_UNACCEPTABLE</title>
<indexterm zone="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS"><primary>GNUTLS_E_DH_PRIME_UNACCEPTABLE</primary></indexterm>
<programlisting>#define GNUTLS_E_DH_PRIME_UNACCEPTABLE -63
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ECC-NO-SUPPORTED-CURVES:CAPS" role="macro">
<title>GNUTLS_E_ECC_NO_SUPPORTED_CURVES</title>
<indexterm zone="GNUTLS-E-ECC-NO-SUPPORTED-CURVES:CAPS"><primary>GNUTLS_E_ECC_NO_SUPPORTED_CURVES</primary></indexterm>
<programlisting>#define GNUTLS_E_ECC_NO_SUPPORTED_CURVES -321
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ECC-UNSUPPORTED-CURVE:CAPS" role="macro">
<title>GNUTLS_E_ECC_UNSUPPORTED_CURVE</title>
<indexterm zone="GNUTLS-E-ECC-UNSUPPORTED-CURVE:CAPS"><primary>GNUTLS_E_ECC_UNSUPPORTED_CURVE</primary></indexterm>
<programlisting>#define GNUTLS_E_ECC_UNSUPPORTED_CURVE -322
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ENCRYPTION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_ENCRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-ENCRYPTION-FAILED:CAPS"><primary>GNUTLS_E_ENCRYPTION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_ENCRYPTION_FAILED -40
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ERROR-IN-FINISHED-PACKET:CAPS" role="macro">
<title>GNUTLS_E_ERROR_IN_FINISHED_PACKET</title>
<indexterm zone="GNUTLS-E-ERROR-IN-FINISHED-PACKET:CAPS"><primary>GNUTLS_E_ERROR_IN_FINISHED_PACKET</primary></indexterm>
<programlisting>#define GNUTLS_E_ERROR_IN_FINISHED_PACKET -18
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-EXPIRED:CAPS" role="macro">
<title>GNUTLS_E_EXPIRED</title>
<indexterm zone="GNUTLS-E-EXPIRED:CAPS"><primary>GNUTLS_E_EXPIRED</primary></indexterm>
<programlisting>#define GNUTLS_E_EXPIRED -29
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_FATAL_ALERT_RECEIVED</title>
<indexterm zone="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS"><primary>GNUTLS_E_FATAL_ALERT_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_FATAL_ALERT_RECEIVED -12
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-FILE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_FILE_ERROR</title>
<indexterm zone="GNUTLS-E-FILE-ERROR:CAPS"><primary>GNUTLS_E_FILE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_FILE_ERROR -64
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-GOT-APPLICATION-DATA:CAPS" role="macro">
<title>GNUTLS_E_GOT_APPLICATION_DATA</title>
<indexterm zone="GNUTLS-E-GOT-APPLICATION-DATA:CAPS"><primary>GNUTLS_E_GOT_APPLICATION_DATA</primary></indexterm>
<programlisting>#define GNUTLS_E_GOT_APPLICATION_DATA -38
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HANDSHAKE-TOO-LARGE:CAPS" role="macro">
<title>GNUTLS_E_HANDSHAKE_TOO_LARGE</title>
<indexterm zone="GNUTLS-E-HANDSHAKE-TOO-LARGE:CAPS"><primary>GNUTLS_E_HANDSHAKE_TOO_LARGE</primary></indexterm>
<programlisting>#define GNUTLS_E_HANDSHAKE_TOO_LARGE -210
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HASH-FAILED:CAPS" role="macro">
<title>GNUTLS_E_HASH_FAILED</title>
<indexterm zone="GNUTLS-E-HASH-FAILED:CAPS"><primary>GNUTLS_E_HASH_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_HASH_FAILED -33
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HEARTBEAT-PING-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_HEARTBEAT_PING_RECEIVED</title>
<indexterm zone="GNUTLS-E-HEARTBEAT-PING-RECEIVED:CAPS"><primary>GNUTLS_E_HEARTBEAT_PING_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_HEARTBEAT_PING_RECEIVED -293
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-HEARTBEAT-PONG-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_HEARTBEAT_PONG_RECEIVED</title>
<indexterm zone="GNUTLS-E-HEARTBEAT-PONG-RECEIVED:CAPS"><primary>GNUTLS_E_HEARTBEAT_PONG_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_HEARTBEAT_PONG_RECEIVED -292
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-IA-VERIFY-FAILED:CAPS" role="macro">
<title>GNUTLS_E_IA_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-IA-VERIFY-FAILED:CAPS"><primary>GNUTLS_E_IA_VERIFY_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_IA_VERIFY_FAILED -104
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ILLEGAL-PARAMETER:CAPS" role="macro">
<title>GNUTLS_E_ILLEGAL_PARAMETER</title>
<indexterm zone="GNUTLS-E-ILLEGAL-PARAMETER:CAPS"><primary>GNUTLS_E_ILLEGAL_PARAMETER</primary></indexterm>
<programlisting>#define GNUTLS_E_ILLEGAL_PARAMETER -325
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-ILLEGAL-SRP-USERNAME:CAPS" role="macro">
<title>GNUTLS_E_ILLEGAL_SRP_USERNAME</title>
<indexterm zone="GNUTLS-E-ILLEGAL-SRP-USERNAME:CAPS"><primary>GNUTLS_E_ILLEGAL_SRP_USERNAME</primary></indexterm>
<programlisting>#define GNUTLS_E_ILLEGAL_SRP_USERNAME -90
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY:CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-CRYPTO-LIBRARY:CAPS"><primary>GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY</primary></indexterm>
<programlisting>#define GNUTLS_E_INCOMPATIBLE_CRYPTO_LIBRARY -202
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY:CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-GCRYPT-LIBRARY:CAPS"><primary>GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY</primary></indexterm>
<programlisting>#define GNUTLS_E_INCOMPATIBLE_GCRYPT_LIBRARY -202       /* obsolete */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY:CAPS" role="macro">
<title>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</title>
<indexterm zone="GNUTLS-E-INCOMPATIBLE-LIBTASN1-LIBRARY:CAPS"><primary>GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY</primary></indexterm>
<programlisting>#define GNUTLS_E_INCOMPATIBLE_LIBTASN1_LIBRARY -203
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INCOMPAT-DSA-KEY-WITH-TLS-PROTOCOL:CAPS" role="macro">
<title>GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL</title>
<indexterm zone="GNUTLS-E-INCOMPAT-DSA-KEY-WITH-TLS-PROTOCOL:CAPS"><primary>GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL</primary></indexterm>
<programlisting>#define GNUTLS_E_INCOMPAT_DSA_KEY_WITH_TLS_PROTOCOL -216
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFFICIENT-CRED:CAPS" role="macro">
<title>GNUTLS_E_INSUFFICIENT_CRED</title>
<indexterm zone="GNUTLS-E-INSUFFICIENT-CRED:CAPS"><primary>GNUTLS_E_INSUFFICIENT_CRED</primary></indexterm>
<programlisting>#define GNUTLS_E_INSUFFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFFICIENT-CREDENTIALS:CAPS" role="macro">
<title>GNUTLS_E_INSUFFICIENT_CREDENTIALS</title>
<indexterm zone="GNUTLS-E-INSUFFICIENT-CREDENTIALS:CAPS"><primary>GNUTLS_E_INSUFFICIENT_CREDENTIALS</primary></indexterm>
<programlisting>#define GNUTLS_E_INSUFFICIENT_CREDENTIALS -32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFICIENT-CRED:CAPS" role="macro">
<title>GNUTLS_E_INSUFICIENT_CRED</title>
<indexterm zone="GNUTLS-E-INSUFICIENT-CRED:CAPS"><primary>GNUTLS_E_INSUFICIENT_CRED</primary></indexterm>
<programlisting>#define GNUTLS_E_INSUFICIENT_CRED GNUTLS_E_INSUFFICIENT_CREDENTIALS     /* for backwards compatibility only */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INSUFICIENT-CREDENTIALS:CAPS" role="macro">
<title>GNUTLS_E_INSUFICIENT_CREDENTIALS</title>
<indexterm zone="GNUTLS-E-INSUFICIENT-CREDENTIALS:CAPS"><primary>GNUTLS_E_INSUFICIENT_CREDENTIALS</primary></indexterm>
<programlisting>#define GNUTLS_E_INSUFICIENT_CREDENTIALS GNUTLS_E_INSUFFICIENT_CREDENTIALS      /* for backwards compatibility only */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INTERNAL-ERROR:CAPS" role="macro">
<title>GNUTLS_E_INTERNAL_ERROR</title>
<indexterm zone="GNUTLS-E-INTERNAL-ERROR:CAPS"><primary>GNUTLS_E_INTERNAL_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_INTERNAL_ERROR -59
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INTERRUPTED:CAPS" role="macro">
<title>GNUTLS_E_INTERRUPTED</title>
<indexterm zone="GNUTLS-E-INTERRUPTED:CAPS"><primary>GNUTLS_E_INTERRUPTED</primary></indexterm>
<programlisting>#define GNUTLS_E_INTERRUPTED -52
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-PASSWORD:CAPS" role="macro">
<title>GNUTLS_E_INVALID_PASSWORD</title>
<indexterm zone="GNUTLS-E-INVALID-PASSWORD:CAPS"><primary>GNUTLS_E_INVALID_PASSWORD</primary></indexterm>
<programlisting>#define GNUTLS_E_INVALID_PASSWORD -99
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-REQUEST:CAPS" role="macro">
<title>GNUTLS_E_INVALID_REQUEST</title>
<indexterm zone="GNUTLS-E-INVALID-REQUEST:CAPS"><primary>GNUTLS_E_INVALID_REQUEST</primary></indexterm>
<programlisting>#define GNUTLS_E_INVALID_REQUEST -50
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-INVALID-SESSION:CAPS" role="macro">
<title>GNUTLS_E_INVALID_SESSION</title>
<indexterm zone="GNUTLS-E-INVALID-SESSION:CAPS"><primary>GNUTLS_E_INVALID_SESSION</primary></indexterm>
<programlisting>#define GNUTLS_E_INVALID_SESSION -10
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-KEY-USAGE-VIOLATION:CAPS" role="macro">
<title>GNUTLS_E_KEY_USAGE_VIOLATION</title>
<indexterm zone="GNUTLS-E-KEY-USAGE-VIOLATION:CAPS"><primary>GNUTLS_E_KEY_USAGE_VIOLATION</primary></indexterm>
<programlisting>#define GNUTLS_E_KEY_USAGE_VIOLATION -48
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-LARGE-PACKET:CAPS" role="macro">
<title>GNUTLS_E_LARGE_PACKET</title>
<indexterm zone="GNUTLS-E-LARGE-PACKET:CAPS"><primary>GNUTLS_E_LARGE_PACKET</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_LARGE_PACKET -7
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-LOCKING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_LOCKING_ERROR</title>
<indexterm zone="GNUTLS-E-LOCKING-ERROR:CAPS"><primary>GNUTLS_E_LOCKING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_LOCKING_ERROR -306
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MAC-VERIFY-FAILED:CAPS" role="macro">
<title>GNUTLS_E_MAC_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-MAC-VERIFY-FAILED:CAPS"><primary>GNUTLS_E_MAC_VERIFY_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_MAC_VERIFY_FAILED -100 /* for PKCS #12 MAC */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MEMORY-ERROR:CAPS" role="macro">
<title>GNUTLS_E_MEMORY_ERROR</title>
<indexterm zone="GNUTLS-E-MEMORY-ERROR:CAPS"><primary>GNUTLS_E_MEMORY_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_MEMORY_ERROR -25
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MPI-PRINT-FAILED:CAPS" role="macro">
<title>GNUTLS_E_MPI_PRINT_FAILED</title>
<indexterm zone="GNUTLS-E-MPI-PRINT-FAILED:CAPS"><primary>GNUTLS_E_MPI_PRINT_FAILED</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_MPI_PRINT_FAILED -35
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-MPI-SCAN-FAILED:CAPS" role="macro">
<title>GNUTLS_E_MPI_SCAN_FAILED</title>
<indexterm zone="GNUTLS-E-MPI-SCAN-FAILED:CAPS"><primary>GNUTLS_E_MPI_SCAN_FAILED</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_MPI_SCAN_FAILED -23
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS" role="macro">
<title>GNUTLS_E_NO_CERTIFICATE_FOUND</title>
<indexterm zone="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS"><primary>GNUTLS_E_NO_CERTIFICATE_FOUND</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_CERTIFICATE_FOUND -49       /* GNUTLS_A_BAD_CERTIFICATE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-CERTIFICATE-STATUS:CAPS" role="macro">
<title>GNUTLS_E_NO_CERTIFICATE_STATUS</title>
<indexterm zone="GNUTLS-E-NO-CERTIFICATE-STATUS:CAPS"><primary>GNUTLS_E_NO_CERTIFICATE_STATUS</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_CERTIFICATE_STATUS -340
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-CIPHER-SUITES:CAPS" role="macro">
<title>GNUTLS_E_NO_CIPHER_SUITES</title>
<indexterm zone="GNUTLS-E-NO-CIPHER-SUITES:CAPS"><primary>GNUTLS_E_NO_CIPHER_SUITES</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_CIPHER_SUITES -87
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-COMPRESSION-ALGORITHMS:CAPS" role="macro">
<title>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</title>
<indexterm zone="GNUTLS-E-NO-COMPRESSION-ALGORITHMS:CAPS"><primary>GNUTLS_E_NO_COMPRESSION_ALGORITHMS</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_COMPRESSION_ALGORITHMS -86
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-PRIORITIES-WERE-SET:CAPS" role="macro">
<title>GNUTLS_E_NO_PRIORITIES_WERE_SET</title>
<indexterm zone="GNUTLS-E-NO-PRIORITIES-WERE-SET:CAPS"><primary>GNUTLS_E_NO_PRIORITIES_WERE_SET</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_PRIORITIES_WERE_SET -326
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-TEMPORARY-DH-PARAMS:CAPS" role="macro">
<title>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</title>
<indexterm zone="GNUTLS-E-NO-TEMPORARY-DH-PARAMS:CAPS"><primary>GNUTLS_E_NO_TEMPORARY_DH_PARAMS</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_TEMPORARY_DH_PARAMS -93
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS:CAPS" role="macro">
<title>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</title>
<indexterm zone="GNUTLS-E-NO-TEMPORARY-RSA-PARAMS:CAPS"><primary>GNUTLS_E_NO_TEMPORARY_RSA_PARAMS</primary></indexterm>
<programlisting>#define GNUTLS_E_NO_TEMPORARY_RSA_PARAMS -84
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OCSP-RESPONSE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_OCSP_RESPONSE_ERROR</title>
<indexterm zone="GNUTLS-E-OCSP-RESPONSE-ERROR:CAPS"><primary>GNUTLS_E_OCSP_RESPONSE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_OCSP_RESPONSE_ERROR -341
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</title>
<indexterm zone="GNUTLS-E-OPENPGP-FINGERPRINT-UNSUPPORTED:CAPS"><primary>GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_FINGERPRINT_UNSUPPORTED -94
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-GETKEY-FAILED:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_GETKEY_FAILED</title>
<indexterm zone="GNUTLS-E-OPENPGP-GETKEY-FAILED:CAPS"><primary>GNUTLS_E_OPENPGP_GETKEY_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_GETKEY_FAILED -88
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-KEYRING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_KEYRING_ERROR</title>
<indexterm zone="GNUTLS-E-OPENPGP-KEYRING-ERROR:CAPS"><primary>GNUTLS_E_OPENPGP_KEYRING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_KEYRING_ERROR -204
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-PREFERRED-KEY-ERROR:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR</title>
<indexterm zone="GNUTLS-E-OPENPGP-PREFERRED-KEY-ERROR:CAPS"><primary>GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_PREFERRED_KEY_ERROR -215
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-SUBKEY-ERROR:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_SUBKEY_ERROR</title>
<indexterm zone="GNUTLS-E-OPENPGP-SUBKEY-ERROR:CAPS"><primary>GNUTLS_E_OPENPGP_SUBKEY_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_SUBKEY_ERROR -208
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-OPENPGP-UID-REVOKED:CAPS" role="macro">
<title>GNUTLS_E_OPENPGP_UID_REVOKED</title>
<indexterm zone="GNUTLS-E-OPENPGP-UID-REVOKED:CAPS"><primary>GNUTLS_E_OPENPGP_UID_REVOKED</primary></indexterm>
<programlisting>#define GNUTLS_E_OPENPGP_UID_REVOKED -79
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PARSING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PARSING_ERROR</title>
<indexterm zone="GNUTLS-E-PARSING-ERROR:CAPS"><primary>GNUTLS_E_PARSING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PARSING_ERROR -302
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-ATTRIBUTE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_ATTRIBUTE_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-ATTRIBUTE-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_ATTRIBUTE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_ATTRIBUTE_ERROR -307
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-DATA-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_DATA_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-DATA-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_DATA_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_DATA_ERROR -309
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-DEVICE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_DEVICE_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-DEVICE-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_DEVICE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_DEVICE_ERROR -308
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_ERROR -300
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-KEY-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_KEY_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-KEY-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_KEY_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_KEY_ERROR -311
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-LOAD-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_LOAD_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-LOAD-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_LOAD_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_LOAD_ERROR -301
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-PIN-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_PIN_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-PIN-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_PIN_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_PIN_ERROR -303
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-PIN-EXPIRED:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_PIN_EXPIRED</title>
<indexterm zone="GNUTLS-E-PKCS11-PIN-EXPIRED:CAPS"><primary>GNUTLS_E_PKCS11_PIN_EXPIRED</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_PIN_EXPIRED -312
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-PIN-LOCKED:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_PIN_LOCKED</title>
<indexterm zone="GNUTLS-E-PKCS11-PIN-LOCKED:CAPS"><primary>GNUTLS_E_PKCS11_PIN_LOCKED</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_PIN_LOCKED -313
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-REQUESTED-OBJECT-NOT-AVAILBLE:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE</title>
<indexterm zone="GNUTLS-E-PKCS11-REQUESTED-OBJECT-NOT-AVAILBLE:CAPS"><primary>GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_REQUESTED_OBJECT_NOT_AVAILBLE -323
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-SESSION-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_SESSION_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-SESSION-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_SESSION_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_SESSION_ERROR -314
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-SIGNATURE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_SIGNATURE_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-SIGNATURE-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_SIGNATURE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_SIGNATURE_ERROR -315
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-SLOT-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_SLOT_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-SLOT-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_SLOT_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_SLOT_ERROR -305
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-TOKEN-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_TOKEN_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-TOKEN-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_TOKEN_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_TOKEN_ERROR -316
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-UNSUPPORTED-FEATURE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-UNSUPPORTED-FEATURE-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_UNSUPPORTED_FEATURE_ERROR -310
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS11-USER-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PKCS11_USER_ERROR</title>
<indexterm zone="GNUTLS-E-PKCS11-USER-ERROR:CAPS"><primary>GNUTLS_E_PKCS11_USER_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS11_USER_ERROR -317
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PKCS1-WRONG-PAD:CAPS" role="macro">
<title>GNUTLS_E_PKCS1_WRONG_PAD</title>
<indexterm zone="GNUTLS-E-PKCS1-WRONG-PAD:CAPS"><primary>GNUTLS_E_PKCS1_WRONG_PAD</primary></indexterm>
<programlisting>#define GNUTLS_E_PKCS1_WRONG_PAD -57
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-DECRYPTION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_PK_DECRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-PK-DECRYPTION-FAILED:CAPS"><primary>GNUTLS_E_PK_DECRYPTION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_PK_DECRYPTION_FAILED -45
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-ENCRYPTION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_PK_ENCRYPTION_FAILED</title>
<indexterm zone="GNUTLS-E-PK-ENCRYPTION-FAILED:CAPS"><primary>GNUTLS_E_PK_ENCRYPTION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_PK_ENCRYPTION_FAILED -44
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-SIGN-FAILED:CAPS" role="macro">
<title>GNUTLS_E_PK_SIGN_FAILED</title>
<indexterm zone="GNUTLS-E-PK-SIGN-FAILED:CAPS"><primary>GNUTLS_E_PK_SIGN_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_PK_SIGN_FAILED -46
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PK-SIG-VERIFY-FAILED:CAPS" role="macro">
<title>GNUTLS_E_PK_SIG_VERIFY_FAILED</title>
<indexterm zone="GNUTLS-E-PK-SIG-VERIFY-FAILED:CAPS"><primary>GNUTLS_E_PK_SIG_VERIFY_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_PK_SIG_VERIFY_FAILED -89
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PREMATURE-TERMINATION:CAPS" role="macro">
<title>GNUTLS_E_PREMATURE_TERMINATION</title>
<indexterm zone="GNUTLS-E-PREMATURE-TERMINATION:CAPS"><primary>GNUTLS_E_PREMATURE_TERMINATION</primary></indexterm>
<programlisting>#define GNUTLS_E_PREMATURE_TERMINATION -110
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PULL-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PULL_ERROR</title>
<indexterm zone="GNUTLS-E-PULL-ERROR:CAPS"><primary>GNUTLS_E_PULL_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PULL_ERROR -54
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-PUSH-ERROR:CAPS" role="macro">
<title>GNUTLS_E_PUSH_ERROR</title>
<indexterm zone="GNUTLS-E-PUSH-ERROR:CAPS"><primary>GNUTLS_E_PUSH_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_PUSH_ERROR -53
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RANDOM-FAILED:CAPS" role="macro">
<title>GNUTLS_E_RANDOM_FAILED</title>
<indexterm zone="GNUTLS-E-RANDOM-FAILED:CAPS"><primary>GNUTLS_E_RANDOM_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_RANDOM_FAILED -206
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION:CAPS" role="macro">
<title>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</title>
<indexterm zone="GNUTLS-E-RECEIVED-ILLEGAL-EXTENSION:CAPS"><primary>GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION</primary></indexterm>
<programlisting>#define GNUTLS_E_RECEIVED_ILLEGAL_EXTENSION -58
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS" role="macro">
<title>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</title>
<indexterm zone="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS"><primary>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</primary></indexterm>
<programlisting>#define GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER -55 /* GNUTLS_A_ILLEGAL_PARAMETER */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-RECORD-LIMIT-REACHED:CAPS" role="macro">
<title>GNUTLS_E_RECORD_LIMIT_REACHED</title>
<indexterm zone="GNUTLS-E-RECORD-LIMIT-REACHED:CAPS"><primary>GNUTLS_E_RECORD_LIMIT_REACHED</primary></indexterm>
<programlisting>#define GNUTLS_E_RECORD_LIMIT_REACHED -39
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-REHANDSHAKE:CAPS" role="macro">
<title>GNUTLS_E_REHANDSHAKE</title>
<indexterm zone="GNUTLS-E-REHANDSHAKE:CAPS"><primary>GNUTLS_E_REHANDSHAKE</primary></indexterm>
<programlisting>#define GNUTLS_E_REHANDSHAKE -37        /* GNUTLS_A_NO_RENEGOTIATION */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS" role="macro">
<title>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</title>
<indexterm zone="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS"><primary>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</primary></indexterm>
<programlisting>#define GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE -56
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SAFE-RENEGOTIATION-FAILED:CAPS" role="macro">
<title>GNUTLS_E_SAFE_RENEGOTIATION_FAILED</title>
<indexterm zone="GNUTLS-E-SAFE-RENEGOTIATION-FAILED:CAPS"><primary>GNUTLS_E_SAFE_RENEGOTIATION_FAILED</primary></indexterm>
<programlisting>#define GNUTLS_E_SAFE_RENEGOTIATION_FAILED -107
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SESSION-EOF:CAPS" role="macro">
<title>GNUTLS_E_SESSION_EOF</title>
<indexterm zone="GNUTLS-E-SESSION-EOF:CAPS"><primary>GNUTLS_E_SESSION_EOF</primary></indexterm>
<programlisting>#define GNUTLS_E_SESSION_EOF -328
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS" role="macro">
<title>GNUTLS_E_SHORT_MEMORY_BUFFER</title>
<indexterm zone="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><primary>GNUTLS_E_SHORT_MEMORY_BUFFER</primary></indexterm>
<programlisting>#define GNUTLS_E_SHORT_MEMORY_BUFFER -51
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SRP-PWD-ERROR:CAPS" role="macro">
<title>GNUTLS_E_SRP_PWD_ERROR</title>
<indexterm zone="GNUTLS-E-SRP-PWD-ERROR:CAPS"><primary>GNUTLS_E_SRP_PWD_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_SRP_PWD_ERROR -31
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SRP-PWD-PARSING-ERROR:CAPS" role="macro">
<title>GNUTLS_E_SRP_PWD_PARSING_ERROR</title>
<indexterm zone="GNUTLS-E-SRP-PWD-PARSING-ERROR:CAPS"><primary>GNUTLS_E_SRP_PWD_PARSING_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_SRP_PWD_PARSING_ERROR -91
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-SUCCESS:CAPS" role="macro">
<title>GNUTLS_E_SUCCESS</title>
<indexterm zone="GNUTLS-E-SUCCESS:CAPS"><primary>GNUTLS_E_SUCCESS</primary></indexterm>
<programlisting>#define GNUTLS_E_SUCCESS 0
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TIMEDOUT:CAPS" role="macro">
<title>GNUTLS_E_TIMEDOUT</title>
<indexterm zone="GNUTLS-E-TIMEDOUT:CAPS"><primary>GNUTLS_E_TIMEDOUT</primary></indexterm>
<programlisting>#define GNUTLS_E_TIMEDOUT -319
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TOO-MANY-EMPTY-PACKETS:CAPS" role="macro">
<title>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</title>
<indexterm zone="GNUTLS-E-TOO-MANY-EMPTY-PACKETS:CAPS"><primary>GNUTLS_E_TOO_MANY_EMPTY_PACKETS</primary></indexterm>
<programlisting>#define GNUTLS_E_TOO_MANY_EMPTY_PACKETS -78
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TOO-MANY-HANDSHAKE-PACKETS:CAPS" role="macro">
<title>GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS</title>
<indexterm zone="GNUTLS-E-TOO-MANY-HANDSHAKE-PACKETS:CAPS"><primary>GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS</primary></indexterm>
<programlisting>#define GNUTLS_E_TOO_MANY_HANDSHAKE_PACKETS -81
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-ERROR:CAPS" role="macro">
<title>GNUTLS_E_TPM_ERROR</title>
<indexterm zone="GNUTLS-E-TPM-ERROR:CAPS"><primary>GNUTLS_E_TPM_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_ERROR -329
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-KEY-NOT-FOUND:CAPS" role="macro">
<title>GNUTLS_E_TPM_KEY_NOT_FOUND</title>
<indexterm zone="GNUTLS-E-TPM-KEY-NOT-FOUND:CAPS"><primary>GNUTLS_E_TPM_KEY_NOT_FOUND</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_KEY_NOT_FOUND -333
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-KEY-PASSWORD-ERROR:CAPS" role="macro">
<title>GNUTLS_E_TPM_KEY_PASSWORD_ERROR</title>
<indexterm zone="GNUTLS-E-TPM-KEY-PASSWORD-ERROR:CAPS"><primary>GNUTLS_E_TPM_KEY_PASSWORD_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_KEY_PASSWORD_ERROR -330
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-SESSION-ERROR:CAPS" role="macro">
<title>GNUTLS_E_TPM_SESSION_ERROR</title>
<indexterm zone="GNUTLS-E-TPM-SESSION-ERROR:CAPS"><primary>GNUTLS_E_TPM_SESSION_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_SESSION_ERROR -332
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-SRK-PASSWORD-ERROR:CAPS" role="macro">
<title>GNUTLS_E_TPM_SRK_PASSWORD_ERROR</title>
<indexterm zone="GNUTLS-E-TPM-SRK-PASSWORD-ERROR:CAPS"><primary>GNUTLS_E_TPM_SRK_PASSWORD_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_SRK_PASSWORD_ERROR -331
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-TPM-UNINITIALIZED:CAPS" role="macro">
<title>GNUTLS_E_TPM_UNINITIALIZED</title>
<indexterm zone="GNUTLS-E-TPM-UNINITIALIZED:CAPS"><primary>GNUTLS_E_TPM_UNINITIALIZED</primary></indexterm>
<programlisting>#define GNUTLS_E_TPM_UNINITIALIZED -334
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET:CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-HANDSHAKE-PACKET:CAPS"><primary>GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET</primary></indexterm>
<programlisting>#define GNUTLS_E_UNEXPECTED_HANDSHAKE_PACKET -19
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-PACKET:CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_PACKET</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-PACKET:CAPS"><primary>GNUTLS_E_UNEXPECTED_PACKET</primary></indexterm>
<programlisting>#define GNUTLS_E_UNEXPECTED_PACKET -15  /* GNUTLS_A_UNEXPECTED_MESSAGE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNEXPECTED-PACKET-LENGTH:CAPS" role="macro">
<title>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</title>
<indexterm zone="GNUTLS-E-UNEXPECTED-PACKET-LENGTH:CAPS"><primary>GNUTLS_E_UNEXPECTED_PACKET_LENGTH</primary></indexterm>
<programlisting>#define GNUTLS_E_UNEXPECTED_PACKET_LENGTH -9    /* GNUTLS_A_RECORD_OVERFLOW */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS" role="macro">
<title>GNUTLS_E_UNIMPLEMENTED_FEATURE</title>
<indexterm zone="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS"><primary>GNUTLS_E_UNIMPLEMENTED_FEATURE</primary></indexterm>
<programlisting>#define GNUTLS_E_UNIMPLEMENTED_FEATURE -1250
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-ALGORITHM:CAPS"><primary>GNUTLS_E_UNKNOWN_ALGORITHM</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_ALGORITHM -105
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-CIPHER-SUITE:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_CIPHER_SUITE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-CIPHER-SUITE:CAPS"><primary>GNUTLS_E_UNKNOWN_CIPHER_SUITE</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_UNKNOWN_CIPHER_SUITE -21       /* GNUTLS_A_HANDSHAKE_FAILURE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-CIPHER-TYPE:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_CIPHER_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-CIPHER-TYPE:CAPS"><primary>GNUTLS_E_UNKNOWN_CIPHER_TYPE</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_UNKNOWN_CIPHER_TYPE -6
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-COMPRESSION-ALGORITHM:CAPS"><primary>GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_UNKNOWN_COMPRESSION_ALGORITHM -3
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-HASH-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-HASH-ALGORITHM:CAPS"><primary>GNUTLS_E_UNKNOWN_HASH_ALGORITHM</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_HASH_ALGORITHM -96
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PKCS-BAG-TYPE:CAPS"><primary>GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_PKCS_BAG_TYPE -98
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PKCS-CONTENT-TYPE:CAPS"><primary>GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_PKCS_CONTENT_TYPE -97
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-PK-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_PK_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNKNOWN-PK-ALGORITHM:CAPS"><primary>GNUTLS_E_UNKNOWN_PK_ALGORITHM</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_PK_ALGORITHM -80
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNKNOWN-SRP-USERNAME:CAPS" role="macro">
<title>GNUTLS_E_UNKNOWN_SRP_USERNAME</title>
<indexterm zone="GNUTLS-E-UNKNOWN-SRP-USERNAME:CAPS"><primary>GNUTLS_E_UNKNOWN_SRP_USERNAME</primary></indexterm>
<programlisting>#define GNUTLS_E_UNKNOWN_SRP_USERNAME -109
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSAFE-RENEGOTIATION-DENIED:CAPS" role="macro">
<title>GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED</title>
<indexterm zone="GNUTLS-E-UNSAFE-RENEGOTIATION-DENIED:CAPS"><primary>GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED</primary></indexterm>
<programlisting>#define GNUTLS_E_UNSAFE_RENEGOTIATION_DENIED -108
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE:CAPS" role="macro">
<title>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</title>
<indexterm zone="GNUTLS-E-UNSUPPORTED-CERTIFICATE-TYPE:CAPS"><primary>GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE</primary></indexterm>
<programlisting>#define GNUTLS_E_UNSUPPORTED_CERTIFICATE_TYPE -61       /* GNUTLS_A_UNSUPPORTED_CERTIFICATE */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSUPPORTED-SIGNATURE-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNSUPPORTED-SIGNATURE-ALGORITHM:CAPS"><primary>GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM</primary></indexterm>
<programlisting>#define GNUTLS_E_UNSUPPORTED_SIGNATURE_ALGORITHM -106
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNSUPPORTED-VERSION-PACKET:CAPS" role="macro">
<title>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</title>
<indexterm zone="GNUTLS-E-UNSUPPORTED-VERSION-PACKET:CAPS"><primary>GNUTLS_E_UNSUPPORTED_VERSION_PACKET</primary></indexterm>
<programlisting>#define GNUTLS_E_UNSUPPORTED_VERSION_PACKET -8  /* GNUTLS_A_PROTOCOL_VERSION */
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-UNWANTED-ALGORITHM:CAPS" role="macro">
<title>GNUTLS_E_UNWANTED_ALGORITHM</title>
<indexterm zone="GNUTLS-E-UNWANTED-ALGORITHM:CAPS"><primary>GNUTLS_E_UNWANTED_ALGORITHM</primary></indexterm>
<programlisting>#define&#160;GNUTLS_E_UNWANTED_ALGORITHM -22
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-USER-ERROR:CAPS" role="macro">
<title>GNUTLS_E_USER_ERROR</title>
<indexterm zone="GNUTLS-E-USER-ERROR:CAPS"><primary>GNUTLS_E_USER_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_USER_ERROR -320
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_WARNING_ALERT_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><primary>GNUTLS_E_WARNING_ALERT_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_WARNING_ALERT_RECEIVED -16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-IA-FPHF-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-IA-FPHF-RECEIVED:CAPS"><primary>GNUTLS_E_WARNING_IA_FPHF_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_WARNING_IA_FPHF_RECEIVED -103
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-WARNING-IA-IPHF-RECEIVED:CAPS" role="macro">
<title>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</title>
<indexterm zone="GNUTLS-E-WARNING-IA-IPHF-RECEIVED:CAPS"><primary>GNUTLS_E_WARNING_IA_IPHF_RECEIVED</primary></indexterm>
<programlisting>#define GNUTLS_E_WARNING_IA_IPHF_RECEIVED -102
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-CERTIFICATE-ERROR:CAPS" role="macro">
<title>GNUTLS_E_X509_CERTIFICATE_ERROR</title>
<indexterm zone="GNUTLS-E-X509-CERTIFICATE-ERROR:CAPS"><primary>GNUTLS_E_X509_CERTIFICATE_ERROR</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_CERTIFICATE_ERROR GNUTLS_E_CERTIFICATE_ERROR
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNKNOWN-SAN:CAPS" role="macro">
<title>GNUTLS_E_X509_UNKNOWN_SAN</title>
<indexterm zone="GNUTLS-E-X509-UNKNOWN-SAN:CAPS"><primary>GNUTLS_E_X509_UNKNOWN_SAN</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_UNKNOWN_SAN -62
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE:CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-ATTRIBUTE:CAPS"><primary>GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_UNSUPPORTED_ATTRIBUTE -95
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION:CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-CRITICAL-EXTENSION:CAPS"><primary>GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_UNSUPPORTED_CRITICAL_EXTENSION -47
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-EXTENSION:CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_EXTENSION</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-EXTENSION:CAPS"><primary>GNUTLS_E_X509_UNSUPPORTED_EXTENSION</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_UNSUPPORTED_EXTENSION -327
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-E-X509-UNSUPPORTED-OID:CAPS" role="macro">
<title>GNUTLS_E_X509_UNSUPPORTED_OID</title>
<indexterm zone="GNUTLS-E-X509-UNSUPPORTED-OID:CAPS"><primary>GNUTLS_E_X509_UNSUPPORTED_OID</primary></indexterm>
<programlisting>#define GNUTLS_E_X509_UNSUPPORTED_OID -205
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-HB-LOCAL-ALLOWED-TO-SEND:CAPS" role="macro">
<title>GNUTLS_HB_LOCAL_ALLOWED_TO_SEND</title>
<indexterm zone="GNUTLS-HB-LOCAL-ALLOWED-TO-SEND:CAPS"><primary>GNUTLS_HB_LOCAL_ALLOWED_TO_SEND</primary></indexterm>
<programlisting>#define GNUTLS_HB_LOCAL_ALLOWED_TO_SEND (1&lt;&lt;2)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-HB-PEER-ALLOWED-TO-SEND:CAPS" role="macro">
<title>GNUTLS_HB_PEER_ALLOWED_TO_SEND</title>
<indexterm zone="GNUTLS-HB-PEER-ALLOWED-TO-SEND:CAPS"><primary>GNUTLS_HB_PEER_ALLOWED_TO_SEND</primary></indexterm>
<programlisting>#define GNUTLS_HB_PEER_ALLOWED_TO_SEND (1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-HB-PEER-NOT-ALLOWED-TO-SEND:CAPS" role="macro">
<title>GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND</title>
<indexterm zone="GNUTLS-HB-PEER-NOT-ALLOWED-TO-SEND:CAPS"><primary>GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND</primary></indexterm>
<programlisting>#define GNUTLS_HB_PEER_NOT_ALLOWED_TO_SEND (1&lt;&lt;1)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-HEARTBEAT-WAIT:CAPS" role="macro">
<title>GNUTLS_HEARTBEAT_WAIT</title>
<indexterm zone="GNUTLS-HEARTBEAT-WAIT:CAPS"><primary>GNUTLS_HEARTBEAT_WAIT</primary></indexterm>
<programlisting>#define GNUTLS_HEARTBEAT_WAIT 1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-CRL-SIGN:CAPS" role="macro">
<title>GNUTLS_KEY_CRL_SIGN</title>
<indexterm zone="GNUTLS-KEY-CRL-SIGN:CAPS"><primary>GNUTLS_KEY_CRL_SIGN</primary></indexterm>
<programlisting>#define GNUTLS_KEY_CRL_SIGN		2
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-DATA-ENCIPHERMENT:CAPS" role="macro">
<title>GNUTLS_KEY_DATA_ENCIPHERMENT</title>
<indexterm zone="GNUTLS-KEY-DATA-ENCIPHERMENT:CAPS"><primary>GNUTLS_KEY_DATA_ENCIPHERMENT</primary></indexterm>
<programlisting>#define GNUTLS_KEY_DATA_ENCIPHERMENT&#160;16
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-DECIPHER-ONLY:CAPS" role="macro">
<title>GNUTLS_KEY_DECIPHER_ONLY</title>
<indexterm zone="GNUTLS-KEY-DECIPHER-ONLY:CAPS"><primary>GNUTLS_KEY_DECIPHER_ONLY</primary></indexterm>
<programlisting>#define GNUTLS_KEY_DECIPHER_ONLY&#160;32768
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-DIGITAL-SIGNATURE:CAPS" role="macro">
<title>GNUTLS_KEY_DIGITAL_SIGNATURE</title>
<indexterm zone="GNUTLS-KEY-DIGITAL-SIGNATURE:CAPS"><primary>GNUTLS_KEY_DIGITAL_SIGNATURE</primary></indexterm>
<programlisting>#define GNUTLS_KEY_DIGITAL_SIGNATURE&#160;128
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-ENCIPHER-ONLY:CAPS" role="macro">
<title>GNUTLS_KEY_ENCIPHER_ONLY</title>
<indexterm zone="GNUTLS-KEY-ENCIPHER-ONLY:CAPS"><primary>GNUTLS_KEY_ENCIPHER_ONLY</primary></indexterm>
<programlisting>#define GNUTLS_KEY_ENCIPHER_ONLY&#160;1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-AGREEMENT:CAPS" role="macro">
<title>GNUTLS_KEY_KEY_AGREEMENT</title>
<indexterm zone="GNUTLS-KEY-KEY-AGREEMENT:CAPS"><primary>GNUTLS_KEY_KEY_AGREEMENT</primary></indexterm>
<programlisting>#define GNUTLS_KEY_KEY_AGREEMENT&#160;8
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-CERT-SIGN:CAPS" role="macro">
<title>GNUTLS_KEY_KEY_CERT_SIGN</title>
<indexterm zone="GNUTLS-KEY-KEY-CERT-SIGN:CAPS"><primary>GNUTLS_KEY_KEY_CERT_SIGN</primary></indexterm>
<programlisting>#define GNUTLS_KEY_KEY_CERT_SIGN&#160;4
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-KEY-ENCIPHERMENT:CAPS" role="macro">
<title>GNUTLS_KEY_KEY_ENCIPHERMENT</title>
<indexterm zone="GNUTLS-KEY-KEY-ENCIPHERMENT:CAPS"><primary>GNUTLS_KEY_KEY_ENCIPHERMENT</primary></indexterm>
<programlisting>#define GNUTLS_KEY_KEY_ENCIPHERMENT&#160;32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-KEY-NON-REPUDIATION:CAPS" role="macro">
<title>GNUTLS_KEY_NON_REPUDIATION</title>
<indexterm zone="GNUTLS-KEY-NON-REPUDIATION:CAPS"><primary>GNUTLS_KEY_NON_REPUDIATION</primary></indexterm>
<programlisting>#define GNUTLS_KEY_NON_REPUDIATION&#160;64
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-MAC-SHA:CAPS" role="macro">
<title>GNUTLS_MAC_SHA</title>
<indexterm zone="GNUTLS-MAC-SHA:CAPS"><primary>GNUTLS_MAC_SHA</primary></indexterm>
<programlisting>#define GNUTLS_MAC_SHA GNUTLS_MAC_SHA1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-MAX-ALGORITHM-NUM:CAPS" role="macro">
<title>GNUTLS_MAX_ALGORITHM_NUM</title>
<indexterm zone="GNUTLS-MAX-ALGORITHM-NUM:CAPS"><primary>GNUTLS_MAX_ALGORITHM_NUM</primary></indexterm>
<programlisting>#define GNUTLS_MAX_ALGORITHM_NUM 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-MAX-SESSION-ID:CAPS" role="macro">
<title>GNUTLS_MAX_SESSION_ID</title>
<indexterm zone="GNUTLS-MAX-SESSION-ID:CAPS"><primary>GNUTLS_MAX_SESSION_ID</primary></indexterm>
<programlisting>#define GNUTLS_MAX_SESSION_ID 32
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-NONBLOCK:CAPS" role="macro">
<title>GNUTLS_NONBLOCK</title>
<indexterm zone="GNUTLS-NONBLOCK:CAPS"><primary>GNUTLS_NONBLOCK</primary></indexterm>
<programlisting>#define GNUTLS_NONBLOCK (1&lt;&lt;3)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-NO-EXTENSIONS:CAPS" role="macro">
<title>GNUTLS_NO_EXTENSIONS</title>
<indexterm zone="GNUTLS-NO-EXTENSIONS:CAPS"><primary>GNUTLS_NO_EXTENSIONS</primary></indexterm>
<programlisting>#define GNUTLS_NO_EXTENSIONS (1&lt;&lt;4)
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-CONTEXT-SPECIFIC:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC</title>
<indexterm zone="GNUTLS-PKCS11-PIN-CONTEXT-SPECIFIC:CAPS"><primary>GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_CONTEXT_SPECIFIC GNUTLS_PIN_CONTEXT_SPECIFIC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-COUNT-LOW:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_COUNT_LOW</title>
<indexterm zone="GNUTLS-PKCS11-PIN-COUNT-LOW:CAPS"><primary>GNUTLS_PKCS11_PIN_COUNT_LOW</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_COUNT_LOW  GNUTLS_PIN_COUNT_LOW
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-FINAL-TRY:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_FINAL_TRY</title>
<indexterm zone="GNUTLS-PKCS11-PIN-FINAL-TRY:CAPS"><primary>GNUTLS_PKCS11_PIN_FINAL_TRY</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_FINAL_TRY GNUTLS_PIN_FINAL_TRY
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-SO:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_SO</title>
<indexterm zone="GNUTLS-PKCS11-PIN-SO:CAPS"><primary>GNUTLS_PKCS11_PIN_SO</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_SO GNUTLS_PIN_SO
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-USER:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_USER</title>
<indexterm zone="GNUTLS-PKCS11-PIN-USER:CAPS"><primary>GNUTLS_PKCS11_PIN_USER</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_USER GNUTLS_PIN_USER
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PKCS11-PIN-WRONG:CAPS" role="macro">
<title>GNUTLS_PKCS11_PIN_WRONG</title>
<indexterm zone="GNUTLS-PKCS11-PIN-WRONG:CAPS"><primary>GNUTLS_PKCS11_PIN_WRONG</primary></indexterm>
<programlisting>#define GNUTLS_PKCS11_PIN_WRONG GNUTLS_PIN_WRONG
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-PK-ECC:CAPS" role="macro">
<title>GNUTLS_PK_ECC</title>
<indexterm zone="GNUTLS-PK-ECC:CAPS"><primary>GNUTLS_PK_ECC</primary></indexterm>
<programlisting>#define GNUTLS_PK_ECC GNUTLS_PK_EC
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-SERVER:CAPS" role="macro">
<title>GNUTLS_SERVER</title>
<indexterm zone="GNUTLS-SERVER:CAPS"><primary>GNUTLS_SERVER</primary></indexterm>
<programlisting>#define GNUTLS_SERVER 1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION:CAPS" role="macro">
<title>GNUTLS_VERSION</title>
<indexterm zone="GNUTLS-VERSION:CAPS"><primary>GNUTLS_VERSION</primary></indexterm>
<programlisting>#define GNUTLS_VERSION "3.1.5"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-MAJOR:CAPS" role="macro">
<title>GNUTLS_VERSION_MAJOR</title>
<indexterm zone="GNUTLS-VERSION-MAJOR:CAPS"><primary>GNUTLS_VERSION_MAJOR</primary></indexterm>
<programlisting>#define GNUTLS_VERSION_MAJOR 3
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-MINOR:CAPS" role="macro">
<title>GNUTLS_VERSION_MINOR</title>
<indexterm zone="GNUTLS-VERSION-MINOR:CAPS"><primary>GNUTLS_VERSION_MINOR</primary></indexterm>
<programlisting>#define GNUTLS_VERSION_MINOR 1
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-NUMBER:CAPS" role="macro">
<title>GNUTLS_VERSION_NUMBER</title>
<indexterm zone="GNUTLS-VERSION-NUMBER:CAPS"><primary>GNUTLS_VERSION_NUMBER</primary></indexterm>
<programlisting>#define GNUTLS_VERSION_NUMBER 0x030105
</programlisting>
<para>
</para></refsect2>
<refsect2 id="GNUTLS-VERSION-PATCH:CAPS" role="macro">
<title>GNUTLS_VERSION_PATCH</title>
<indexterm zone="GNUTLS-VERSION-PATCH:CAPS"><primary>GNUTLS_VERSION_PATCH</primary></indexterm>
<programlisting>#define GNUTLS_VERSION_PATCH 5
</programlisting>
<para>
</para></refsect2>
<refsect2 id="HAVE-SSIZE-T:CAPS" role="macro">
<title>HAVE_SSIZE_T</title>
<indexterm zone="HAVE-SSIZE-T:CAPS"><primary>HAVE_SSIZE_T</primary></indexterm>
<programlisting>#define             HAVE_SSIZE_T</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-alert-description-t" role="enum">
<title>enum gnutls_alert_description_t</title>
<indexterm zone="gnutls-alert-description-t"><primary>gnutls_alert_description_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_A_CLOSE_NOTIFY,
    GNUTLS_A_UNEXPECTED_MESSAGE = 10,
    GNUTLS_A_BAD_RECORD_MAC = 20,
    GNUTLS_A_DECRYPTION_FAILED,
    GNUTLS_A_RECORD_OVERFLOW,
    GNUTLS_A_DECOMPRESSION_FAILURE = 30,
    GNUTLS_A_HANDSHAKE_FAILURE = 40,
    GNUTLS_A_SSL3_NO_CERTIFICATE = 41,
    GNUTLS_A_BAD_CERTIFICATE = 42,
    GNUTLS_A_UNSUPPORTED_CERTIFICATE,
    GNUTLS_A_CERTIFICATE_REVOKED,
    GNUTLS_A_CERTIFICATE_EXPIRED,
    GNUTLS_A_CERTIFICATE_UNKNOWN,
    GNUTLS_A_ILLEGAL_PARAMETER,
    GNUTLS_A_UNKNOWN_CA,
    GNUTLS_A_ACCESS_DENIED,
    GNUTLS_A_DECODE_ERROR = 50,
    GNUTLS_A_DECRYPT_ERROR,
    GNUTLS_A_EXPORT_RESTRICTION = 60,
    GNUTLS_A_PROTOCOL_VERSION = 70,
    GNUTLS_A_INSUFFICIENT_SECURITY,
    GNUTLS_A_INTERNAL_ERROR = 80,
    GNUTLS_A_USER_CANCELED = 90,
    GNUTLS_A_NO_RENEGOTIATION = 100,
    GNUTLS_A_UNSUPPORTED_EXTENSION = 110,
    GNUTLS_A_CERTIFICATE_UNOBTAINABLE = 111,
    GNUTLS_A_UNRECOGNIZED_NAME = 112,
    GNUTLS_A_UNKNOWN_PSK_IDENTITY = 115,
} gnutls_alert_description_t;
</programlisting>
<para>
Enumeration of different TLS alerts.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-A-CLOSE-NOTIFY:CAPS" role="constant">
<term><literal>GNUTLS_A_CLOSE_NOTIFY</literal></term>
<listitem><simpara>Close notify.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNEXPECTED-MESSAGE:CAPS" role="constant">
<term><literal>GNUTLS_A_UNEXPECTED_MESSAGE</literal></term>
<listitem><simpara>Unexpected message.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-BAD-RECORD-MAC:CAPS" role="constant">
<term><literal>GNUTLS_A_BAD_RECORD_MAC</literal></term>
<listitem><simpara>Bad record MAC.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-DECRYPTION-FAILED:CAPS" role="constant">
<term><literal>GNUTLS_A_DECRYPTION_FAILED</literal></term>
<listitem><simpara>Decryption failed.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-RECORD-OVERFLOW:CAPS" role="constant">
<term><literal>GNUTLS_A_RECORD_OVERFLOW</literal></term>
<listitem><simpara>Record overflow.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-DECOMPRESSION-FAILURE:CAPS" role="constant">
<term><literal>GNUTLS_A_DECOMPRESSION_FAILURE</literal></term>
<listitem><simpara>Decompression failed.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-HANDSHAKE-FAILURE:CAPS" role="constant">
<term><literal>GNUTLS_A_HANDSHAKE_FAILURE</literal></term>
<listitem><simpara>Handshake failed.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-SSL3-NO-CERTIFICATE:CAPS" role="constant">
<term><literal>GNUTLS_A_SSL3_NO_CERTIFICATE</literal></term>
<listitem><simpara>No certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-BAD-CERTIFICATE:CAPS" role="constant">
<term><literal>GNUTLS_A_BAD_CERTIFICATE</literal></term>
<listitem><simpara>Certificate is bad.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNSUPPORTED-CERTIFICATE:CAPS" role="constant">
<term><literal>GNUTLS_A_UNSUPPORTED_CERTIFICATE</literal></term>
<listitem><simpara>Certificate is not supported.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-CERTIFICATE-REVOKED:CAPS" role="constant">
<term><literal>GNUTLS_A_CERTIFICATE_REVOKED</literal></term>
<listitem><simpara>Certificate was revoked.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-CERTIFICATE-EXPIRED:CAPS" role="constant">
<term><literal>GNUTLS_A_CERTIFICATE_EXPIRED</literal></term>
<listitem><simpara>Certificate is expired.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-CERTIFICATE-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_A_CERTIFICATE_UNKNOWN</literal></term>
<listitem><simpara>Unknown certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-ILLEGAL-PARAMETER:CAPS" role="constant">
<term><literal>GNUTLS_A_ILLEGAL_PARAMETER</literal></term>
<listitem><simpara>Illegal parameter.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNKNOWN-CA:CAPS" role="constant">
<term><literal>GNUTLS_A_UNKNOWN_CA</literal></term>
<listitem><simpara>CA is unknown.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-ACCESS-DENIED:CAPS" role="constant">
<term><literal>GNUTLS_A_ACCESS_DENIED</literal></term>
<listitem><simpara>Access was denied.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-DECODE-ERROR:CAPS" role="constant">
<term><literal>GNUTLS_A_DECODE_ERROR</literal></term>
<listitem><simpara>Decode error.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-DECRYPT-ERROR:CAPS" role="constant">
<term><literal>GNUTLS_A_DECRYPT_ERROR</literal></term>
<listitem><simpara>Decrypt error.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-EXPORT-RESTRICTION:CAPS" role="constant">
<term><literal>GNUTLS_A_EXPORT_RESTRICTION</literal></term>
<listitem><simpara>Export restriction.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-PROTOCOL-VERSION:CAPS" role="constant">
<term><literal>GNUTLS_A_PROTOCOL_VERSION</literal></term>
<listitem><simpara>Error in protocol version.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-INSUFFICIENT-SECURITY:CAPS" role="constant">
<term><literal>GNUTLS_A_INSUFFICIENT_SECURITY</literal></term>
<listitem><simpara>Insufficient security.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-INTERNAL-ERROR:CAPS" role="constant">
<term><literal>GNUTLS_A_INTERNAL_ERROR</literal></term>
<listitem><simpara>Internal error.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-USER-CANCELED:CAPS" role="constant">
<term><literal>GNUTLS_A_USER_CANCELED</literal></term>
<listitem><simpara>User canceled.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-NO-RENEGOTIATION:CAPS" role="constant">
<term><literal>GNUTLS_A_NO_RENEGOTIATION</literal></term>
<listitem><simpara>No renegotiation is allowed.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNSUPPORTED-EXTENSION:CAPS" role="constant">
<term><literal>GNUTLS_A_UNSUPPORTED_EXTENSION</literal></term>
<listitem><simpara>An unsupported extension was
  sent.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-CERTIFICATE-UNOBTAINABLE:CAPS" role="constant">
<term><literal>GNUTLS_A_CERTIFICATE_UNOBTAINABLE</literal></term>
<listitem><simpara>Could not retrieve the
  specified certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNRECOGNIZED-NAME:CAPS" role="constant">
<term><literal>GNUTLS_A_UNRECOGNIZED_NAME</literal></term>
<listitem><simpara>The server name sent was not
  recognized.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-A-UNKNOWN-PSK-IDENTITY:CAPS" role="constant">
<term><literal>GNUTLS_A_UNKNOWN_PSK_IDENTITY</literal></term>
<listitem><simpara>The SRP/PSK username is missing
  or not known.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-get" role="function">
<title>gnutls_alert_get ()</title>
<indexterm zone="gnutls-alert-get"><primary>gnutls_alert_get</primary></indexterm>
<programlisting><link linkend="gnutls-alert-description-t"><returnvalue>gnutls_alert_description_t</returnvalue></link> gnutls_alert_get             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will return the last alert number received.  This
function should be called when <link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> or
<link linkend="GNUTLS-E-FATAL-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_FATAL_ALERT_RECEIVED</literal></link> errors are returned by a gnutls
function.  The peer may send alerts if he encounters an error.
If no alert has been received the returned value is undefined.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the last alert received, a
<link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-get-name" role="function">
<title>gnutls_alert_get_name ()</title>
<indexterm zone="gnutls-alert-get-name"><primary>gnutls_alert_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_alert_get_name               (<parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> alert</parameter>);</programlisting>
<para>
This function will return a string that describes the given alert
number, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.  See <link linkend="gnutls-alert-get"><function>gnutls_alert_get()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara>is an alert number.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>string corresponding to <link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-get-strname" role="function" condition="since:3.0">
<title>gnutls_alert_get_strname ()</title>
<indexterm zone="gnutls-alert-get-strname" role="3.0"><primary>gnutls_alert_get_strname</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_alert_get_strname            (<parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> alert</parameter>);</programlisting>
<para>
This function will return a string of the name of the alert.
</para><variablelist role="params">
<varlistentry><term><parameter>alert</parameter>&#160;:</term>
<listitem><simpara>is an alert number.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>string corresponding to <link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-alert-level-t" role="enum">
<title>enum gnutls_alert_level_t</title>
<indexterm zone="gnutls-alert-level-t"><primary>gnutls_alert_level_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_AL_WARNING = 1,
    GNUTLS_AL_FATAL
} gnutls_alert_level_t;
</programlisting>
<para>
Enumeration of different TLS alert severities.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-AL-WARNING:CAPS" role="constant">
<term><literal>GNUTLS_AL_WARNING</literal></term>
<listitem><simpara>Alert of warning severity.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-AL-FATAL:CAPS" role="constant">
<term><literal>GNUTLS_AL_FATAL</literal></term>
<listitem><simpara>Alert of fatal severity.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-send" role="function">
<title>gnutls_alert_send ()</title>
<indexterm zone="gnutls-alert-send"><primary>gnutls_alert_send</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_alert_send                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-alert-level-t"><type>gnutls_alert_level_t</type></link> level</parameter>,
                                                         <parameter><link linkend="gnutls-alert-description-t"><type>gnutls_alert_description_t</type></link> desc</parameter>);</programlisting>
<para>
This function will send an alert to the peer in order to inform
him of something important (eg. his Certificate could not be verified).
If the alert level is Fatal then the peer is expected to close the
connection, otherwise he may ignore the alert and continue.
</para>
<para>
The error code of the underlying record send function will be
returned, so you may also receive <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or
<link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> as well.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>is the level of the alert</simpara></listitem></varlistentry>
<varlistentry><term><parameter>desc</parameter>&#160;:</term>
<listitem><simpara>is the alert description</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alert-send-appropriate" role="function">
<title>gnutls_alert_send_appropriate ()</title>
<indexterm zone="gnutls-alert-send-appropriate"><primary>gnutls_alert_send_appropriate</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_alert_send_appropriate       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> err</parameter>);</programlisting>
<para>
Sends an alert to the peer depending on the error code returned by
a gnutls function. This function will call <link linkend="gnutls-error-to-alert"><function>gnutls_error_to_alert()</function></link>
to determine the appropriate alert to send.
</para>
<para>
This function may also return <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link>, or
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link>.
</para>
<para>
If the return value is <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link>, then no alert has
been sent to the peer.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara>is an integer</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-alloc-function" role="function">
<title>gnutls_alloc_function ()</title>
<indexterm zone="gnutls-alloc-function"><primary>gnutls_alloc_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              (*gnutls_alloc_function)            (<parameter><link linkend="size-t"><type>size_t</type></link> Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-anon-allocate-client-credentials" role="function">
<title>gnutls_anon_allocate_client_credentials ()</title>
<indexterm zone="gnutls-anon-allocate-client-credentials"><primary>gnutls_anon_allocate_client_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_anon_allocate_client_credentials
                                                        (<parameter><link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-allocate-server-credentials" role="function">
<title>gnutls_anon_allocate_server_credentials ()</title>
<indexterm zone="gnutls-anon-allocate-server-credentials"><primary>gnutls_anon_allocate_server_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_anon_allocate_server_credentials
                                                        (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-free-client-credentials" role="function">
<title>gnutls_anon_free_client_credentials ()</title>
<indexterm zone="gnutls-anon-free-client-credentials"><primary>gnutls_anon_free_client_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_anon_free_client_credentials (<parameter><link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-free-server-credentials" role="function">
<title>gnutls_anon_free_server_credentials ()</title>
<indexterm zone="gnutls-anon-free-server-credentials"><primary>gnutls_anon_free_server_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_anon_free_server_credentials (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-params-function" role="function">
<title>gnutls_anon_set_params_function ()</title>
<indexterm zone="gnutls-anon-set-params-function"><primary>gnutls_anon_set_params_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_anon_set_params_function     (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for anonymous authentication.
The callback should return <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_anon_server_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-server-dh-params" role="function">
<title>gnutls_anon_set_server_dh_params ()</title>
<indexterm zone="gnutls-anon-set-server-dh-params"><primary>gnutls_anon_set_server_dh_params</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_anon_set_server_dh_params    (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for an
anonymous server to use.  These parameters will be used in
Anonymous Diffie-Hellman cipher suites.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_anon_server_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>is a structure that holds Diffie-Hellman parameters.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-anon-set-server-params-function" role="function">
<title>gnutls_anon_set_server_params_function ()</title>
<indexterm zone="gnutls-anon-set-server-params-function"><primary>gnutls_anon_set_server_params_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_anon_set_server_params_function
                                                        (<parameter><link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman parameters for anonymous authentication.  The
callback should return <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_certificate_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-audit-log-func" role="function">
<title>gnutls_audit_log_func ()</title>
<indexterm zone="gnutls-audit-log-func"><primary>gnutls_audit_log_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*gnutls_audit_log_func)            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *Param2</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-bye" role="function">
<title>gnutls_bye ()</title>
<indexterm zone="gnutls-bye"><primary>gnutls_bye</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_bye                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-close-request-t"><type>gnutls_close_request_t</type></link> how</parameter>);</programlisting>
<para>
Terminates the current TLS/SSL connection. The connection should
have been initiated using <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.  <parameter>how</parameter> should be one
of <link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link>, <link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link>.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> the TLS session gets
terminated and further receives and sends will be disallowed.  If
the return value is zero you may continue using the underlying
transport layer. <link linkend="GNUTLS-SHUT-RDWR:CAPS"><literal>GNUTLS_SHUT_RDWR</literal></link> sends an alert containing a close
request and waits for the peer to reply with the same message.
</para>
<para>
In case of <link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link> the TLS session gets terminated
and further sends will be disallowed. In order to reuse the
connection you should wait for an EOF from the peer.
<link linkend="GNUTLS-SHUT-WR:CAPS"><literal>GNUTLS_SHUT_WR</literal></link> sends an alert containing a close request.
</para>
<para>
Note that not all implementations will properly terminate a TLS
connection.  Some of them, usually for performance reasons, will
terminate only the underlying transport layer, and thus not
distinguishing between a malicious party prematurely terminating 
the connection and normal termination. 
</para>
<para>
This function may also return <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> or
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link>; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>how</parameter>&#160;:</term>
<listitem><simpara>is an integer</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code, see
function documentation for entire semantics.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-calloc" role="variable">
<title>gnutls_calloc</title>
<indexterm zone="gnutls-calloc"><primary>gnutls_calloc</primary></indexterm>
<programlisting>  extern gnutls_calloc_function gnutls_calloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-calloc-function" role="function">
<title>gnutls_calloc_function ()</title>
<indexterm zone="gnutls-calloc-function"><primary>gnutls_calloc_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              (*gnutls_calloc_function)           (<parameter><link linkend="size-t"><type>size_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param2</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-activation-time-peers" role="function" condition="deprecated:gnutls_certificate_verify_peers2() now verifies activation times.">
<title>gnutls_certificate_activation_time_peers ()</title>
<indexterm zone="gnutls-certificate-activation-time-peers" role="deprecated"><primary>gnutls_certificate_activation_time_peers</primary></indexterm>
<programlisting><link linkend="time-t"><returnvalue>time_t</returnvalue></link>              gnutls_certificate_activation_time_peers
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<warning><para><literal>gnutls_certificate_activation_time_peers</literal> is deprecated and should not be used in newly-written code. <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> now verifies activation times.</para></warning>
<para>
This function will return the peer's certificate activation time.
This is the creation time for openpgp keys.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>(time_t)-1 on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-allocate-credentials" role="function">
<title>gnutls_certificate_allocate_credentials ()</title>
<indexterm zone="gnutls-certificate-allocate-credentials"><primary>gnutls_certificate_allocate_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_allocate_credentials
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> *res</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-client-get-request-status" role="function">
<title>gnutls_certificate_client_get_request_status ()</title>
<indexterm zone="gnutls-certificate-client-get-request-status"><primary>gnutls_certificate_client_get_request_status</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_client_get_request_status
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get whether client certificate is requested or not.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 if the peer (server) did not request client
authentication or 1 otherwise, or a negative error code in case of
error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-credentials-st" role="struct">
<title>struct gnutls_certificate_credentials_st</title>
<indexterm zone="gnutls-certificate-credentials-st"><primary>gnutls_certificate_credentials_st</primary></indexterm>
<programlisting>struct gnutls_certificate_credentials_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-expiration-time-peers" role="function" condition="deprecated:gnutls_certificate_verify_peers2() now verifies expiration times.">
<title>gnutls_certificate_expiration_time_peers ()</title>
<indexterm zone="gnutls-certificate-expiration-time-peers" role="deprecated"><primary>gnutls_certificate_expiration_time_peers</primary></indexterm>
<programlisting><link linkend="time-t"><returnvalue>time_t</returnvalue></link>              gnutls_certificate_expiration_time_peers
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<warning><para><literal>gnutls_certificate_expiration_time_peers</literal> is deprecated and should not be used in newly-written code. <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> now verifies expiration times.</para></warning>
<para>
This function will return the peer's certificate expiration time.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>(time_t)-1 on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-ca-names" role="function">
<title>gnutls_certificate_free_ca_names ()</title>
<indexterm zone="gnutls-certificate-free-ca-names"><primary>gnutls_certificate_free_ca_names</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_free_ca_names    (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This function will delete all the CA name in the given
credentials. Clients may call this to save some memory since in
client side the CA names are not used. Servers might want to use
this function if a large list of trusted CAs is present and
sending the names of it would just consume bandwidth without providing 
information to client.
</para>
<para>
CA names are used by servers to advertise the CAs they support to
clients.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-cas" role="function">
<title>gnutls_certificate_free_cas ()</title>
<indexterm zone="gnutls-certificate-free-cas"><primary>gnutls_certificate_free_cas</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_free_cas         (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This function will delete all the CAs associated with the given
credentials. Servers that do not use
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link> may call this to save some
memory.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-credentials" role="function">
<title>gnutls_certificate_free_credentials ()</title>
<indexterm zone="gnutls-certificate-free-credentials"><primary>gnutls_certificate_free_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_free_credentials (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.
</para>
<para>
This function does not free any temporary parameters associated
with this structure (ie RSA and DH parameters are not freed by this
function).
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-crls" role="function">
<title>gnutls_certificate_free_crls ()</title>
<indexterm zone="gnutls-certificate-free-crls"><primary>gnutls_certificate_free_crls</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_free_crls        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This function will delete all the CRLs associated
with the given credentials.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-free-keys" role="function">
<title>gnutls_certificate_free_keys ()</title>
<indexterm zone="gnutls-certificate-free-keys"><primary>gnutls_certificate_free_keys</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_free_keys        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This function will delete all the keys and the certificates associated
with the given credentials. This function must not be called when a
TLS negotiation that uses the credentials is in progress.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-get-issuer" role="function" condition="since:3.0">
<title>gnutls_certificate_get_issuer ()</title>
<indexterm zone="gnutls-certificate-get-issuer" role="3.0"><primary>gnutls_certificate_get_issuer</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_get_issuer       (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> sc</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> cert</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *issuer</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will return the issuer of a given certificate.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>is the certificate to find issuer for</simpara></listitem></varlistentry>
<varlistentry><term><parameter>issuer</parameter>&#160;:</term>
<listitem><simpara>Will hold the issuer if any. Should be treated as constant.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>Use zero.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise a
negative error value.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-certificate-get-ours" role="function">
<title>gnutls_certificate_get_ours ()</title>
<indexterm zone="gnutls-certificate-get-ours"><primary>gnutls_certificate_get_ours</primary></indexterm>
<programlisting>const <link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link> * gnutls_certificate_get_ours      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Gets the certificate as sent to the peer in the last handshake.
The certificate is in raw (DER) format.  No certificate
list is being returned. Only the first certificate.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> containing our
certificate, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an error or if no certificate
was used.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-get-peers" role="function">
<title>gnutls_certificate_get_peers ()</title>
<indexterm zone="gnutls-certificate-get-peers"><primary>gnutls_certificate_get_peers</primary></indexterm>
<programlisting>const <link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link> * gnutls_certificate_get_peers     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *list_size</parameter>);</programlisting>
<para>
Get the peer's raw certificate (chain) as sent by the peer.  These
certificates are in raw format (DER encoded for X.509).  In case of
a X.509 then a certificate list may be present.  The first
certificate in the list is the peer's certificate, following the
issuer's certificate, then the issuer's issuer etc.
</para>
<para>
In case of OpenPGP keys a single key will be returned in raw
format.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list_size</parameter>&#160;:</term>
<listitem><simpara>is the length of the certificate list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> containing our
certificates, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an error or if no certificate
was used.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-get-peers-subkey-id" role="function">
<title>gnutls_certificate_get_peers_subkey_id ()</title>
<indexterm zone="gnutls-certificate-get-peers-subkey-id"><primary>gnutls_certificate_get_peers_subkey_id</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_get_peers_subkey_id
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *id</parameter>);</programlisting>
<para>
Get the peer's subkey ID when OpenPGP certificates are
used. The returned <parameter>id</parameter> should be treated as constant.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>will contain the ID</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-print-formats-t" role="enum">
<title>enum gnutls_certificate_print_formats_t</title>
<indexterm zone="gnutls-certificate-print-formats-t"><primary>gnutls_certificate_print_formats_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CRT_PRINT_FULL = 0,
    GNUTLS_CRT_PRINT_ONELINE = 1,
    GNUTLS_CRT_PRINT_UNSIGNED_FULL = 2,
    GNUTLS_CRT_PRINT_COMPACT = 3,
    GNUTLS_CRT_PRINT_FULL_NUMBERS = 4,
} gnutls_certificate_print_formats_t;
</programlisting>
<para>
Enumeration of different certificate printing variants.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CRT-PRINT-FULL:CAPS" role="constant">
<term><literal>GNUTLS_CRT_PRINT_FULL</literal></term>
<listitem><simpara>Full information about certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-PRINT-ONELINE:CAPS" role="constant">
<term><literal>GNUTLS_CRT_PRINT_ONELINE</literal></term>
<listitem><simpara>Information about certificate in one line.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-PRINT-UNSIGNED-FULL:CAPS" role="constant">
<term><literal>GNUTLS_CRT_PRINT_UNSIGNED_FULL</literal></term>
<listitem><simpara>All info for an unsigned certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-PRINT-COMPACT:CAPS" role="constant">
<term><literal>GNUTLS_CRT_PRINT_COMPACT</literal></term>
<listitem><simpara>Information about certificate name in one line, plus identification of the public key.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-PRINT-FULL-NUMBERS:CAPS" role="constant">
<term><literal>GNUTLS_CRT_PRINT_FULL_NUMBERS</literal></term>
<listitem><simpara>Full information about certificate and include easy to parse public key parameters.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-request-t" role="enum">
<title>enum gnutls_certificate_request_t</title>
<indexterm zone="gnutls-certificate-request-t"><primary>gnutls_certificate_request_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CERT_IGNORE = 0,
    GNUTLS_CERT_REQUEST = 1,
    GNUTLS_CERT_REQUIRE = 2
} gnutls_certificate_request_t;
</programlisting>
<para>
Enumeration of certificate request types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CERT-IGNORE:CAPS" role="constant">
<term><literal>GNUTLS_CERT_IGNORE</literal></term>
<listitem><simpara>Ignore certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-REQUEST:CAPS" role="constant">
<term><literal>GNUTLS_CERT_REQUEST</literal></term>
<listitem><simpara>Request certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-REQUIRE:CAPS" role="constant">
<term><literal>GNUTLS_CERT_REQUIRE</literal></term>
<listitem><simpara>Require certificate.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-send-x509-rdn-sequence" role="function">
<title>gnutls_certificate_send_x509_rdn_sequence ()</title>
<indexterm zone="gnutls-certificate-send-x509-rdn-sequence"><primary>gnutls_certificate_send_x509_rdn_sequence</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_send_x509_rdn_sequence
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> status</parameter>);</programlisting>
<para>
If status is non zero, this function will order gnutls not to send
the rdnSequence in the certificate request message. That is the
server will not advertise its trusted CAs to the peer. If status
is zero then the default behaviour will take effect, which is to
advertise the server's trusted CAs.
</para>
<para>
This function has no effect in clients, and in authentication
methods other than certificate with X.509 certificates.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>is 0 or 1</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-server-set-request" role="function">
<title>gnutls_certificate_server_set_request ()</title>
<indexterm zone="gnutls-certificate-server-set-request"><primary>gnutls_certificate_server_set_request</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_server_set_request
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-request-t"><type>gnutls_certificate_request_t</type></link> req</parameter>);</programlisting>
<para>
This function specifies if we (in case of a server) are going to
send a certificate request message to the client. If <parameter>req</parameter> is
GNUTLS_CERT_REQUIRE then the server will return an error if the
peer does not provide a certificate. If you do not call this
function then the client will not be asked to send a certificate.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>req</parameter>&#160;:</term>
<listitem><simpara>is one of GNUTLS_CERT_REQUEST, GNUTLS_CERT_REQUIRE</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-dh-params" role="function">
<title>gnutls_certificate_set_dh_params ()</title>
<indexterm zone="gnutls-certificate-set-dh-params"><primary>gnutls_certificate_set_dh_params</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_dh_params    (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for a
certificate server to use. These parameters will be used in
Ephemeral Diffie-Hellman cipher suites.  Note that only a pointer
to the parameters are stored in the certificate handle, so if you
deallocate the parameters before the certificate is deallocated,
you must change the parameters stored in the certificate first.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_certificate_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>is a structure that holds Diffie-Hellman parameters.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-ocsp-status-request-file" role="function">
<title>gnutls_certificate_set_ocsp_status_request_file ()</title>
<indexterm zone="gnutls-certificate-set-ocsp-status-request-file"><primary>gnutls_certificate_set_ocsp_status_request_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_ocsp_status_request_file
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *response_file</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function sets the filename of an OCSP response, that will be
sent to the client if requests an OCSP certificate status. This is
a convenience function which is inefficient on busy servers since
the file is opened on every access. Use 
<link linkend="gnutls-certificate-set-ocsp-status-request-function"><function>gnutls_certificate_set_ocsp_status_request_function()</function></link> to fine-tune
file accesses.
</para><variablelist role="params">
<varlistentry><term><parameter>response_file</parameter>&#160;:</term>
<listitem><simpara>a filename of the OCSP response</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be zero</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-ocsp-status-request-function" role="function">
<title>gnutls_certificate_set_ocsp_status_request_function ()</title>
<indexterm zone="gnutls-certificate-set-ocsp-status-request-function"><primary>gnutls_certificate_set_ocsp_status_request_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_ocsp_status_request_function
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-status-request-ocsp-func"><type>gnutls_status_request_ocsp_func</type></link> ocsp_func</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);</programlisting>
<para>
This function is to be used by server to register a callback to
handle OCSP status requests from the client.  The callback will be
invoked if the client supplied a status-request OCSP extension.
The callback function prototype is:
</para>
<para>
typedef int (*gnutls_status_request_ocsp_func)
   (gnutls_session_t session, void *ptr, gnutls_datum_t *ocsp_response);
</para>
<para>
The callback will be invoked if the client requests an OCSP certificate
status.  The callback may return <link linkend="GNUTLS-E-NO-CERTIFICATE-STATUS:CAPS"><literal>GNUTLS_E_NO_CERTIFICATE_STATUS</literal></link>, if
there is no recent OCSP response. If the callback returns <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link>,
the server will provide the client with the ocsp_response.
</para>
<para>
The response must be a value allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>, and will be
deinitialized when needed.
</para><variablelist role="params">
<varlistentry><term><parameter>ocsp_func</parameter>&#160;:</term>
<listitem><simpara>function pointer to OCSP status request callback.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>opaque pointer passed to callback function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-params-function" role="function">
<title>gnutls_certificate_set_params_function ()</title>
<indexterm zone="gnutls-certificate-set-params-function"><primary>gnutls_certificate_set_params_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_params_function
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for certificate
authentication.  The callback should return <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_certificate_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-pin-function" role="function">
<title>gnutls_certificate_set_pin_function ()</title>
<indexterm zone="gnutls-certificate-set-pin-function"><primary>gnutls_certificate_set_pin_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_pin_function (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="gnutls-pin-callback-t"><type>gnutls_pin_callback_t</type></link> fn</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *userdata</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-certificate-set-retrieve-function" role="function" condition="since:3.0">
<title>gnutls_certificate_set_retrieve_function ()</title>
<indexterm zone="gnutls-certificate-set-retrieve-function" role="3.0"><primary>gnutls_certificate_set_retrieve_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_retrieve_function
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-retrieve-function"><type>gnutls_certificate_retrieve_function</type></link> *func</parameter>);</programlisting>
<para>
This function sets a callback to be called in order to retrieve the
certificate to be used in the handshake. You are advised
to use <link linkend="gnutls-certificate-set-retrieve-function2"><function>gnutls_certificate_set_retrieve_function2()</function></link> because it
is much more efficient in the processing it requires from gnutls.
</para>
<para>
The callback's function prototype is:
int (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int nreqs,
const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length, gnutls_retr2_st* st);
</para>
<para>
<parameter>req_ca_cert</parameter> is only used in X.509 certificates.
Contains a list with the CA names that the server considers trusted.
Normally we should send a certificate that is signed
by one of these CAs. These names are DER encoded. To get a more
meaningful value use the function <link linkend="gnutls-x509-rdn-get"><function>gnutls_x509_rdn_get()</function></link>.
</para>
<para>
<parameter>pk_algos</parameter> contains a list with server's acceptable signature algorithms.
The certificate returned should support the server's given algorithms.
</para>
<para>
<parameter>st</parameter> should contain the certificates and private keys.
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, after the certificate request message has been received.
</para>
<para>
In server side pk_algos and req_ca_dn are NULL.
</para>
<para>
The callback function should set the certificate list to be sent,
and return 0 on success. If no certificate was selected then the
number of certificates should be set to zero. The value (-1)
indicates error and the handshake will be terminated.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-verify-flags" role="function">
<title>gnutls_certificate_set_verify_flags ()</title>
<indexterm zone="gnutls-certificate-set-verify-flags"><primary>gnutls_certificate_set_verify_flags</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_verify_flags (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will set the flags to be used for verification 
of certificates and override any defaults.  The provided flags must be an OR of the
<link linkend="gnutls-certificate-verify-flags"><type>gnutls_certificate_verify_flags</type></link> enumerations.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_certificate_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>are the flags</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-verify-function" role="function" condition="since:2.10.0">
<title>gnutls_certificate_set_verify_function ()</title>
<indexterm zone="gnutls-certificate-set-verify-function" role="2.10.0"><primary>gnutls_certificate_set_verify_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_verify_function
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-verify-function"><type>gnutls_certificate_verify_function</type></link> *func</parameter>);</programlisting>
<para>
This function sets a callback to be called when peer's certificate
has been received in order to verify it on receipt rather than
doing after the handshake is completed.
</para>
<para>
The callback's function prototype is:
int (*callback)(gnutls_session_t);
</para>
<para>
If the callback function is provided then gnutls will call it, in the
handshake, just after the certificate message has been received.
To verify or obtain the certificate the <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>,
<link linkend="gnutls-certificate-type-get"><function>gnutls_certificate_type_get()</function></link>, <link linkend="gnutls-certificate-get-peers"><function>gnutls_certificate_get_peers()</function></link> functions
can be used.
</para>
<para>
The callback function should return 0 for the handshake to continue
or non-zero to terminate.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-verify-limits" role="function">
<title>gnutls_certificate_set_verify_limits ()</title>
<indexterm zone="gnutls-certificate-set-verify-limits"><primary>gnutls_certificate_set_verify_limits</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_certificate_set_verify_limits
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_bits</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_depth</parameter>);</programlisting>
<para>
This function will set some upper limits for the default
verification function, <link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>, to avoid
denial of service attacks.  You can set them to zero to disable
limits.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_certificate_credentials structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_bits</parameter>&#160;:</term>
<listitem><simpara>is the number of bits of an acceptable certificate (default 8200)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_depth</parameter>&#160;:</term>
<listitem><simpara>is maximum depth of the verification of a certificate chain (default 5)</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_crl ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl" role="2.4.0"><primary>gnutls_certificate_set_x509_crl</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_crl     (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crl-t"><type>gnutls_x509_crl_t</type></link> *crl_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> crl_list_size</parameter>);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list</parameter>&#160;:</term>
<listitem><simpara>is a list of trusted CRLs. They should have been verified before.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crl_list_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the crl_list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>number of CRLs processed, or a negative error code on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl-file" role="function">
<title>gnutls_certificate_set_x509_crl_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl-file"><primary>gnutls_certificate_set_x509_crl_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_crl_file
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *crlfile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or server
certificates.  In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>crlfile</parameter>&#160;:</term>
<listitem><simpara>is a file containing the list of verified CRLs (DER or PEM list)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>number of CRLs processed or a negative error code on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-crl-mem" role="function">
<title>gnutls_certificate_set_x509_crl_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-crl-mem"><primary>gnutls_certificate_set_x509_crl_mem</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_crl_mem (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *CRL</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function adds the trusted CRLs in order to verify client or
server certificates.  In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>CRL</parameter>&#160;:</term>
<listitem><simpara>is a list of trusted CRLs. They should have been verified before.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is DER or PEM</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>number of CRLs processed, or a negative error code on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_key ()</title>
<indexterm zone="gnutls-certificate-set-x509-key" role="2.4.0"><primary>gnutls_certificate_set_x509_key</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_key     (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *cert_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> cert_list_size</parameter>,
                                                         <parameter><link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> key</parameter>);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once, in case multiple keys/certificates exist for
the server.  For clients that wants to send more than their own end
entity certificate (e.g., also an intermediate CA cert) then put
the certificate chain in <parameter>cert_list</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list</parameter>&#160;:</term>
<listitem><simpara>contains a certificate list (path) for the specified private key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_list_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the certificate list</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link> key</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success, or a negative error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key-file" role="function">
<title>gnutls_certificate_set_x509_key_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-key-file"><primary>gnutls_certificate_set_x509_key_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_key_file
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *certfile</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *keyfile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure.  This function may be
called more than once, in case multiple keys/certificates exist for
the server.  For clients that need to send more than its own end
entity certificate, e.g., also an intermediate CA cert, then the
<parameter>certfile</parameter> must contain the ordered certificate chain.
</para>
<para>
This function can also accept URLs at <parameter>keyfile</parameter> and <parameter>certfile</parameter>. In that case it
will import the private key and certificate indicated by the URLs. Note
that the supported URLs are the ones indicated by <link linkend="gnutls-url-is-supported"><function>gnutls_url_is_supported()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>certfile</parameter>&#160;:</term>
<listitem><simpara>is a file that containing the certificate list (path) for
the specified private key, in PKCS7 format, or a list of certificates</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keyfile</parameter>&#160;:</term>
<listitem><simpara>is a file that contains the private key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success, or a negative error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-key-mem" role="function">
<title>gnutls_certificate_set_x509_key_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-key-mem"><primary>gnutls_certificate_set_x509_key_mem</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_key_mem (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function sets a certificate/private key pair in the
gnutls_certificate_credentials_t structure. This function may be called
more than once, in case multiple keys/certificates exist for the
server.
</para>
<para>
Note that the keyUsage (2.5.29.15) PKIX extension in X.509 certificates
is supported. This means that certificates intended for signing cannot
be used for ciphersuites that require encryption.
</para>
<para>
If the certificate and the private key are given in PEM encoding
then the strings that hold their values must be null terminated.
</para>
<para>
The <parameter>key</parameter> may be <link linkend="NULL:CAPS"><literal>NULL</literal></link> if you are using a sign callback, see
<link linkend="gnutls-sign-callback-set"><function>gnutls_sign_callback_set()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>contains a certificate list (path) for the specified private key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>is the private key, or <link linkend="NULL:CAPS"><literal>NULL</literal></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success, or a negative error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-simple-pkcs12-file" role="function">
<title>gnutls_certificate_set_x509_simple_pkcs12_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-simple-pkcs12-file"><primary>gnutls_certificate_set_x509_simple_pkcs12_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_simple_pkcs12_file
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *pkcs12file</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);</programlisting>
<para>
This function sets a certificate/private key pair and/or a CRL in
the gnutls_certificate_credentials_t structure.  This function may
be called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
PKCS<link linkend="12:CAPS"><type>12</type></link> files with a MAC, encrypted bags and PKCS #8
private keys are supported. However,
only password based security, and the same password for all
operations, are supported.
</para>
<para>
PKCS<link linkend="12:CAPS"><type>12</type></link> file may contain many keys and/or certificates, and there
is no way to identify which key/certificate pair you want.  You
should make sure the PKCS<link linkend="12:CAPS"><type>12</type></link> file only contain one key/certificate
pair and/or one CRL.
</para>
<para>
It is believed that the limitations of this function is acceptable
for most usage, and that any more flexibility would introduce
complexity that would make it harder to use this functionality at
all.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs12file</parameter>&#160;:</term>
<listitem><simpara>filename of file containing PKCS<link linkend="12:CAPS"><type>12</type></link> blob.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER of the <parameter>pkcs12file</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara>optional password used to decrypt PKCS<link linkend="12:CAPS"><type>12</type></link> file, bags and keys.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success, or a negative error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-simple-pkcs12-mem" role="function" condition="since:2.8.0">
<title>gnutls_certificate_set_x509_simple_pkcs12_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-simple-pkcs12-mem" role="2.8.0"><primary>gnutls_certificate_set_x509_simple_pkcs12_mem</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_simple_pkcs12_mem
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *p12blob</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);</programlisting>
<para>
This function sets a certificate/private key pair and/or a CRL in
the gnutls_certificate_credentials_t structure.  This function may
be called more than once (in case multiple keys/certificates exist
for the server).
</para>
<para>
Encrypted PKCS<link linkend="12:CAPS"><type>12</type></link> bags and PKCS#8 private keys are supported.  However,
only password based security, and the same password for all
operations, are supported.
</para>
<para>
PKCS<link linkend="12:CAPS"><type>12</type></link> file may contain many keys and/or certificates, and there
is no way to identify which key/certificate pair you want.  You
should make sure the PKCS<link linkend="12:CAPS"><type>12</type></link> file only contain one key/certificate
pair and/or one CRL.
</para>
<para>
It is believed that the limitations of this function is acceptable
for most usage, and that any more flexibility would introduce
complexity that would make it harder to use this functionality at
all.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>p12blob</parameter>&#160;:</term>
<listitem><simpara>the PKCS<link linkend="12:CAPS"><type>12</type></link> blob.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER of the <parameter>pkcs12file</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara>optional password used to decrypt PKCS<link linkend="12:CAPS"><type>12</type></link> file, bags and keys.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success, or a negative error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.8.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-system-trust" role="function" condition="since:3.0">
<title>gnutls_certificate_set_x509_system_trust ()</title>
<indexterm zone="gnutls-certificate-set-x509-system-trust" role="3.0"><primary>gnutls_certificate_set_x509_system_trust</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_system_trust
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>);</programlisting>
<para>
This function adds the system's default trusted CAs in order to
verify client or server certificates.
</para>
<para>
In the case the system is currently unsupported <link linkend="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS"><literal>GNUTLS_E_UNIMPLEMENTED_FEATURE</literal></link>
is returned.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of certificates processed or a negative error code
on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust" role="function" condition="since:2.4.0">
<title>gnutls_certificate_set_x509_trust ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust" role="2.4.0"><primary>gnutls_certificate_set_x509_trust</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_trust   (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-t"><type>gnutls_x509_crt_t</type></link> *ca_list</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> ca_list_size</parameter>);</programlisting>
<para>
This function adds the trusted CAs in order to verify client
or server certificates. In case of a client this is not required
to be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.
This function may be called multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list</parameter>&#160;:</term>
<listitem><simpara>is a list of trusted CAs</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca_list_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the CA list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of certificates processed or a negative error code
on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust-file" role="function">
<title>gnutls_certificate_set_x509_trust_file ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust-file"><primary>gnutls_certificate_set_x509_trust_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_trust_file
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> cred</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *cafile</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to
be called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the names of the CAs set here will be sent to
the client if a certificate request is sent. This can be disabled
using <link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.
</para>
<para>
This function can also accept URLs. In that case it
will import all certificates that are marked as trusted. Note
that the supported URLs are the ones indicated by <link linkend="gnutls-url-is-supported"><function>gnutls_url_is_supported()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cafile</parameter>&#160;:</term>
<listitem><simpara>is a file containing the list of trusted CAs (DER or PEM list)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is PEM or DER</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>number of certificates processed, or a negative error code on
error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-set-x509-trust-mem" role="function">
<title>gnutls_certificate_set_x509_trust_mem ()</title>
<indexterm zone="gnutls-certificate-set-x509-trust-mem"><primary>gnutls_certificate_set_x509_trust_mem</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_set_x509_trust_mem
                                                        (<parameter><link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *ca</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> type</parameter>);</programlisting>
<para>
This function adds the trusted CAs in order to verify client or
server certificates. In case of a client this is not required to be
called if the certificates are not verified using
<link linkend="gnutls-certificate-verify-peers2"><function>gnutls_certificate_verify_peers2()</function></link>.  This function may be called
multiple times.
</para>
<para>
In case of a server the CAs set here will be sent to the client if
a certificate request is sent. This can be disabled using
<link linkend="gnutls-certificate-send-x509-rdn-sequence"><function>gnutls_certificate_send_x509_rdn_sequence()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ca</parameter>&#160;:</term>
<listitem><simpara>is a list of trusted CAs or a DER certificate</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is DER or PEM</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of certificates processed or a negative error code
on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-status-t" role="enum">
<title>enum gnutls_certificate_status_t</title>
<indexterm zone="gnutls-certificate-status-t"><primary>gnutls_certificate_status_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CERT_INVALID = 1&lt;&lt;1,
    GNUTLS_CERT_REVOKED = 1&lt;&lt;5,
    GNUTLS_CERT_SIGNER_NOT_FOUND = 1&lt;&lt;6,
    GNUTLS_CERT_SIGNER_NOT_CA = 1&lt;&lt;7,
    GNUTLS_CERT_INSECURE_ALGORITHM = 1&lt;&lt;8,
    GNUTLS_CERT_NOT_ACTIVATED = 1&lt;&lt;9,
    GNUTLS_CERT_EXPIRED = 1&lt;&lt;10,
    GNUTLS_CERT_SIGNATURE_FAILURE = 1&lt;&lt;11,
    GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED = 1&lt;&lt;12,
    GNUTLS_CERT_UNEXPECTED_OWNER = 1&lt;&lt;14,
    GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE = 1&lt;&lt;15,
    GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE = 1&lt;&lt;16,
} gnutls_certificate_status_t;
</programlisting>
<para>
Enumeration of certificate status codes.  Note that the status
bits may have different meanings in OpenPGP keys and X.509
certificate verification.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CERT-INVALID:CAPS" role="constant">
<term><literal>GNUTLS_CERT_INVALID</literal></term>
<listitem><simpara>The certificate is not signed by one of the
  known authorities or the signature is invalid (deprecated by the flags 
  <link linkend="GNUTLS-CERT-SIGNATURE-FAILURE:CAPS"><literal>GNUTLS_CERT_SIGNATURE_FAILURE</literal></link> and <link linkend="GNUTLS-CERT-SIGNER-NOT-FOUND:CAPS"><literal>GNUTLS_CERT_SIGNER_NOT_FOUND</literal></link>).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-REVOKED:CAPS" role="constant">
<term><literal>GNUTLS_CERT_REVOKED</literal></term>
<listitem><simpara>Certificate is revoked by its authority.  In X.509 this will be
  set only if CRLs are checked.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-SIGNER-NOT-FOUND:CAPS" role="constant">
<term><literal>GNUTLS_CERT_SIGNER_NOT_FOUND</literal></term>
<listitem><simpara>The certificate's issuer is not known. 
  This is the case if the issuer is not included in the trusted certificate list.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-SIGNER-NOT-CA:CAPS" role="constant">
<term><literal>GNUTLS_CERT_SIGNER_NOT_CA</literal></term>
<listitem><simpara>The certificate's signer was not a CA. This
  may happen if this was a version 1 certificate, which is common with 
  some CAs, or a version 3 certificate without the basic constrains extension.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-INSECURE-ALGORITHM:CAPS" role="constant">
<term><literal>GNUTLS_CERT_INSECURE_ALGORITHM</literal></term>
<listitem><simpara>The certificate was signed using an insecure
  algorithm such as MD2 or MD5. These algorithms have been broken and
  should not be trusted.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-NOT-ACTIVATED:CAPS" role="constant">
<term><literal>GNUTLS_CERT_NOT_ACTIVATED</literal></term>
<listitem><simpara>The certificate is not yet activated.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-EXPIRED:CAPS" role="constant">
<term><literal>GNUTLS_CERT_EXPIRED</literal></term>
<listitem><simpara>The certificate has expired.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-SIGNATURE-FAILURE:CAPS" role="constant">
<term><literal>GNUTLS_CERT_SIGNATURE_FAILURE</literal></term>
<listitem><simpara>The signature verification failed.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-REVOCATION-DATA-SUPERSEDED:CAPS" role="constant">
<term><literal>GNUTLS_CERT_REVOCATION_DATA_SUPERSEDED</literal></term>
<listitem><simpara>The revocation data are old and have been superseded.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-UNEXPECTED-OWNER:CAPS" role="constant">
<term><literal>GNUTLS_CERT_UNEXPECTED_OWNER</literal></term>
<listitem><simpara>The owner is not the expected one.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-REVOCATION-DATA-ISSUED-IN-FUTURE:CAPS" role="constant">
<term><literal>GNUTLS_CERT_REVOCATION_DATA_ISSUED_IN_FUTURE</literal></term>
<listitem><simpara>The revocation data have a future issue date.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CERT-SIGNER-CONSTRAINTS-FAILURE:CAPS" role="constant">
<term><literal>GNUTLS_CERT_SIGNER_CONSTRAINTS_FAILURE</literal></term>
<listitem><simpara>The certificate's signer constraints were
  violated.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get" role="function">
<title>gnutls_certificate_type_get ()</title>
<indexterm zone="gnutls-certificate-type-get"><primary>gnutls_certificate_type_get</primary></indexterm>
<programlisting><link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> gnutls_certificate_type_get   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
The certificate type is by default X.509, unless it is negotiated
as a TLS extension.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the currently used <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> certificate
type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get-id" role="function">
<title>gnutls_certificate_type_get_id ()</title>
<indexterm zone="gnutls-certificate-type-get-id"><primary>gnutls_certificate_type_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> gnutls_certificate_type_get_id
                                                        (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
The names are compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a certificate type name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> for the specified in a
string certificate type, or <link linkend="GNUTLS-CRT-UNKNOWN:CAPS"><literal>GNUTLS_CRT_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-get-name" role="function">
<title>gnutls_certificate_type_get_name ()</title>
<indexterm zone="gnutls-certificate-type-get-name"><primary>gnutls_certificate_type_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_certificate_type_get_name    (<parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is a certificate type</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified
certificate type, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of unknown types.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-list" role="function">
<title>gnutls_certificate_type_list ()</title>
<indexterm zone="gnutls-certificate-type-list"><primary>gnutls_certificate_type_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-certificate-type-t"><returnvalue>gnutls_certificate_type_t</returnvalue></link> * gnutls_certificate_type_list
                                                        (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of certificate types.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link>
integers indicating the available certificate types.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-type-t" role="enum">
<title>enum gnutls_certificate_type_t</title>
<indexterm zone="gnutls-certificate-type-t"><primary>gnutls_certificate_type_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CRT_UNKNOWN = 0,
    GNUTLS_CRT_X509 = 1,
    GNUTLS_CRT_OPENPGP = 2,
    GNUTLS_CRT_RAW = 3
} gnutls_certificate_type_t;
</programlisting>
<para>
Enumeration of different certificate types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CRT-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_CRT_UNKNOWN</literal></term>
<listitem><simpara>Unknown certificate type.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-X509:CAPS" role="constant">
<term><literal>GNUTLS_CRT_X509</literal></term>
<listitem><simpara>X.509 Certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-OPENPGP:CAPS" role="constant">
<term><literal>GNUTLS_CRT_OPENPGP</literal></term>
<listitem><simpara>OpenPGP certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRT-RAW:CAPS" role="constant">
<term><literal>GNUTLS_CRT_RAW</literal></term>
<listitem><simpara>Raw public key (SubjectPublicKey)
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-verification-status-print" role="function" condition="since:3.1.4">
<title>gnutls_certificate_verification_status_print ()</title>
<indexterm zone="gnutls-certificate-verification-status-print" role="3.1.4"><primary>gnutls_certificate_verification_status_print</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_verification_status_print
                                                        (<parameter>unsigned <link linkend="int"><type>int</type></link> status</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> type</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *out</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will pretty print the status of a verification
process -- eg. the one obtained by <link linkend="gnutls-certificate-verify-peers3"><function>gnutls_certificate_verify_peers3()</function></link>.
</para>
<para>
The output <parameter>out</parameter> needs to be deallocated using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>The status flags to be printed</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>The certificate type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>Newly allocated datum with (0) terminated string.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be zero</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise a
negative error value.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.4</para></refsect2>
<refsect2 id="gnutls-certificate-verify-peers2" role="function">
<title>gnutls_certificate_verify_peers2 ()</title>
<indexterm zone="gnutls-certificate-verify-peers2"><primary>gnutls_certificate_verify_peers2</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_verify_peers2    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *status</parameter>);</programlisting>
<para>
This function will verify the peer's certificate and store
the status in the <parameter>status</parameter> variable as a bitwise or'd gnutls_certificate_status_t
values or zero if the certificate is trusted. Note that value in <parameter>status</parameter>
is set only when the return value of this function is success (i.e, failure 
to trust a certificate does not imply a negative return value).
</para>
<para>
If available the OCSP Certificate Status extension will be
utilized by this function.
</para>
<para>
To avoid denial of service attacks some
default upper limits regarding the certificate key size and chain
size are set. To override them use <link linkend="gnutls-certificate-set-verify-limits"><function>gnutls_certificate_set_verify_limits()</function></link>.
</para>
<para>
Note that you must also check the peer's name in order to check if
the verified certificate belongs to the actual peer, see <link linkend="gnutls-x509-crt-check-hostname"><function>gnutls_x509_crt_check_hostname()</function></link>,
or use <link linkend="gnutls-certificate-verify-peers3"><function>gnutls_certificate_verify_peers3()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>is the output of the verification</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a negative error code on error and <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-certificate-verify-peers3" role="function" condition="since:3.1.4">
<title>gnutls_certificate_verify_peers3 ()</title>
<indexterm zone="gnutls-certificate-verify-peers3" role="3.1.4"><primary>gnutls_certificate_verify_peers3</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_certificate_verify_peers3    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *hostname</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *status</parameter>);</programlisting>
<para>
This function will verify the peer's certificate and store the
status in the <parameter>status</parameter> variable as a bitwise or'd gnutls_certificate_status_t
values or zero if the certificate is trusted. Note that value in <parameter>status</parameter>
is set only when the return value of this function is success (i.e, failure 
to trust a certificate does not imply a negative return value).
</para>
<para>
If the <parameter>hostname</parameter> provided is non-NULL then this function will compare
the hostname in the certificate against the given. If they do not match 
the <link linkend="GNUTLS-CERT-UNEXPECTED-OWNER:CAPS"><literal>GNUTLS_CERT_UNEXPECTED_OWNER</literal></link> status flag will be set.
</para>
<para>
If available the OCSP Certificate Status extension will be
utilized by this function.
</para>
<para>
To avoid denial of service attacks some
default upper limits regarding the certificate key size and chain
size are set. To override them use <link linkend="gnutls-certificate-set-verify-limits"><function>gnutls_certificate_set_verify_limits()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hostname</parameter>&#160;:</term>
<listitem><simpara>is the expected name of the peer; may be <link linkend="NULL:CAPS"><literal>NULL</literal></link></simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>is the output of the verification</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a negative error code on error and <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.4</para></refsect2>
<refsect2 id="gnutls-channel-binding-t" role="enum">
<title>enum gnutls_channel_binding_t</title>
<indexterm zone="gnutls-channel-binding-t"><primary>gnutls_channel_binding_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CB_TLS_UNIQUE
} gnutls_channel_binding_t;
</programlisting>
<para>
Enumeration of support channel binding types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CB-TLS-UNIQUE:CAPS" role="constant">
<term><literal>GNUTLS_CB_TLS_UNIQUE</literal></term>
<listitem><simpara>"tls-unique" (RFC 5929) channel binding
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-check-version" role="function">
<title>gnutls_check_version ()</title>
<indexterm zone="gnutls-check-version"><primary>gnutls_check_version</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_check_version                (<parameter>const <link linkend="char"><type>char</type></link> *req_version</parameter>);</programlisting>
<para>
Check GnuTLS Library version.
</para>
<para>
See <link linkend="GNUTLS-VERSION:CAPS"><literal>GNUTLS_VERSION</literal></link> for a suitable <parameter>req_version</parameter> string.
</para><variablelist role="params">
<varlistentry><term><parameter>req_version</parameter>&#160;:</term>
<listitem><simpara>version string to compare with, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Check that the version of the library is at
minimum the one given as a string in <parameter>req_version</parameter> and return the
actual version string of the library; return <link linkend="NULL:CAPS"><literal>NULL</literal></link> if the
condition is not met.  If <link linkend="NULL:CAPS"><literal>NULL</literal></link> is passed to this function no
check is done and only the version string is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-algorithm-t" role="enum">
<title>enum gnutls_cipher_algorithm_t</title>
<indexterm zone="gnutls-cipher-algorithm-t"><primary>gnutls_cipher_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CIPHER_UNKNOWN = 0,
    GNUTLS_CIPHER_NULL = 1,
    GNUTLS_CIPHER_ARCFOUR_128 = 2,
    GNUTLS_CIPHER_3DES_CBC = 3,
    GNUTLS_CIPHER_AES_128_CBC = 4,
    GNUTLS_CIPHER_AES_256_CBC = 5,
    GNUTLS_CIPHER_ARCFOUR_40 = 6,
    GNUTLS_CIPHER_CAMELLIA_128_CBC = 7,
    GNUTLS_CIPHER_CAMELLIA_256_CBC = 8,
    GNUTLS_CIPHER_RC2_40_CBC = 90,
    GNUTLS_CIPHER_DES_CBC = 91,
    GNUTLS_CIPHER_AES_192_CBC = 92,
    GNUTLS_CIPHER_AES_128_GCM = 93,
    GNUTLS_CIPHER_AES_256_GCM = 94,
    GNUTLS_CIPHER_CAMELLIA_192_CBC = 95,

    /* used only for PGP internals. Ignored in TLS/SSL
     */
    GNUTLS_CIPHER_IDEA_PGP_CFB = 200,
    GNUTLS_CIPHER_3DES_PGP_CFB = 201,
    GNUTLS_CIPHER_CAST5_PGP_CFB = 202,
    GNUTLS_CIPHER_BLOWFISH_PGP_CFB = 203,
    GNUTLS_CIPHER_SAFER_SK128_PGP_CFB = 204,
    GNUTLS_CIPHER_AES128_PGP_CFB = 205,
    GNUTLS_CIPHER_AES192_PGP_CFB = 206,
    GNUTLS_CIPHER_AES256_PGP_CFB = 207,
    GNUTLS_CIPHER_TWOFISH_PGP_CFB = 208
} gnutls_cipher_algorithm_t;
</programlisting>
<para>
Enumeration of different symmetric encryption algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CIPHER-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_UNKNOWN</literal></term>
<listitem><simpara>Unknown algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-NULL:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_NULL</literal></term>
<listitem><simpara>NULL algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-ARCFOUR-128:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_ARCFOUR_128</literal></term>
<listitem><simpara>ARCFOUR stream cipher with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-3DES-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_3DES_CBC</literal></term>
<listitem><simpara>3DES in CBC mode.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES-128-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES_128_CBC</literal></term>
<listitem><simpara>AES in CBC mode with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES-256-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES_256_CBC</literal></term>
<listitem><simpara>AES in CBC mode with 256-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-ARCFOUR-40:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_ARCFOUR_40</literal></term>
<listitem><simpara>ARCFOUR stream cipher with 40-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-CAMELLIA-128-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_CAMELLIA_128_CBC</literal></term>
<listitem><simpara>Camellia in CBC mode with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-CAMELLIA-256-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_CAMELLIA_256_CBC</literal></term>
<listitem><simpara>Camellia in CBC mode with 256-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-RC2-40-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_RC2_40_CBC</literal></term>
<listitem><simpara>RC2 in CBC mode with 40-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-DES-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_DES_CBC</literal></term>
<listitem><simpara>DES in CBC mode (56-bit keys).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES-192-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES_192_CBC</literal></term>
<listitem><simpara>AES in CBC mode with 192-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES-128-GCM:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES_128_GCM</literal></term>
<listitem><simpara>AES in GCM mode with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES-256-GCM:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES_256_GCM</literal></term>
<listitem><simpara>AES in GCM mode with 256-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-CAMELLIA-192-CBC:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_CAMELLIA_192_CBC</literal></term>
<listitem><simpara>Camellia in CBC mode with 192-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-IDEA-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_IDEA_PGP_CFB</literal></term>
<listitem><simpara>IDEA in CFB mode.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-3DES-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_3DES_PGP_CFB</literal></term>
<listitem><simpara>3DES in CFB mode.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-CAST5-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_CAST5_PGP_CFB</literal></term>
<listitem><simpara>CAST5 in CFB mode.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-BLOWFISH-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_BLOWFISH_PGP_CFB</literal></term>
<listitem><simpara>Blowfish in CFB mode.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-SAFER-SK128-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_SAFER_SK128_PGP_CFB</literal></term>
<listitem><simpara>Safer-SK in CFB mode with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES128-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES128_PGP_CFB</literal></term>
<listitem><simpara>AES in CFB mode with 128-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES192-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES192_PGP_CFB</literal></term>
<listitem><simpara>AES in CFB mode with 192-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-AES256-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_AES256_PGP_CFB</literal></term>
<listitem><simpara>AES in CFB mode with 256-bit keys.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CIPHER-TWOFISH-PGP-CFB:CAPS" role="constant">
<term><literal>GNUTLS_CIPHER_TWOFISH_PGP_CFB</literal></term>
<listitem><simpara>Twofish in CFB mode.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get" role="function">
<title>gnutls_cipher_get ()</title>
<indexterm zone="gnutls-cipher-get"><primary>gnutls_cipher_get</primary></indexterm>
<programlisting><link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> gnutls_cipher_get             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get currently used cipher.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the currently used cipher, a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link>
type.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-id" role="function">
<title>gnutls_cipher_get_id ()</title>
<indexterm zone="gnutls-cipher-get-id"><primary>gnutls_cipher_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> gnutls_cipher_get_id          (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
The names are compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a cipher algorithm name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> value corresponding to
the specified cipher, or <link linkend="GNUTLS-CIPHER-UNKNOWN:CAPS"><literal>GNUTLS_CIPHER_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-key-size" role="function">
<title>gnutls_cipher_get_key_size ()</title>
<indexterm zone="gnutls-cipher-get-key-size"><primary>gnutls_cipher_get_key_size</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              gnutls_cipher_get_key_size          (<parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Get key size for cipher.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is an encryption algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>length (in bytes) of the given cipher's key size, or 0 if
the given cipher is invalid.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-get-name" role="function">
<title>gnutls_cipher_get_name ()</title>
<indexterm zone="gnutls-cipher-get-name"><primary>gnutls_cipher_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_cipher_get_name              (<parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> type to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is an encryption algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a string that contains the name of the
specified cipher, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-list" role="function">
<title>gnutls_cipher_list ()</title>
<indexterm zone="gnutls-cipher-list"><primary>gnutls_cipher_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-cipher-algorithm-t"><returnvalue>gnutls_cipher_algorithm_t</returnvalue></link> * gnutls_cipher_list    (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of supported cipher algorithms.  Note that not
necessarily all ciphers are supported as TLS cipher suites.  For
example, DES is not supported as a cipher suite, but is supported
for other purposes (e.g., PKCS#8 or similar).
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link>
integers indicating the available ciphers.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-suite-get-name" role="function">
<title>gnutls_cipher_suite_get_name ()</title>
<indexterm zone="gnutls-cipher-suite-get-name"><primary>gnutls_cipher_suite_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_cipher_suite_get_name        (<parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> kx_algorithm</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> cipher_algorithm</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> mac_algorithm</parameter>);</programlisting>
<para>
Note that the full cipher suite name must be prepended by TLS or
SSL depending of the protocol in use.
</para><variablelist role="params">
<varlistentry><term><parameter>kx_algorithm</parameter>&#160;:</term>
<listitem><simpara>is a Key exchange algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher_algorithm</parameter>&#160;:</term>
<listitem><simpara>is a cipher algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac_algorithm</parameter>&#160;:</term>
<listitem><simpara>is a MAC algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of a TLS cipher suite,
specified by the given algorithms, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cipher-suite-info" role="function">
<title>gnutls_cipher_suite_info ()</title>
<indexterm zone="gnutls-cipher-suite-info"><primary>gnutls_cipher_suite_info</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_cipher_suite_info            (<parameter><link linkend="size-t"><type>size_t</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *cs_id</parameter>,
                                                         <parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> *kx</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> *cipher</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> *mac</parameter>,
                                                         <parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> *min_version</parameter>);</programlisting>
<para>
Get information about supported cipher suites.  Use the function
iteratively to get information about all supported cipher suites.
Call with idx=0 to get information about first cipher suite, then
idx=1 and so on until the function returns NULL.
</para><variablelist role="params">
<varlistentry><term><parameter>idx</parameter>&#160;:</term>
<listitem><simpara>index of cipher suite to get information about, starts on 0.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cs_id</parameter>&#160;:</term>
<listitem><simpara>output buffer with room for 2 bytes, indicating cipher suite value</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kx</parameter>&#160;:</term>
<listitem><simpara>output variable indicating key exchange algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>output variable indicating cipher, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac</parameter>&#160;:</term>
<listitem><simpara>output variable indicating MAC algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_version</parameter>&#160;:</term>
<listitem><simpara>output variable indicating TLS protocol version, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the name of <parameter>idx</parameter> cipher suite, and set the information
about the cipher suite in the output variables.  If <parameter>idx</parameter> is out of
bounds, <link linkend="NULL:CAPS"><literal>NULL</literal></link> is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-close-request-t" role="enum">
<title>enum gnutls_close_request_t</title>
<indexterm zone="gnutls-close-request-t"><primary>gnutls_close_request_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SHUT_RDWR = 0,
    GNUTLS_SHUT_WR = 1
} gnutls_close_request_t;
</programlisting>
<para>
Enumeration of how TLS session should be terminated.  See <link linkend="gnutls-bye"><function>gnutls_bye()</function></link>.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SHUT-RDWR:CAPS" role="constant">
<term><literal>GNUTLS_SHUT_RDWR</literal></term>
<listitem><simpara>Disallow further receives/sends.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SHUT-WR:CAPS" role="constant">
<term><literal>GNUTLS_SHUT_WR</literal></term>
<listitem><simpara>Disallow further sends.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get" role="function">
<title>gnutls_compression_get ()</title>
<indexterm zone="gnutls-compression-get"><primary>gnutls_compression_get</primary></indexterm>
<programlisting><link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> gnutls_compression_get      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get currently used compression algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the currently used compression method, a
<link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get-id" role="function">
<title>gnutls_compression_get_id ()</title>
<indexterm zone="gnutls-compression-get-id"><primary>gnutls_compression_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> gnutls_compression_get_id   (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
The names are compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a compression method name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>an id of the specified in a string compression method, or
<link linkend="GNUTLS-COMP-UNKNOWN:CAPS"><literal>GNUTLS_COMP_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-get-name" role="function">
<title>gnutls_compression_get_name ()</title>
<indexterm zone="gnutls-compression-get-name"><primary>gnutls_compression_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_compression_get_name         (<parameter><link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a Compression algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a string that contains the name of the
specified compression algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-list" role="function">
<title>gnutls_compression_list ()</title>
<indexterm zone="gnutls-compression-list"><primary>gnutls_compression_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-compression-method-t"><returnvalue>gnutls_compression_method_t</returnvalue></link> * gnutls_compression_list
                                                        (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of compression methods.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a zero-terminated list of <link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link>
integers indicating the available compression methods.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-compression-method-t" role="enum">
<title>enum gnutls_compression_method_t</title>
<indexterm zone="gnutls-compression-method-t"><primary>gnutls_compression_method_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_COMP_UNKNOWN = 0,
    GNUTLS_COMP_NULL = 1,
    GNUTLS_COMP_DEFLATE = 2,
    GNUTLS_COMP_ZLIB = GNUTLS_COMP_DEFLATE,
} gnutls_compression_method_t;
</programlisting>
<para>
Enumeration of different TLS compression methods.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-COMP-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_COMP_UNKNOWN</literal></term>
<listitem><simpara>Unknown compression method.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-COMP-NULL:CAPS" role="constant">
<term><literal>GNUTLS_COMP_NULL</literal></term>
<listitem><simpara>The NULL compression method (no compression).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-COMP-DEFLATE:CAPS" role="constant">
<term><literal>GNUTLS_COMP_DEFLATE</literal></term>
<listitem><simpara>The DEFLATE compression method from zlib.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-COMP-ZLIB:CAPS" role="constant">
<term><literal>GNUTLS_COMP_ZLIB</literal></term>
<listitem><simpara>Same as <link linkend="GNUTLS-COMP-DEFLATE:CAPS"><literal>GNUTLS_COMP_DEFLATE</literal></link>.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-cred-set" role="macro">
<title>gnutls_cred_set</title>
<indexterm zone="gnutls-cred-set"><primary>gnutls_cred_set</primary></indexterm>
<programlisting>#define gnutls_cred_set&#160;gnutls_credentials_set
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-credentials-clear" role="function">
<title>gnutls_credentials_clear ()</title>
<indexterm zone="gnutls-credentials-clear"><primary>gnutls_credentials_clear</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_credentials_clear            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Clears all the credentials previously set in this session.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-credentials-set" role="function">
<title>gnutls_credentials_set ()</title>
<indexterm zone="gnutls-credentials-set"><primary>gnutls_credentials_set</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_credentials_set              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-credentials-type-t"><type>gnutls_credentials_type_t</type></link> type</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *cred</parameter>);</programlisting>
<para>
Sets the needed credentials for the specified type.  Eg username,
password - or public and private keys etc.  The <parameter>cred</parameter> parameter is
a structure that depends on the specified type and on the current
session (client or server).
</para>
<para>
In order to minimize memory usage, and share credentials between
several threads gnutls keeps a pointer to cred, and not the whole
cred structure.  Thus you will have to keep the structure allocated
until you call <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>.
</para>
<para>
For <link linkend="GNUTLS-CRD-ANON:CAPS"><literal>GNUTLS_CRD_ANON</literal></link>, <parameter>cred</parameter> should be
<link linkend="gnutls-anon-client-credentials-t"><type>gnutls_anon_client_credentials_t</type></link> in case of a client.  In case of
a server it should be <link linkend="gnutls-anon-server-credentials-t"><type>gnutls_anon_server_credentials_t</type></link>.
</para>
<para>
For <link linkend="GNUTLS-CRD-SRP:CAPS"><literal>GNUTLS_CRD_SRP</literal></link>, <parameter>cred</parameter> should be <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link>
in case of a client, and <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link>, in case
of a server.
</para>
<para>
For <link linkend="GNUTLS-CRD-CERTIFICATE:CAPS"><literal>GNUTLS_CRD_CERTIFICATE</literal></link>, <parameter>cred</parameter> should be
<link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>is the type of the credentials</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-credentials-type-t" role="enum">
<title>enum gnutls_credentials_type_t</title>
<indexterm zone="gnutls-credentials-type-t"><primary>gnutls_credentials_type_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_CRD_CERTIFICATE = 1,
    GNUTLS_CRD_ANON,
    GNUTLS_CRD_SRP,
    GNUTLS_CRD_PSK,
    GNUTLS_CRD_IA
} gnutls_credentials_type_t;
</programlisting>
<para>
Enumeration of different credential types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-CRD-CERTIFICATE:CAPS" role="constant">
<term><literal>GNUTLS_CRD_CERTIFICATE</literal></term>
<listitem><simpara>Certificate credential.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRD-ANON:CAPS" role="constant">
<term><literal>GNUTLS_CRD_ANON</literal></term>
<listitem><simpara>Anonymous credential.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRD-SRP:CAPS" role="constant">
<term><literal>GNUTLS_CRD_SRP</literal></term>
<listitem><simpara>SRP credential.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRD-PSK:CAPS" role="constant">
<term><literal>GNUTLS_CRD_PSK</literal></term>
<listitem><simpara>PSK credential.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-CRD-IA:CAPS" role="constant">
<term><literal>GNUTLS_CRD_IA</literal></term>
<listitem><simpara>IA credential.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-check-entry" role="function">
<title>gnutls_db_check_entry ()</title>
<indexterm zone="gnutls-db-check-entry"><primary>gnutls_db_check_entry</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_db_check_entry               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> session_entry</parameter>);</programlisting>
<para>
Check if database entry has expired.  This function is to be used
when you want to clear unnecessary sessions which occupy space in
your backend.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_entry</parameter>&#160;:</term>
<listitem><simpara>is the session data (not key)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Returns <link linkend="GNUTLS-E-EXPIRED:CAPS"><literal>GNUTLS_E_EXPIRED</literal></link>, if the database entry has
expired or 0 otherwise.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-get-ptr" role="function">
<title>gnutls_db_get_ptr ()</title>
<indexterm zone="gnutls-db-get-ptr"><primary>gnutls_db_get_ptr</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              gnutls_db_get_ptr                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get db function pointer.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the pointer that will be sent to db store, retrieve and
delete functions, as the first argument.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-remove-func" role="function">
<title>gnutls_db_remove_func ()</title>
<indexterm zone="gnutls-db-remove-func"><primary>gnutls_db_remove_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_db_remove_func)            (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-db-remove-session" role="function">
<title>gnutls_db_remove_session ()</title>
<indexterm zone="gnutls-db-remove-session"><primary>gnutls_db_remove_session</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_remove_session            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will remove the current session data from the
session database.  This will prevent future handshakes reusing
these session data.  This function should be called if a session
was terminated abnormally, and before <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> is called.
</para>
<para>
Normally <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link> will remove abnormally terminated
sessions.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-retr-func" role="function">
<title>gnutls_db_retr_func ()</title>
<indexterm zone="gnutls-db-retr-func"><primary>gnutls_db_retr_func</primary></indexterm>
<programlisting><link linkend="gnutls-datum-t"><returnvalue>gnutls_datum_t</returnvalue></link>      (*gnutls_db_retr_func)              (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-db-set-cache-expiration" role="function">
<title>gnutls_db_set_cache_expiration ()</title>
<indexterm zone="gnutls-db-set-cache-expiration"><primary>gnutls_db_set_cache_expiration</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_set_cache_expiration      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> seconds</parameter>);</programlisting>
<para>
Set the expiration time for resumed sessions. The default is 3600
(one hour) at the time of this writing.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seconds</parameter>&#160;:</term>
<listitem><simpara>is the number of seconds.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-ptr" role="function">
<title>gnutls_db_set_ptr ()</title>
<indexterm zone="gnutls-db-set-ptr"><primary>gnutls_db_set_ptr</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_set_ptr                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);</programlisting>
<para>
Sets the pointer that will be provided to db store, retrieve and
delete functions, as the first argument.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>is the pointer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-remove-function" role="function">
<title>gnutls_db_set_remove_function ()</title>
<indexterm zone="gnutls-db-set-remove-function"><primary>gnutls_db_set_remove_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_set_remove_function       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-remove-func"><type>gnutls_db_remove_func</type></link> rem_func</parameter>);</programlisting>
<para>
Sets the function that will be used to remove data from the
resumed sessions database. This function must return 0 on success.
</para>
<para>
The first argument to <parameter>rem_func</parameter> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>rem_func</parameter>&#160;:</term>
<listitem><simpara>is the function.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-retrieve-function" role="function">
<title>gnutls_db_set_retrieve_function ()</title>
<indexterm zone="gnutls-db-set-retrieve-function"><primary>gnutls_db_set_retrieve_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_set_retrieve_function     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-retr-func"><type>gnutls_db_retr_func</type></link> retr_func</parameter>);</programlisting>
<para>
Sets the function that will be used to retrieve data from the
resumed sessions database.  This function must return a
gnutls_datum_t containing the data on success, or a gnutls_datum_t
containing null and 0 on failure.
</para>
<para>
The datum's data must be allocated using the function
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
The first argument to <parameter>retr_func</parameter> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>retr_func</parameter>&#160;:</term>
<listitem><simpara>is the function.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-set-store-function" role="function">
<title>gnutls_db_set_store_function ()</title>
<indexterm zone="gnutls-db-set-store-function"><primary>gnutls_db_set_store_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_db_set_store_function        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-db-store-func"><type>gnutls_db_store_func</type></link> store_func</parameter>);</programlisting>
<para>
Sets the function that will be used to store data in the resumed
sessions database. This function must return 0 on success.
</para>
<para>
The first argument to <parameter>store_func</parameter> will be null unless
<link linkend="gnutls-db-set-ptr"><function>gnutls_db_set_ptr()</function></link> has been called.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>store_func</parameter>&#160;:</term>
<listitem><simpara>is the function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-db-store-func" role="function">
<title>gnutls_db_store_func ()</title>
<indexterm zone="gnutls-db-store-func"><primary>gnutls_db_store_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_db_store_func)             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> data</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-deinit" role="function">
<title>gnutls_deinit ()</title>
<indexterm zone="gnutls-deinit"><primary>gnutls_deinit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_deinit                       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function clears all buffers associated with the <parameter>session</parameter>.
This function will also remove session data from the session
database if the session was terminated abnormally.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-group" role="function">
<title>gnutls_dh_get_group ()</title>
<indexterm zone="gnutls-dh-get-group"><primary>gnutls_dh_get_group</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_get_group                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_gen</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_prime</parameter>);</programlisting>
<para>
This function will return the group parameters used in the last
Diffie-Hellman key exchange with the peer.  These are the prime and
the generator used.  This function should be used for both
anonymous and ephemeral Diffie-Hellman.  The output parameters must
be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_gen</parameter>&#160;:</term>
<listitem><simpara>will hold the generator.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_prime</parameter>&#160;:</term>
<listitem><simpara>will hold the prime.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-peers-public-bits" role="function">
<title>gnutls_dh_get_peers_public_bits ()</title>
<indexterm zone="gnutls-dh-get-peers-public-bits"><primary>gnutls_dh_get_peers_public_bits</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_get_peers_public_bits     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get the Diffie-Hellman public key bit size.  Can be used for both
anonymous and ephemeral Diffie-Hellman.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The public key bit size used in the last Diffie-Hellman
key exchange with the peer, or a negative error code in case of error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-prime-bits" role="function">
<title>gnutls_dh_get_prime_bits ()</title>
<indexterm zone="gnutls-dh-get-prime-bits"><primary>gnutls_dh_get_prime_bits</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_get_prime_bits            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will return the bits of the prime used in the last
Diffie-Hellman key exchange with the peer.  Should be used for both
anonymous and ephemeral Diffie-Hellman.  Note that some ciphers,
like RSA and DSA without DHE, do not use a Diffie-Hellman key
exchange, and then this function will return 0.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The Diffie-Hellman bit strength is returned, or 0 if no
Diffie-Hellman key exchange was done, or a negative error code on
failure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-pubkey" role="function">
<title>gnutls_dh_get_pubkey ()</title>
<indexterm zone="gnutls-dh-get-pubkey"><primary>gnutls_dh_get_pubkey</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_get_pubkey                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *raw_key</parameter>);</programlisting>
<para>
This function will return the peer's public key used in the last
Diffie-Hellman key exchange.  This function should be used for both
anonymous and ephemeral Diffie-Hellman.  The output parameters must
be freed with <link linkend="gnutls-free"><function>gnutls_free()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>raw_key</parameter>&#160;:</term>
<listitem><simpara>will hold the public key.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-get-secret-bits" role="function">
<title>gnutls_dh_get_secret_bits ()</title>
<indexterm zone="gnutls-dh-get-secret-bits"><primary>gnutls_dh_get_secret_bits</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_get_secret_bits           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will return the bits used in the last Diffie-Hellman
key exchange with the peer.  Should be used for both anonymous and
ephemeral Diffie-Hellman.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-cpy" role="function">
<title>gnutls_dh_params_cpy ()</title>
<indexterm zone="gnutls-dh-params-cpy"><primary>gnutls_dh_params_cpy</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_cpy                (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dst</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> src</parameter>);</programlisting>
<para>
This function will copy the DH parameters structure from source
to destination.
</para><variablelist role="params">
<varlistentry><term><parameter>dst</parameter>&#160;:</term>
<listitem><simpara>Is the destination structure, which should be initialized.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&#160;:</term>
<listitem><simpara>Is the source structure</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-deinit" role="function">
<title>gnutls_dh_params_deinit ()</title>
<indexterm zone="gnutls-dh-params-deinit"><primary>gnutls_dh_params_deinit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_dh_params_deinit             (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);</programlisting>
<para>
This function will deinitialize the DH parameters structure.
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>Is a structure that holds the prime numbers</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-export2-pkcs3" role="function">
<title>gnutls_dh_params_export2_pkcs3 ()</title>
<indexterm zone="gnutls-dh-params-export2-pkcs3"><primary>gnutls_dh_params_export2_pkcs3</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_export2_pkcs3      (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *out</parameter>);</programlisting>
<para>
This function will export the given dh parameters to a PKCS3
DHParams structure. This is the format generated by "openssl dhparam" tool.
The data in <parameter>out</parameter> will be allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN DH PARAMETERS".
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara>Holds the DH parameters</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>the format of output params. One of PEM or DER.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>will contain a PKCS3 DHParams structure PEM or DER encoded</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-export-pkcs3" role="function">
<title>gnutls_dh_params_export_pkcs3 ()</title>
<indexterm zone="gnutls-dh-params-export-pkcs3"><primary>gnutls_dh_params_export_pkcs3</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_export_pkcs3       (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *params_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *params_data_size</parameter>);</programlisting>
<para>
This function will export the given dh parameters to a PKCS3
DHParams structure. This is the format generated by "openssl dhparam" tool.
If the buffer provided is not long enough to hold the output, then
GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.
</para>
<para>
If the structure is PEM encoded, it will have a header
of "BEGIN DH PARAMETERS".
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara>Holds the DH parameters</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>the format of output params. One of PEM or DER.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data</parameter>&#160;:</term>
<listitem><simpara>will contain a PKCS3 DHParams structure PEM or DER encoded</simpara></listitem></varlistentry>
<varlistentry><term><parameter>params_data_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of params_data (and will be replaced by the actual size of parameters)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-export-raw" role="function">
<title>gnutls_dh_params_export_raw ()</title>
<indexterm zone="gnutls-dh-params-export-raw"><primary>gnutls_dh_params_export_raw</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_export_raw         (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *bits</parameter>);</programlisting>
<para>
This function will export the pair of prime and generator for use
in the Diffie-Hellman key exchange.  The new parameters will be
allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the
appropriate datum.
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara>Holds the DH parameters</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara>will hold the new prime</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara>will hold the new generator</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>if non null will hold the secret key's number of bits</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-generate2" role="function">
<title>gnutls_dh_params_generate2 ()</title>
<indexterm zone="gnutls-dh-params-generate2"><primary>gnutls_dh_params_generate2</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_generate2          (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);</programlisting>
<para>
This function will generate a new pair of prime and generator for use in
the Diffie-Hellman key exchange. The new parameters will be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link> and will be stored in the appropriate datum.
This function is normally slow.
</para>
<para>
Do not set the number of bits directly, use <link linkend="gnutls-sec-param-to-pk-bits"><function>gnutls_sec_param_to_pk_bits()</function></link> to
get bits for <link linkend="GNUTLS-PK-DSA:CAPS"><literal>GNUTLS_PK_DSA</literal></link>.
Also note that the DH parameters are only useful to servers.
Since clients use the parameters sent by the server, it's of
no use to call this in client side.
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara>Is the structure that the DH parameters will be stored</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>is the prime's number of bits</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-import-pkcs3" role="function">
<title>gnutls_dh_params_import_pkcs3 ()</title>
<indexterm zone="gnutls-dh-params-import-pkcs3"><primary>gnutls_dh_params_import_pkcs3</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_import_pkcs3       (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> params</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pkcs3_params</parameter>,
                                                         <parameter><link linkend="gnutls-x509-crt-fmt-t"><type>gnutls_x509_crt_fmt_t</type></link> format</parameter>);</programlisting>
<para>
This function will extract the DHParams found in a PKCS3 formatted
structure. This is the format generated by "openssl dhparam" tool.
</para>
<para>
If the structure is PEM encoded, it should have a header
of "BEGIN DH PARAMETERS".
</para><variablelist role="params">
<varlistentry><term><parameter>params</parameter>&#160;:</term>
<listitem><simpara>A structure where the parameters will be copied to</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pkcs3_params</parameter>&#160;:</term>
<listitem><simpara>should contain a PKCS3 DHParams structure PEM or DER encoded</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>the format of params. PEM or DER.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-import-raw" role="function">
<title>gnutls_dh_params_import_raw ()</title>
<indexterm zone="gnutls-dh-params-import-raw"><primary>gnutls_dh_params_import_raw</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_import_raw         (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>);</programlisting>
<para>
This function will replace the pair of prime and generator for use
in the Diffie-Hellman key exchange.  The new parameters should be
stored in the appropriate gnutls_datum.
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>Is a structure that will hold the prime numbers</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara>holds the new prime</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara>holds the new generator</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-init" role="function">
<title>gnutls_dh_params_init ()</title>
<indexterm zone="gnutls-dh-params-init"><primary>gnutls_dh_params_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_dh_params_init               (<parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> *dh_params</parameter>);</programlisting>
<para>
This function will initialize the DH parameters structure.
</para><variablelist role="params">
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>Is a structure that will hold the prime numbers</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-dh-params-int" role="struct">
<title>struct gnutls_dh_params_int</title>
<indexterm zone="gnutls-dh-params-int"><primary>gnutls_dh_params_int</primary></indexterm>
<programlisting>struct gnutls_dh_params_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-dh-params-t" role="typedef">
<title>gnutls_dh_params_t</title>
<indexterm zone="gnutls-dh-params-t"><primary>gnutls_dh_params_t</primary></indexterm>
<programlisting>  typedef struct gnutls_dh_params_int *gnutls_dh_params_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-dh-set-prime-bits" role="function">
<title>gnutls_dh_set_prime_bits ()</title>
<indexterm zone="gnutls-dh-set-prime-bits"><primary>gnutls_dh_set_prime_bits</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_dh_set_prime_bits            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);</programlisting>
<para>
This function sets the number of bits, for use in a Diffie-Hellman
key exchange.  This is used both in DH ephemeral and DH anonymous
cipher suites.  This will set the minimum size of the prime that
will be used for the handshake.
</para>
<para>
In the client side it sets the minimum accepted number of bits.  If
a server sends a prime with less bits than that
<link linkend="GNUTLS-E-DH-PRIME-UNACCEPTABLE:CAPS"><literal>GNUTLS_E_DH_PRIME_UNACCEPTABLE</literal></link> will be returned by the handshake.
</para>
<para>
Note that values lower than 512 bits may allow decryption of the
exchanged data.
</para>
<para>
This function has no effect in server side.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>is the number of bits</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-digest-algorithm-t" role="enum">
<title>enum gnutls_digest_algorithm_t</title>
<indexterm zone="gnutls-digest-algorithm-t"><primary>gnutls_digest_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_DIG_UNKNOWN = GNUTLS_MAC_UNKNOWN,
    GNUTLS_DIG_NULL = GNUTLS_MAC_NULL,
    GNUTLS_DIG_MD5 = GNUTLS_MAC_MD5,
    GNUTLS_DIG_SHA1 = GNUTLS_MAC_SHA1,
    GNUTLS_DIG_RMD160 = GNUTLS_MAC_RMD160,
    GNUTLS_DIG_MD2 = GNUTLS_MAC_MD2,
    GNUTLS_DIG_SHA256 = GNUTLS_MAC_SHA256,
    GNUTLS_DIG_SHA384 = GNUTLS_MAC_SHA384,
    GNUTLS_DIG_SHA512 = GNUTLS_MAC_SHA512,
    GNUTLS_DIG_SHA224 = GNUTLS_MAC_SHA224
      /* If you add anything here, make sure you align with
         gnutls_mac_algorithm_t. */
} gnutls_digest_algorithm_t;
</programlisting>
<para>
Enumeration of different digest (hash) algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-DIG-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_DIG_UNKNOWN</literal></term>
<listitem><simpara>Unknown hash algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-NULL:CAPS" role="constant">
<term><literal>GNUTLS_DIG_NULL</literal></term>
<listitem><simpara>NULL hash algorithm (empty output).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-MD5:CAPS" role="constant">
<term><literal>GNUTLS_DIG_MD5</literal></term>
<listitem><simpara>MD5 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-SHA1:CAPS" role="constant">
<term><literal>GNUTLS_DIG_SHA1</literal></term>
<listitem><simpara>SHA-1 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-RMD160:CAPS" role="constant">
<term><literal>GNUTLS_DIG_RMD160</literal></term>
<listitem><simpara>RMD160 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-MD2:CAPS" role="constant">
<term><literal>GNUTLS_DIG_MD2</literal></term>
<listitem><simpara>MD2 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-SHA256:CAPS" role="constant">
<term><literal>GNUTLS_DIG_SHA256</literal></term>
<listitem><simpara>SHA-256 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-SHA384:CAPS" role="constant">
<term><literal>GNUTLS_DIG_SHA384</literal></term>
<listitem><simpara>SHA-384 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-SHA512:CAPS" role="constant">
<term><literal>GNUTLS_DIG_SHA512</literal></term>
<listitem><simpara>SHA-512 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DIG-SHA224:CAPS" role="constant">
<term><literal>GNUTLS_DIG_SHA224</literal></term>
<listitem><simpara>SHA-224 algorithm.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ecc-curve-get" role="function" condition="since:3.0">
<title>gnutls_ecc_curve_get ()</title>
<indexterm zone="gnutls-ecc-curve-get" role="3.0"><primary>gnutls_ecc_curve_get</primary></indexterm>
<programlisting><link linkend="gnutls-ecc-curve-t"><returnvalue>gnutls_ecc_curve_t</returnvalue></link>  gnutls_ecc_curve_get                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Returns the currently used elliptic curve. Only valid
when using an elliptic curve ciphersuite.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the currently used curve, a <link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link>
type.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-ecc-curve-get-name" role="function" condition="since:3.0">
<title>gnutls_ecc_curve_get_name ()</title>
<indexterm zone="gnutls-ecc-curve-get-name" role="3.0"><primary>gnutls_ecc_curve_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_ecc_curve_get_name           (<parameter><link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link> curve</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>curve</parameter>&#160;:</term>
<listitem><simpara>is an ECC curve</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified
curve or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-ecc-curve-get-size" role="function" condition="since:3.0">
<title>gnutls_ecc_curve_get_size ()</title>
<indexterm zone="gnutls-ecc-curve-get-size" role="3.0"><primary>gnutls_ecc_curve_get_size</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_ecc_curve_get_size           (<parameter><link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link> curve</parameter>);</programlisting>
<para>
Returns the size in bytes of the curve.
</para><variablelist role="params">
<varlistentry><term><parameter>curve</parameter>&#160;:</term>
<listitem><simpara>is an ECC curve</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a the size or (0).</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-ecc-curve-list" role="function">
<title>gnutls_ecc_curve_list ()</title>
<indexterm zone="gnutls-ecc-curve-list"><primary>gnutls_ecc_curve_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-ecc-curve-t"><returnvalue>gnutls_ecc_curve_t</returnvalue></link> * gnutls_ecc_curve_list        (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get the list of supported elliptic curves.
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Return a (0)-terminated list of <link linkend="gnutls-ecc-curve-t"><type>gnutls_ecc_curve_t</type></link>
integers indicating the available curves.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ecc-curve-t" role="enum">
<title>enum gnutls_ecc_curve_t</title>
<indexterm zone="gnutls-ecc-curve-t"><primary>gnutls_ecc_curve_t</primary></indexterm>
<programlisting>typedef enum {
  GNUTLS_ECC_CURVE_INVALID=0,
  GNUTLS_ECC_CURVE_SECP224R1,
  GNUTLS_ECC_CURVE_SECP256R1,
  GNUTLS_ECC_CURVE_SECP384R1,
  GNUTLS_ECC_CURVE_SECP521R1,
  GNUTLS_ECC_CURVE_SECP192R1,
} gnutls_ecc_curve_t;
</programlisting>
<para>
Enumeration of ECC curves.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-ECC-CURVE-INVALID:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_INVALID</literal></term>
<listitem><simpara>Cannot be known
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-ECC-CURVE-SECP224R1:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_SECP224R1</literal></term>
<listitem><simpara>the SECP224R1 curve
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-ECC-CURVE-SECP256R1:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_SECP256R1</literal></term>
<listitem><simpara>the SECP256R1 curve
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-ECC-CURVE-SECP384R1:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_SECP384R1</literal></term>
<listitem><simpara>the SECP384R1 curve
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-ECC-CURVE-SECP521R1:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_SECP521R1</literal></term>
<listitem><simpara>the SECP521R1 curve
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-ECC-CURVE-SECP192R1:CAPS" role="constant">
<term><literal>GNUTLS_ECC_CURVE_SECP192R1</literal></term>
<listitem><simpara>the SECP192R1 curve
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ecdh-params-int" role="struct">
<title>struct gnutls_ecdh_params_int</title>
<indexterm zone="gnutls-ecdh-params-int"><primary>gnutls_ecdh_params_int</primary></indexterm>
<programlisting>struct gnutls_ecdh_params_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-ecdh-params-t" role="typedef">
<title>gnutls_ecdh_params_t</title>
<indexterm zone="gnutls-ecdh-params-t"><primary>gnutls_ecdh_params_t</primary></indexterm>
<programlisting>  typedef struct gnutls_ecdh_params_int *gnutls_ecdh_params_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-errno-func" role="function">
<title>gnutls_errno_func ()</title>
<indexterm zone="gnutls-errno-func"><primary>gnutls_errno_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_errno_func)                (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-error-is-fatal" role="function">
<title>gnutls_error_is_fatal ()</title>
<indexterm zone="gnutls-error-is-fatal"><primary>gnutls_error_is_fatal</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_error_is_fatal               (<parameter><link linkend="int"><type>int</type></link> error</parameter>);</programlisting>
<para>
If a GnuTLS function returns a negative error code you may feed that
value to this function to see if the error condition is fatal. 
Note that you may also want to check the error code manually, since some
non-fatal errors to the protocol (such as a warning alert or
a rehandshake request) may be fatal for your program.
</para>
<para>
This function is only useful if you are dealing with errors from
the record layer or the handshake layer.
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>is a GnuTLS error code, a negative error code</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>1 if the error code is fatal, for positive <parameter>error</parameter> values,
0 is returned.  For unknown <parameter>error</parameter> values, -1 is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-error-to-alert" role="function">
<title>gnutls_error_to_alert ()</title>
<indexterm zone="gnutls-error-to-alert"><primary>gnutls_error_to_alert</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_error_to_alert               (<parameter><link linkend="int"><type>int</type></link> err</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> *level</parameter>);</programlisting>
<para>
Get an alert depending on the error code returned by a gnutls
function.  All alerts sent by this function should be considered
fatal.  The only exception is when <parameter>err</parameter> is <link linkend="GNUTLS-E-REHANDSHAKE:CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link>,
where a warning alert should be sent to the peer indicating that no
renegotiation will be performed.
</para>
<para>
If there is no mapping to a valid alert the alert to indicate
internal error is returned.
</para><variablelist role="params">
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara>is a negative integer</simpara></listitem></varlistentry>
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>the alert level will be stored there</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the alert code to use for a particular error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-fingerprint" role="function">
<title>gnutls_fingerprint ()</title>
<indexterm zone="gnutls-fingerprint"><primary>gnutls_fingerprint</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_fingerprint                  (<parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will calculate a fingerprint (actually a hash), of
the given data.  The result is not printable data.  You should
convert it to hex, or to something else printable.
</para>
<para>
This is the usual way to calculate a fingerprint of an X.509 DER
encoded certificate.  Note however that the fingerprint of an
OpenPGP is not just a hash and cannot be calculated with this
function.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>is a digest algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>is the data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>is the place where the result will be copied (may be null).</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>should hold the size of the result. The actual size
of the returned result will also be copied there.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-free" role="variable">
<title>gnutls_free</title>
<indexterm zone="gnutls-free"><primary>gnutls_free</primary></indexterm>
<programlisting>  extern gnutls_free_function gnutls_free;
</programlisting>
<para>
This function will free data pointed by ptr.
</para>
<para>
The deallocation function used is the one set by
<link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.
</para></refsect2>
<refsect2 id="gnutls-free-function" role="function">
<title>gnutls_free_function ()</title>
<indexterm zone="gnutls-free-function"><primary>gnutls_free_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*gnutls_free_function)             (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-global-deinit" role="function">
<title>gnutls_global_deinit ()</title>
<indexterm zone="gnutls-global-deinit"><primary>gnutls_global_deinit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_deinit                (<parameter><type>void</type></parameter>);</programlisting>
<para>
This function deinitializes the global data, that were initialized
using <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.
</para>
<para>
Note!  This function is not thread safe.  See the discussion for
<link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> for more information.
</para></refsect2>
<refsect2 id="gnutls-global-init" role="function">
<title>gnutls_global_init ()</title>
<indexterm zone="gnutls-global-init"><primary>gnutls_global_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_global_init                  (<parameter><type>void</type></parameter>);</programlisting>
<para>
This function initializes the global data to defaults.  
In order to free resources you may call <link linkend="gnutls-global-deinit"><function>gnutls_global_deinit()</function></link> 
when gnutls usage is no longer needed.
</para>
<para>
Note that this function will also initialize the underlying crypto
backend, if it has not been initialized before.  
</para>
<para>
This function increments a global counter, so that
<link linkend="gnutls-global-deinit"><function>gnutls_global_deinit()</function></link> only releases resources when it has been
called as many times as <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.  This is useful when
GnuTLS is used by more than one library in an application.  This
function can be called many times, but will only do something the
first time.
</para>
<para>
Note!  This function is not thread safe.  If two threads call this
function simultaneously, they can cause a race between checking
the global counter and incrementing it, causing both threads to
execute the library initialization code.  That would lead to a
memory leak.  To handle this, your application could invoke this
function after aquiring a thread mutex.  To ignore the potential
memory leak is also an option.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-audit-log-function" role="function" condition="since:3.0">
<title>gnutls_global_set_audit_log_function ()</title>
<indexterm zone="gnutls-global-set-audit-log-function" role="3.0"><primary>gnutls_global_set_audit_log_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_audit_log_function
                                                        (<parameter><link linkend="gnutls-audit-log-func"><type>gnutls_audit_log_func</type></link> log_func</parameter>);</programlisting>
<para>
This is the function where you set the logging function gnutls is
going to use.  This is different from <link linkend="gnutls-global-set-log-function"><function>gnutls_global_set_log_function()</function></link>
because it will report the session of the event if any. Note that
that session might be null if there is no corresponding TLS session.
</para>
<para>
<parameter>gnutls_audit_log_func</parameter> is of the form,
void (*gnutls_audit_log_func)( gnutls_session_t, const char*);
</para><variablelist role="params">
<varlistentry><term><parameter>log_func</parameter>&#160;:</term>
<listitem><simpara>it is the audit log function</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-global-set-log-function" role="function">
<title>gnutls_global_set_log_function ()</title>
<indexterm zone="gnutls-global-set-log-function"><primary>gnutls_global_set_log_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_log_function      (<parameter><link linkend="gnutls-log-func"><type>gnutls_log_func</type></link> log_func</parameter>);</programlisting>
<para>
This is the function where you set the logging function gnutls is
going to use.  This function only accepts a character array.
Normally you may not use this function since it is only used for
debugging purposes.
</para>
<para>
<parameter>gnutls_log_func</parameter> is of the form,
void (*gnutls_log_func)( int level, const char*);
</para><variablelist role="params">
<varlistentry><term><parameter>log_func</parameter>&#160;:</term>
<listitem><simpara>it's a log function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-log-level" role="function">
<title>gnutls_global_set_log_level ()</title>
<indexterm zone="gnutls-global-set-log-level"><primary>gnutls_global_set_log_level</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_log_level         (<parameter><link linkend="int"><type>int</type></link> level</parameter>);</programlisting>
<para>
This is the function that allows you to set the log level.  The
level is an integer between 0 and 9.  Higher values mean more
verbosity. The default value is 0.  Larger values should only be
used with care, since they may reveal sensitive information.
</para>
<para>
Use a log level over 10 to enable all debugging options.
</para><variablelist role="params">
<varlistentry><term><parameter>level</parameter>&#160;:</term>
<listitem><simpara>it's an integer from 0 to 9.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-mem-functions" role="function">
<title>gnutls_global_set_mem_functions ()</title>
<indexterm zone="gnutls-global-set-mem-functions"><primary>gnutls_global_set_mem_functions</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_mem_functions     (<parameter><link linkend="gnutls-alloc-function"><type>gnutls_alloc_function</type></link> alloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-alloc-function"><type>gnutls_alloc_function</type></link> secure_alloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-is-secure-function"><type>gnutls_is_secure_function</type></link> is_secure_func</parameter>,
                                                         <parameter><link linkend="gnutls-realloc-function"><type>gnutls_realloc_function</type></link> realloc_func</parameter>,
                                                         <parameter><link linkend="gnutls-free-function"><type>gnutls_free_function</type></link> free_func</parameter>);</programlisting>
<para>
This is the function where you set the memory allocation functions
gnutls is going to use. By default the libc's allocation functions
(<link linkend="malloc"><function>malloc()</function></link>, <link linkend="free"><function>free()</function></link>), are used by gnutls, to allocate both sensitive
and not sensitive data.  This function is provided to set the
memory allocation functions to something other than the defaults
</para>
<para>
This function must be called before <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link> is called.
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><parameter>alloc_func</parameter>&#160;:</term>
<listitem><simpara>it's the default memory allocation function. Like <link linkend="malloc"><function>malloc()</function></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>secure_alloc_func</parameter>&#160;:</term>
<listitem><simpara>This is the memory allocation function that will be used for sensitive data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_secure_func</parameter>&#160;:</term>
<listitem><simpara>a function that returns 0 if the memory given is not secure. May be NULL.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>realloc_func</parameter>&#160;:</term>
<listitem><simpara>A realloc function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>free_func</parameter>&#160;:</term>
<listitem><simpara>The function that frees allocated data. Must accept a NULL pointer.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-global-set-mutex" role="function" condition="since:2.12.0">
<title>gnutls_global_set_mutex ()</title>
<indexterm zone="gnutls-global-set-mutex" role="2.12.0"><primary>gnutls_global_set_mutex</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_mutex             (<parameter><link linkend="mutex-init-func"><type>mutex_init_func</type></link> init</parameter>,
                                                         <parameter><link linkend="mutex-deinit-func"><type>mutex_deinit_func</type></link> deinit</parameter>,
                                                         <parameter><link linkend="mutex-lock-func"><type>mutex_lock_func</type></link> lock</parameter>,
                                                         <parameter><link linkend="mutex-unlock-func"><type>mutex_unlock_func</type></link> unlock</parameter>);</programlisting>
<para>
With this function you are allowed to override the default mutex
locks used in some parts of gnutls and dependent libraries. This function
should be used if you have complete control of your program and libraries.
Do not call this function from a library. Instead only initialize gnutls and
the default OS mutex locks will be used.
</para>
<para>
This function must be called before <link linkend="gnutls-global-init"><function>gnutls_global_init()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>init</parameter>&#160;:</term>
<listitem><simpara>mutex initialization function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>deinit</parameter>&#160;:</term>
<listitem><simpara>mutex deinitialization function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>lock</parameter>&#160;:</term>
<listitem><simpara>mutex locking function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unlock</parameter>&#160;:</term>
<listitem><simpara>mutex unlocking function</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-global-set-time-function" role="function" condition="since:2.12.0">
<title>gnutls_global_set_time_function ()</title>
<indexterm zone="gnutls-global-set-time-function" role="2.12.0"><primary>gnutls_global_set_time_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_global_set_time_function     (<parameter><link linkend="gnutls-time-func"><type>gnutls_time_func</type></link> time_func</parameter>);</programlisting>
<para>
This is the function where you can override the default system time
function.  The application provided function should behave the same
as the standard function.
</para><variablelist role="params">
<varlistentry><term><parameter>time_func</parameter>&#160;:</term>
<listitem><simpara>it's the system time function, a <link linkend="gnutls-time-func"><function>gnutls_time_func()</function></link> callback.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-handshake" role="function">
<title>gnutls_handshake ()</title>
<indexterm zone="gnutls-handshake"><primary>gnutls_handshake</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_handshake                    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function does the handshake of the TLS/SSL protocol, and
initializes the TLS connection.
</para>
<para>
This function will fail if any problem is encountered, and will
return a negative error code. In case of a client, if the client
has asked to resume a session, but the server couldn't, then a
full handshake will be performed.
</para>
<para>
The non-fatal errors such as <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> and
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> interrupt the handshake procedure, which
should be resumed later.  Call this function again, until it
returns 0; cf.  <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> and
<link linkend="gnutls-error-is-fatal"><function>gnutls_error_is_fatal()</function></link>.
</para>
<para>
If this function is called by a server after a rehandshake request
then <link linkend="GNUTLS-E-GOT-APPLICATION-DATA:CAPS"><literal>GNUTLS_E_GOT_APPLICATION_DATA</literal></link> or
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> may be returned.  Note that these
are non fatal errors, only in the specific case of a rehandshake.
Their meaning is that the client rejected the rehandshake request or
in the case of <link linkend="GNUTLS-E-GOT-APPLICATION-DATA:CAPS"><literal>GNUTLS_E_GOT_APPLICATION_DATA</literal></link> it might also mean that
some data were pending.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise a negative error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-description-t" role="enum">
<title>enum gnutls_handshake_description_t</title>
<indexterm zone="gnutls-handshake-description-t"><primary>gnutls_handshake_description_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_HANDSHAKE_HELLO_REQUEST = 0,
    GNUTLS_HANDSHAKE_CLIENT_HELLO = 1,
    GNUTLS_HANDSHAKE_SERVER_HELLO = 2,
    GNUTLS_HANDSHAKE_HELLO_VERIFY_REQUEST = 3,
    GNUTLS_HANDSHAKE_NEW_SESSION_TICKET = 4,
    GNUTLS_HANDSHAKE_CERTIFICATE_PKT = 11,
    GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE = 12,
    GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST = 13,
    GNUTLS_HANDSHAKE_SERVER_HELLO_DONE = 14,
    GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY = 15,
    GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE = 16,
    GNUTLS_HANDSHAKE_FINISHED = 20,
    GNUTLS_HANDSHAKE_CERTIFICATE_STATUS = 22,
    GNUTLS_HANDSHAKE_SUPPLEMENTAL = 23,
    GNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC = 254,
    GNUTLS_HANDSHAKE_CLIENT_HELLO_V2 = 1024,
} gnutls_handshake_description_t;
</programlisting>
<para>
Enumeration of different TLS handshake packets.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-HANDSHAKE-HELLO-REQUEST:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_HELLO_REQUEST</literal></term>
<listitem><simpara>Hello request.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CLIENT-HELLO:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CLIENT_HELLO</literal></term>
<listitem><simpara>Client hello.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-SERVER-HELLO:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_SERVER_HELLO</literal></term>
<listitem><simpara>Server hello.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-HELLO-VERIFY-REQUEST:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_HELLO_VERIFY_REQUEST</literal></term>
<listitem><simpara>DTLS Hello verify request.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-NEW-SESSION-TICKET:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_NEW_SESSION_TICKET</literal></term>
<listitem><simpara>New session ticket.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CERTIFICATE-PKT:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CERTIFICATE_PKT</literal></term>
<listitem><simpara>Certificate packet.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-SERVER-KEY-EXCHANGE:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_SERVER_KEY_EXCHANGE</literal></term>
<listitem><simpara>Server key exchange.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CERTIFICATE-REQUEST:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CERTIFICATE_REQUEST</literal></term>
<listitem><simpara>Certificate request.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-SERVER-HELLO-DONE:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_SERVER_HELLO_DONE</literal></term>
<listitem><simpara>Server hello done.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CERTIFICATE-VERIFY:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CERTIFICATE_VERIFY</literal></term>
<listitem><simpara>Certificate verify.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CLIENT-KEY-EXCHANGE:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CLIENT_KEY_EXCHANGE</literal></term>
<listitem><simpara>Client key exchange.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-FINISHED:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_FINISHED</literal></term>
<listitem><simpara>Finished.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CERTIFICATE-STATUS:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CERTIFICATE_STATUS</literal></term>
<listitem><simpara>Certificate status (OCSP).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-SUPPLEMENTAL:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_SUPPLEMENTAL</literal></term>
<listitem><simpara>Supplemental.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CHANGE-CIPHER-SPEC:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CHANGE_CIPHER_SPEC</literal></term>
<listitem><simpara>Change Cipher Spec.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-HANDSHAKE-CLIENT-HELLO-V2:CAPS" role="constant">
<term><literal>GNUTLS_HANDSHAKE_CLIENT_HELLO_V2</literal></term>
<listitem><simpara>SSLv2 Client Hello.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-get-last-in" role="function">
<title>gnutls_handshake_get_last_in ()</title>
<indexterm zone="gnutls-handshake-get-last-in"><primary>gnutls_handshake_get_last_in</primary></indexterm>
<programlisting><link linkend="gnutls-handshake-description-t"><returnvalue>gnutls_handshake_description_t</returnvalue></link> gnutls_handshake_get_last_in
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the last handshake message type received, a
<link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-get-last-out" role="function">
<title>gnutls_handshake_get_last_out ()</title>
<indexterm zone="gnutls-handshake-get-last-out"><primary>gnutls_handshake_get_last_out</primary></indexterm>
<programlisting><link linkend="gnutls-handshake-description-t"><returnvalue>gnutls_handshake_description_t</returnvalue></link> gnutls_handshake_get_last_out
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function is only useful to check where the last performed
handshake failed.  If the previous handshake succeed or was not
performed at all then no meaningful value will be returned.
</para>
<para>
Check <link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link> in gnutls.h for the
available handshake descriptions.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the last handshake message type sent, a
<link linkend="gnutls-handshake-description-t"><literal>gnutls_handshake_description_t</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-post-client-hello-func" role="function">
<title>gnutls_handshake_post_client_hello_func ()</title>
<indexterm zone="gnutls-handshake-post-client-hello-func"><primary>gnutls_handshake_post_client_hello_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_handshake_post_client_hello_func)
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-handshake-set-max-packet-length" role="function">
<title>gnutls_handshake_set_max_packet_length ()</title>
<indexterm zone="gnutls-handshake-set-max-packet-length"><primary>gnutls_handshake_set_max_packet_length</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_handshake_set_max_packet_length
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> max</parameter>);</programlisting>
<para>
This function will set the maximum size of all handshake messages.
Handshakes over this size are rejected with
<link linkend="GNUTLS-E-HANDSHAKE-TOO-LARGE:CAPS"><literal>GNUTLS_E_HANDSHAKE_TOO_LARGE</literal></link> error code.  The default value is
48kb which is typically large enough.  Set this to 0 if you do not
want to set an upper limit.
</para>
<para>
The reason for restricting the handshake message sizes are to
limit Denial of Service attacks.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max</parameter>&#160;:</term>
<listitem><simpara>is the maximum number.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-set-post-client-hello-function" role="function">
<title>gnutls_handshake_set_post_client_hello_function ()</title>
<indexterm zone="gnutls-handshake-set-post-client-hello-function"><primary>gnutls_handshake_set_post_client_hello_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_handshake_set_post_client_hello_function
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-handshake-post-client-hello-func"><type>gnutls_handshake_post_client_hello_func</type></link> func</parameter>);</programlisting>
<para>
This function will set a callback to be called after the client
hello has been received (callback valid in server side only). This
allows the server to adjust settings based on received extensions.
</para>
<para>
Those settings could be ciphersuites, requesting certificate, or
anything else except for version negotiation (this is done before
the hello message is parsed).
</para>
<para>
This callback must return 0 on success or a gnutls error code to
terminate the handshake.
</para>
<para>
Warning: You should not use this function to terminate the
handshake based on client input unless you know what you are
doing. Before the handshake is finished there is no way to know if
there is a man-in-the-middle attack being performed.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-set-private-extensions" role="function">
<title>gnutls_handshake_set_private_extensions ()</title>
<indexterm zone="gnutls-handshake-set-private-extensions"><primary>gnutls_handshake_set_private_extensions</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_handshake_set_private_extensions
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> allow</parameter>);</programlisting>
<para>
This function will enable or disable the use of private cipher
suites (the ones that start with 0xFF).  By default or if <parameter>allow</parameter>
is 0 then these cipher suites will not be advertized nor used.
</para>
<para>
Currently GnuTLS does not include such cipher-suites or
compression algorithms.
</para>
<para>
Enabling the private ciphersuites when talking to other than
gnutls servers and clients may cause interoperability problems.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>allow</parameter>&#160;:</term>
<listitem><simpara>is an integer (0 or 1)</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-handshake-set-timeout" role="function">
<title>gnutls_handshake_set_timeout ()</title>
<indexterm zone="gnutls-handshake-set-timeout"><primary>gnutls_handshake_set_timeout</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_handshake_set_timeout        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> ms</parameter>);</programlisting>
<para>
This function sets the timeout for the handshake process
to the provided value. Use an <parameter>ms</parameter> value of zero to disable
timeout.
</para>
<para>
Note that in order for the timeout to be enforced
<link linkend="gnutls-transport-set-pull-timeout-function"><function>gnutls_transport_set_pull_timeout_function()</function></link> must be set.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ms</parameter>&#160;:</term>
<listitem><simpara>is a timeout value in milliseconds</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-heartbeat-allowed" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_allowed ()</title>
<indexterm zone="gnutls-heartbeat-allowed" role="3.1.2"><primary>gnutls_heartbeat_allowed</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_heartbeat_allowed            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
This function will check whether heartbeats are allowed
to be sent or received in this session.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>one of <link linkend="GNUTLS-HB-LOCAL-ALLOWED-TO-SEND:CAPS"><literal>GNUTLS_HB_LOCAL_ALLOWED_TO_SEND</literal></link> and <link linkend="GNUTLS-HB-PEER-ALLOWED-TO-SEND:CAPS"><literal>GNUTLS_HB_PEER_ALLOWED_TO_SEND</literal></link></simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Non zero if heartbeats are allowed.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-heartbeat-enable" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_enable ()</title>
<indexterm zone="gnutls-heartbeat-enable" role="3.1.2"><primary>gnutls_heartbeat_enable</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_heartbeat_enable             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> type</parameter>);</programlisting>
<para>
This function will allow heartbeat messages to be
received.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>one of the GNUTLS_HB_* flags</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-heartbeat-get-timeout" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_get_timeout ()</title>
<indexterm zone="gnutls-heartbeat-get-timeout" role="3.1.2"><primary>gnutls_heartbeat_get_timeout</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        gnutls_heartbeat_get_timeout        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will return the milliseconds remaining
for a retransmission of the previously sent ping
message. This function is useful when ping is used in
non-blocking mode, to estimate when to call <link linkend="gnutls-heartbeat-ping"><function>gnutls_heartbeat_ping()</function></link>
if no packets have been received.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the remaining time in milliseconds.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-heartbeat-ping" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_ping ()</title>
<indexterm zone="gnutls-heartbeat-ping" role="3.1.2"><primary>gnutls_heartbeat_ping</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_heartbeat_ping               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> max_tries</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function sends a ping to the peer. If the <parameter>flags</parameter> is set
to <link linkend="GNUTLS-HEARTBEAT-WAIT:CAPS"><literal>GNUTLS_HEARTBEAT_WAIT</literal></link> then it waits for a reply from the peer.
</para>
<para>
Note that it is highly recommended to use this function with the
flag <link linkend="GNUTLS-HEARTBEAT-WAIT:CAPS"><literal>GNUTLS_HEARTBEAT_WAIT</literal></link>, or you need to handle retransmissions
and timeouts manually.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara>is the length of the ping payload.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>max_tries</parameter>&#160;:</term>
<listitem><simpara>if flags is <link linkend="GNUTLS-HEARTBEAT-WAIT:CAPS"><literal>GNUTLS_HEARTBEAT_WAIT</literal></link> then this sets the number of retransmissions. Use zero for indefinite (until timeout).</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>if <link linkend="GNUTLS-HEARTBEAT-WAIT:CAPS"><literal>GNUTLS_HEARTBEAT_WAIT</literal></link> then wait for pong or timeout instead of returning immediately.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise a negative error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-heartbeat-pong" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_pong ()</title>
<indexterm zone="gnutls-heartbeat-pong" role="3.1.2"><primary>gnutls_heartbeat_pong</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_heartbeat_pong               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function replies to a ping by sending a pong to the peer.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be zero</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise a negative error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-heartbeat-set-timeouts" role="function" condition="since:3.1.2">
<title>gnutls_heartbeat_set_timeouts ()</title>
<indexterm zone="gnutls-heartbeat-set-timeouts" role="3.1.2"><primary>gnutls_heartbeat_set_timeouts</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_heartbeat_set_timeouts       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> retrans_timeout</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> total_timeout</parameter>);</programlisting>
<para>
This function will set the timeouts required for the DTLS handshake
protocol. The retransmission timeout is the time after which a
message from the peer is not received, the previous messages will
be retransmitted. The total timeout is the time after which the
handshake will be aborted with <link linkend="GNUTLS-E-TIMEDOUT:CAPS"><literal>GNUTLS_E_TIMEDOUT</literal></link>.
</para>
<para>
The DTLS protocol recommends the values of 1 sec and 60 seconds
respectively.
</para>
<para>
If the retransmission timeout is zero then the handshake will operate
in a non-blocking way, i.e., return <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>retrans_timeout</parameter>&#160;:</term>
<listitem><simpara>The time at which a retransmission will occur in milliseconds</simpara></listitem></varlistentry>
<varlistentry><term><parameter>total_timeout</parameter>&#160;:</term>
<listitem><simpara>The time at which the connection will be aborted, in milliseconds.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.2</para></refsect2>
<refsect2 id="gnutls-hex2bin" role="function" condition="since:2.4.0">
<title>gnutls_hex2bin ()</title>
<indexterm zone="gnutls-hex2bin" role="2.4.0"><primary>gnutls_hex2bin</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_hex2bin                      (<parameter>const <link linkend="char"><type>char</type></link> *hex_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> hex_size</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *bin_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *bin_size</parameter>);</programlisting>
<para>
Convert a buffer with hex data to binary data.
</para><variablelist role="params">
<varlistentry><term><parameter>hex_data</parameter>&#160;:</term>
<listitem><simpara>string with data in hex format</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hex_size</parameter>&#160;:</term>
<listitem><simpara>size of hex data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bin_data</parameter>&#160;:</term>
<listitem><simpara>output array with binary data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bin_size</parameter>&#160;:</term>
<listitem><simpara>when calling should hold maximum size of <parameter>bin_data</parameter>,
on return will hold actual length of <parameter>bin_data</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise a negative error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-hex-decode" role="function">
<title>gnutls_hex_decode ()</title>
<indexterm zone="gnutls-hex-decode"><primary>gnutls_hex_decode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_hex_decode                   (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hex_data</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will decode the given encoded data, using the hex
encoding used by PSK password files.
</para>
<para>
Note that hex_data should be null terminated.
</para><variablelist role="params">
<varlistentry><term><parameter>hex_data</parameter>&#160;:</term>
<listitem><simpara>contain the encoded data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where decoded data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-hex-encode" role="function">
<title>gnutls_hex_encode ()</title>
<indexterm zone="gnutls-hex-encode"><primary>gnutls_hex_encode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_hex_encode                   (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will convert the given data to printable data, using
the hex encoding, as used in the PSK password files.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contain the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where hex data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-init" role="function">
<title>gnutls_init ()</title>
<indexterm zone="gnutls-init"><primary>gnutls_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_init                         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> *session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function initializes the current session to null. Every
session must be initialized before use, so internal structures can
be allocated.  This function allocates structures which can only
be free'd by calling <link linkend="gnutls-deinit"><function>gnutls_deinit()</function></link>.  Returns <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para>
<para>
<parameter>flags</parameter> can be one of <link linkend="GNUTLS-CLIENT:CAPS"><literal>GNUTLS_CLIENT</literal></link> and <link linkend="GNUTLS-SERVER:CAPS"><literal>GNUTLS_SERVER</literal></link>. For a DTLS
entity, the flags <link linkend="GNUTLS-DATAGRAM:CAPS"><literal>GNUTLS_DATAGRAM</literal></link> and  <link linkend="GNUTLS-NONBLOCK:CAPS"><literal>GNUTLS_NONBLOCK</literal></link> are
also available. The latter flag will enable a non-blocking
operation of the DTLS timers. 
</para>
<para>
Note that since version 3.1.2 this function enables some common
TLS extensions such as session tickets and OCSP certificate status
request in client side by default. To prevent that use the <link linkend="GNUTLS-NO-EXTENSIONS:CAPS"><literal>GNUTLS_NO_EXTENSIONS</literal></link>
flag.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>indicate if this session is to be used for server or client.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-is-secure-function" role="function">
<title>gnutls_is_secure_function ()</title>
<indexterm zone="gnutls-is-secure-function"><primary>gnutls_is_secure_function</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_is_secure_function)        (<parameter>const <link linkend="void"><type>void</type></link> *Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-key-generate" role="function" condition="since:3.0">
<title>gnutls_key_generate ()</title>
<indexterm zone="gnutls-key-generate" role="3.0"><primary>gnutls_key_generate</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_key_generate                 (<parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_size</parameter>);</programlisting>
<para>
Generates a random key of <parameter>key_bytes</parameter> size.
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> which will contain a newly
created key.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_size</parameter>&#160;:</term>
<listitem><simpara>The number of bytes of the key.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-kx-algorithm-t" role="enum">
<title>enum gnutls_kx_algorithm_t</title>
<indexterm zone="gnutls-kx-algorithm-t"><primary>gnutls_kx_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_KX_UNKNOWN = 0,
    GNUTLS_KX_RSA = 1,
    GNUTLS_KX_DHE_DSS = 2,
    GNUTLS_KX_DHE_RSA = 3,
    GNUTLS_KX_ANON_DH = 4,
    GNUTLS_KX_SRP = 5,
    GNUTLS_KX_RSA_EXPORT = 6,
    GNUTLS_KX_SRP_RSA = 7,
    GNUTLS_KX_SRP_DSS = 8,
    GNUTLS_KX_PSK = 9,
    GNUTLS_KX_DHE_PSK = 10,
    GNUTLS_KX_ANON_ECDH = 11,
    GNUTLS_KX_ECDHE_RSA = 12,
    GNUTLS_KX_ECDHE_ECDSA = 13,
    GNUTLS_KX_ECDHE_PSK = 14,
} gnutls_kx_algorithm_t;
</programlisting>
<para>
Enumeration of different key exchange algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-KX-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_KX_UNKNOWN</literal></term>
<listitem><simpara>Unknown key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-RSA:CAPS" role="constant">
<term><literal>GNUTLS_KX_RSA</literal></term>
<listitem><simpara>RSA key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-DHE-DSS:CAPS" role="constant">
<term><literal>GNUTLS_KX_DHE_DSS</literal></term>
<listitem><simpara>DHE-DSS key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-DHE-RSA:CAPS" role="constant">
<term><literal>GNUTLS_KX_DHE_RSA</literal></term>
<listitem><simpara>DHE-RSA key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-ANON-DH:CAPS" role="constant">
<term><literal>GNUTLS_KX_ANON_DH</literal></term>
<listitem><simpara>Anon-DH key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-SRP:CAPS" role="constant">
<term><literal>GNUTLS_KX_SRP</literal></term>
<listitem><simpara>SRP key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-RSA-EXPORT:CAPS" role="constant">
<term><literal>GNUTLS_KX_RSA_EXPORT</literal></term>
<listitem><simpara>RSA-EXPORT key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-SRP-RSA:CAPS" role="constant">
<term><literal>GNUTLS_KX_SRP_RSA</literal></term>
<listitem><simpara>SRP-RSA key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-SRP-DSS:CAPS" role="constant">
<term><literal>GNUTLS_KX_SRP_DSS</literal></term>
<listitem><simpara>SRP-DSS key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-PSK:CAPS" role="constant">
<term><literal>GNUTLS_KX_PSK</literal></term>
<listitem><simpara>PSK key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-DHE-PSK:CAPS" role="constant">
<term><literal>GNUTLS_KX_DHE_PSK</literal></term>
<listitem><simpara>DHE-PSK key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-ANON-ECDH:CAPS" role="constant">
<term><literal>GNUTLS_KX_ANON_ECDH</literal></term>
<listitem><simpara>Anon-ECDH key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-ECDHE-RSA:CAPS" role="constant">
<term><literal>GNUTLS_KX_ECDHE_RSA</literal></term>
<listitem><simpara>ECDHE-RSA key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-ECDHE-ECDSA:CAPS" role="constant">
<term><literal>GNUTLS_KX_ECDHE_ECDSA</literal></term>
<listitem><simpara>ECDHE-ECDSA key-exchange algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-KX-ECDHE-PSK:CAPS" role="constant">
<term><literal>GNUTLS_KX_ECDHE_PSK</literal></term>
<listitem><simpara>ECDHE-PSK key-exchange algorithm.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get" role="function">
<title>gnutls_kx_get ()</title>
<indexterm zone="gnutls-kx-get"><primary>gnutls_kx_get</primary></indexterm>
<programlisting><link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> gnutls_kx_get                     (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get currently used key exchange algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the key exchange algorithm used in the last handshake, a
<link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get-id" role="function">
<title>gnutls_kx_get_id ()</title>
<indexterm zone="gnutls-kx-get-id"><primary>gnutls_kx_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> gnutls_kx_get_id                  (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a KX name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>an id of the specified KX algorithm, or <link linkend="GNUTLS-KX-UNKNOWN:CAPS"><literal>GNUTLS_KX_UNKNOWN</literal></link>
on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-get-name" role="function">
<title>gnutls_kx_get_name ()</title>
<indexterm zone="gnutls-kx-get-name"><primary>gnutls_kx_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_kx_get_name                  (<parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a key exchange algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a string that contains the name of the
specified key exchange algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-kx-list" role="function">
<title>gnutls_kx_list ()</title>
<indexterm zone="gnutls-kx-list"><primary>gnutls_kx_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-kx-algorithm-t"><returnvalue>gnutls_kx_algorithm_t</returnvalue></link> * gnutls_kx_list            (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of supported key exchange algorithms.
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> integers
indicating the available key exchange algorithms.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-load-file" role="function">
<title>gnutls_load_file ()</title>
<indexterm zone="gnutls-load-file"><primary>gnutls_load_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_load_file                    (<parameter>const <link linkend="char"><type>char</type></link> *filename</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>);</programlisting>
<para>
This function will load a file into a datum. The data are
zero terminated but the terminating null is not included in length.
The returned data are allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>filename</parameter>&#160;:</term>
<listitem><simpara>the name of the file to load</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>Where the file will be stored</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.
Since 3.1.0</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-log-func" role="function">
<title>gnutls_log_func ()</title>
<indexterm zone="gnutls-log-func"><primary>gnutls_log_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                (*gnutls_log_func)                  (<parameter><link linkend="int"><type>int</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *Param2</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-mac-algorithm-t" role="enum">
<title>enum gnutls_mac_algorithm_t</title>
<indexterm zone="gnutls-mac-algorithm-t"><primary>gnutls_mac_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_MAC_UNKNOWN = 0,
    GNUTLS_MAC_NULL = 1,
    GNUTLS_MAC_MD5 = 2,
    GNUTLS_MAC_SHA1 = 3,
    GNUTLS_MAC_RMD160 = 4,
    GNUTLS_MAC_MD2 = 5,
    GNUTLS_MAC_SHA256 = 6,
    GNUTLS_MAC_SHA384 = 7,
    GNUTLS_MAC_SHA512 = 8,
    GNUTLS_MAC_SHA224 = 9,
      /* If you add anything here, make sure you align with
         gnutls_digest_algorithm_t. */
    GNUTLS_MAC_AEAD = 200 /* indicates that MAC is on the cipher */
} gnutls_mac_algorithm_t;
</programlisting>
<para>
Enumeration of different Message Authentication Code (MAC)
algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-MAC-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_MAC_UNKNOWN</literal></term>
<listitem><simpara>Unknown MAC algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-NULL:CAPS" role="constant">
<term><literal>GNUTLS_MAC_NULL</literal></term>
<listitem><simpara>NULL MAC algorithm (empty output).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-MD5:CAPS" role="constant">
<term><literal>GNUTLS_MAC_MD5</literal></term>
<listitem><simpara>HMAC-MD5 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-SHA1:CAPS" role="constant">
<term><literal>GNUTLS_MAC_SHA1</literal></term>
<listitem><simpara>HMAC-SHA-1 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-RMD160:CAPS" role="constant">
<term><literal>GNUTLS_MAC_RMD160</literal></term>
<listitem><simpara>HMAC-RMD160 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-MD2:CAPS" role="constant">
<term><literal>GNUTLS_MAC_MD2</literal></term>
<listitem><simpara>HMAC-MD2 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-SHA256:CAPS" role="constant">
<term><literal>GNUTLS_MAC_SHA256</literal></term>
<listitem><simpara>HMAC-SHA-256 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-SHA384:CAPS" role="constant">
<term><literal>GNUTLS_MAC_SHA384</literal></term>
<listitem><simpara>HMAC-SHA-384 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-SHA512:CAPS" role="constant">
<term><literal>GNUTLS_MAC_SHA512</literal></term>
<listitem><simpara>HMAC-SHA-512 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-SHA224:CAPS" role="constant">
<term><literal>GNUTLS_MAC_SHA224</literal></term>
<listitem><simpara>HMAC-SHA-224 algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-MAC-AEAD:CAPS" role="constant">
<term><literal>GNUTLS_MAC_AEAD</literal></term>
<listitem><simpara>MAC implicit through AEAD cipher.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get" role="function">
<title>gnutls_mac_get ()</title>
<indexterm zone="gnutls-mac-get"><primary>gnutls_mac_get</primary></indexterm>
<programlisting><link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> gnutls_mac_get                   (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get currently used MAC algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the currently used mac algorithm, a
<link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get-id" role="function">
<title>gnutls_mac_get_id ()</title>
<indexterm zone="gnutls-mac-get-id"><primary>gnutls_mac_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> gnutls_mac_get_id                (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a MAC algorithm name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> id of the specified MAC
algorithm string, or <link linkend="GNUTLS-MAC-UNKNOWN:CAPS"><literal>GNUTLS_MAC_UNKNOWN</literal></link> on failures.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get-key-size" role="function">
<title>gnutls_mac_get_key_size ()</title>
<indexterm zone="gnutls-mac-get-key-size"><primary>gnutls_mac_get_key_size</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              gnutls_mac_get_key_size             (<parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Get size of MAC key.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is an encryption algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>length (in bytes) of the given MAC key size, or 0 if the
given MAC algorithm is invalid.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-get-name" role="function">
<title>gnutls_mac_get_name ()</title>
<indexterm zone="gnutls-mac-get-name"><primary>gnutls_mac_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_mac_get_name                 (<parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a MAC algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified MAC
algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-mac-list" role="function">
<title>gnutls_mac_list ()</title>
<indexterm zone="gnutls-mac-list"><primary>gnutls_mac_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-mac-algorithm-t"><returnvalue>gnutls_mac_algorithm_t</returnvalue></link> * gnutls_mac_list          (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of hash algorithms for use as MACs.  Note that not
necessarily all MACs are supported in TLS cipher suites.  For
example, MD2 is not supported as a cipher suite, but is supported
for other purposes (e.g., X.509 signature verification or similar).
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Return a (0)-terminated list of <link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link>
integers indicating the available MACs.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-malloc" role="variable">
<title>gnutls_malloc</title>
<indexterm zone="gnutls-malloc"><primary>gnutls_malloc</primary></indexterm>
<programlisting>  extern gnutls_alloc_function gnutls_malloc;
</programlisting>
<para>
This function will allocate 's' bytes data, and
return a pointer to memory. This function is supposed
to be used by callbacks.
</para>
<para>
The allocation function used is the one set by
<link linkend="gnutls-global-set-mem-functions"><function>gnutls_global_set_mem_functions()</function></link>.
</para></refsect2>
<refsect2 id="gnutls-ocsp-status-request-enable-client" role="function">
<title>gnutls_ocsp_status_request_enable_client ()</title>
<indexterm zone="gnutls-ocsp-status-request-enable-client"><primary>gnutls_ocsp_status_request_enable_client</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_ocsp_status_request_enable_client
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *responder_id</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> responder_id_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *request_extensions</parameter>);</programlisting>
<para>
This function is to be used by clients to request OCSP response
from the server, using the "status_request" TLS extension.  Only
OCSP status type is supported. A typical server has a single
OCSP response cached, so <parameter>responder_id</parameter> and <parameter>extensions</parameter>
should be null.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>responder_id</parameter>&#160;:</term>
<listitem><simpara>array with <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> with DER data of responder id</simpara></listitem></varlistentry>
<varlistentry><term><parameter>responder_id_size</parameter>&#160;:</term>
<listitem><simpara>number of members in <parameter>responder_id</parameter> array</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ocsp-status-request-get" role="function">
<title>gnutls_ocsp_status_request_get ()</title>
<indexterm zone="gnutls-ocsp-status-request-get"><primary>gnutls_ocsp_status_request_get</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_ocsp_status_request_get      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *response</parameter>);</programlisting>
<para>
This function returns the OCSP status response received
from the TLS server. The <parameter>response</parameter> should be treated as
constant. If no OCSP response is available then
<link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> is returned.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> with DER encoded OCSP response</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-ocsp-status-request-is-checked" role="function">
<title>gnutls_ocsp_status_request_is_checked ()</title>
<indexterm zone="gnutls-ocsp-status-request-is-checked"><primary>gnutls_ocsp_status_request_is_checked</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_ocsp_status_request_is_checked
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
Check whether an OCSP status response was included in the handshake
and whether it was checked and valid (not too old or superseded). 
This is a helper function when needing to decide whether to perform an
OCSP validity check on the peer's certificate. Must be called after
<link linkend="gnutls-certificate-verify-peers3"><function>gnutls_certificate_verify_peers3()</function></link> is called.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be zero</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>non zero it was valid, or a zero if it wasn't sent,
or sent and was invalid.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-int" role="struct">
<title>struct gnutls_openpgp_crt_int</title>
<indexterm zone="gnutls-openpgp-crt-int"><primary>gnutls_openpgp_crt_int</primary></indexterm>
<programlisting>struct gnutls_openpgp_crt_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-crt-status-t" role="enum">
<title>enum gnutls_openpgp_crt_status_t</title>
<indexterm zone="gnutls-openpgp-crt-status-t"><primary>gnutls_openpgp_crt_status_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_OPENPGP_CERT = 0,
    GNUTLS_OPENPGP_CERT_FINGERPRINT = 1
} gnutls_openpgp_crt_status_t;
</programlisting>
<para>
Enumeration of ways to send OpenPGP certificate.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-OPENPGP-CERT:CAPS" role="constant">
<term><literal>GNUTLS_OPENPGP_CERT</literal></term>
<listitem><simpara>Send entire certificate.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-OPENPGP-CERT-FINGERPRINT:CAPS" role="constant">
<term><literal>GNUTLS_OPENPGP_CERT_FINGERPRINT</literal></term>
<listitem><simpara>Send only certificate fingerprint.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-openpgp-crt-t" role="typedef">
<title>gnutls_openpgp_crt_t</title>
<indexterm zone="gnutls-openpgp-crt-t"><primary>gnutls_openpgp_crt_t</primary></indexterm>
<programlisting>  typedef struct gnutls_openpgp_crt_int *gnutls_openpgp_crt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-keyring-int" role="struct">
<title>struct gnutls_openpgp_keyring_int</title>
<indexterm zone="gnutls-openpgp-keyring-int"><primary>gnutls_openpgp_keyring_int</primary></indexterm>
<programlisting>struct gnutls_openpgp_keyring_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-keyring-t" role="typedef">
<title>gnutls_openpgp_keyring_t</title>
<indexterm zone="gnutls-openpgp-keyring-t"><primary>gnutls_openpgp_keyring_t</primary></indexterm>
<programlisting>  typedef struct gnutls_openpgp_keyring_int *gnutls_openpgp_keyring_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-int" role="struct">
<title>struct gnutls_openpgp_privkey_int</title>
<indexterm zone="gnutls-openpgp-privkey-int"><primary>gnutls_openpgp_privkey_int</primary></indexterm>
<programlisting>struct gnutls_openpgp_privkey_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-privkey-t" role="typedef">
<title>gnutls_openpgp_privkey_t</title>
<indexterm zone="gnutls-openpgp-privkey-t"><primary>gnutls_openpgp_privkey_t</primary></indexterm>
<programlisting>  typedef struct gnutls_openpgp_privkey_int *gnutls_openpgp_privkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-openpgp-send-cert" role="function">
<title>gnutls_openpgp_send_cert ()</title>
<indexterm zone="gnutls-openpgp-send-cert"><primary>gnutls_openpgp_send_cert</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_openpgp_send_cert            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-openpgp-crt-status-t"><type>gnutls_openpgp_crt_status_t</type></link> status</parameter>);</programlisting>
<para>
This function will order gnutls to send the key fingerprint
instead of the key in the initial handshake procedure. This should
be used with care and only when there is indication or knowledge
that the server can obtain the client's key.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>status</parameter>&#160;:</term>
<listitem><simpara>is one of GNUTLS_OPENPGP_CERT, or GNUTLS_OPENPGP_CERT_FINGERPRINT</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-params-type-t" role="enum">
<title>enum gnutls_params_type_t</title>
<indexterm zone="gnutls-params-type-t"><primary>gnutls_params_type_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_PARAMS_RSA_EXPORT = 1,
    GNUTLS_PARAMS_DH = 2,
    GNUTLS_PARAMS_ECDH = 3,
} gnutls_params_type_t;
</programlisting>
<para>
Enumeration of different TLS session parameter types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-PARAMS-RSA-EXPORT:CAPS" role="constant">
<term><literal>GNUTLS_PARAMS_RSA_EXPORT</literal></term>
<listitem><simpara>Session RSA-EXPORT parameters.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PARAMS-DH:CAPS" role="constant">
<term><literal>GNUTLS_PARAMS_DH</literal></term>
<listitem><simpara>Session Diffie-Hellman parameters.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PARAMS-ECDH:CAPS" role="constant">
<term><literal>GNUTLS_PARAMS_ECDH</literal></term>
<listitem><simpara>Session Elliptic-Curve Diffie-Hellman parameters.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-decode" role="function">
<title>gnutls_pem_base64_decode ()</title>
<indexterm zone="gnutls-pem-base64-decode"><primary>gnutls_pem_base64_decode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_pem_base64_decode            (<parameter>const <link linkend="char"><type>char</type></link> *header</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will decode the given encoded data.  If the header
given is non null this function will search for "-----BEGIN header"
and decode only this part.  Otherwise it will decode the first PEM
packet found.
</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&#160;:</term>
<listitem><simpara>A null terminated string with the PEM header (eg. CERTIFICATE)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara>contain the encoded data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where decoded data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned if the buffer given is
not long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-decode-alloc" role="function">
<title>gnutls_pem_base64_decode_alloc ()</title>
<indexterm zone="gnutls-pem-base64-decode-alloc"><primary>gnutls_pem_base64_decode_alloc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_pem_base64_decode_alloc      (<parameter>const <link linkend="char"><type>char</type></link> *header</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.  If the header given is
non null this function will search for "-----BEGIN header" and
decode only this part. Otherwise it will decode the first PEM
packet found.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para><variablelist role="params">
<varlistentry><term><parameter>header</parameter>&#160;:</term>
<listitem><simpara>The PEM header (eg. CERTIFICATE)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara>contains the encoded data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where decoded data lie</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-encode" role="function">
<title>gnutls_pem_base64_encode ()</title>
<indexterm zone="gnutls-pem-base64-encode"><primary>gnutls_pem_base64_encode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_pem_base64_encode            (<parameter>const <link linkend="char"><type>char</type></link> *msg</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding. This is the encoding used in PEM messages.
</para>
<para>
The output string will be null terminated, although the size will
not include the terminating null.
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara>is a message to be put in the header</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contain the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where base64 data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
<link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> is returned if the buffer given is
not long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pem-base64-encode-alloc" role="function">
<title>gnutls_pem_base64_encode_alloc ()</title>
<indexterm zone="gnutls-pem-base64-encode-alloc"><primary>gnutls_pem_base64_encode_alloc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_pem_base64_encode_alloc      (<parameter>const <link linkend="char"><type>char</type></link> *msg</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding.  This is the encoding used in PEM messages.
This function will allocate the required memory to hold the encoded
data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para><variablelist role="params">
<varlistentry><term><parameter>msg</parameter>&#160;:</term>
<listitem><simpara>is a message to be put in the encoded header</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contains the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>will hold the newly allocated encoded data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-perror" role="function">
<title>gnutls_perror ()</title>
<indexterm zone="gnutls-perror"><primary>gnutls_perror</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_perror                       (<parameter><link linkend="int"><type>int</type></link> error</parameter>);</programlisting>
<para>
This function is like <link linkend="perror"><function>perror()</function></link>. The only difference is that it
accepts an error number returned by a gnutls function.
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>is a GnuTLS error code, a negative error code</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pin-callback-t" role="function" condition="since:2.12.0">
<title>gnutls_pin_callback_t ()</title>
<indexterm zone="gnutls-pin-callback-t" role="2.12.0"><primary>gnutls_pin_callback_t</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_pin_callback_t)            (<parameter><link linkend="void"><type>void</type></link> *userdata</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> attempt</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *token_url</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *token_label</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *pin</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> pin_max</parameter>);</programlisting>
<para>
Callback function type for PKCS<link linkend="11:CAPS"><type>11</type></link> or TPM PIN entry.  It is set by
functions like <link linkend="gnutls-pkcs11-set-pin-function"><function>gnutls_pkcs11_set_pin_function()</function></link>.
</para>
<para>
The callback should provides the PIN code to unlock the token with
label <parameter>token_label</parameter>, specified by the URL <parameter>token_url</parameter>.
</para>
<para>
The PIN code, as a NUL-terminated ASCII string, should be copied
into the <parameter>pin</parameter> buffer (of maximum size <parameter>pin_max</parameter>), and return 0 to
indicate success.  Alternatively, the callback may return a
negative gnutls error code to indicate failure and cancel PIN entry
(in which case, the contents of the <parameter>pin</parameter> parameter are ignored).
</para>
<para>
When a PIN is required, the callback will be invoked repeatedly
(and indefinitely) until either the returned PIN code is correct,
the callback returns failure, or the token refuses login (e.g. when
the token is locked due to too many incorrect PINs!).  For the
first such invocation, the <parameter>attempt</parameter> counter will have value zero;
it will increase by one for each subsequent attempt.
</para><variablelist role="params">
<varlistentry><term><parameter>userdata</parameter>&#160;:</term>
<listitem><simpara>user-controlled data from <link linkend="gnutls-pkcs11-set-pin-function"><function>gnutls_pkcs11_set_pin_function()</function></link>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>attempt</parameter>&#160;:</term>
<listitem><simpara>pin-attempt counter, initially 0.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>token_url</parameter>&#160;:</term>
<listitem><simpara>URL of token.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>token_label</parameter>&#160;:</term>
<listitem><simpara>label of token.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>a <link linkend="gnutls-pin-flag-t"><type>gnutls_pin_flag_t</type></link> flag.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pin</parameter>&#160;:</term>
<listitem><simpara>buffer to hold PIN, of size <parameter>pin_max</parameter>.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pin_max</parameter>&#160;:</term>
<listitem><simpara>size of <parameter>pin</parameter> buffer.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success or a negative error code on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-pin-flag-t" role="enum">
<title>enum gnutls_pin_flag_t</title>
<indexterm zone="gnutls-pin-flag-t"><primary>gnutls_pin_flag_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_PIN_USER = (1 &lt;&lt; 0),
    GNUTLS_PIN_SO = (1 &lt;&lt; 1),
    GNUTLS_PIN_FINAL_TRY = (1 &lt;&lt; 2),
    GNUTLS_PIN_COUNT_LOW = (1 &lt;&lt; 3),
    GNUTLS_PIN_CONTEXT_SPECIFIC = (1 &lt;&lt; 4),
    GNUTLS_PIN_WRONG = (1 &lt;&lt; 5),
} gnutls_pin_flag_t;
</programlisting>
<para>
Enumeration of different flags that are input to the PIN function.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-PIN-USER:CAPS" role="constant">
<term><literal>GNUTLS_PIN_USER</literal></term>
<listitem><simpara>The PIN for the user.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PIN-SO:CAPS" role="constant">
<term><literal>GNUTLS_PIN_SO</literal></term>
<listitem><simpara>The PIN for the security officer (admin).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PIN-FINAL-TRY:CAPS" role="constant">
<term><literal>GNUTLS_PIN_FINAL_TRY</literal></term>
<listitem><simpara>This is the final try before blocking.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PIN-COUNT-LOW:CAPS" role="constant">
<term><literal>GNUTLS_PIN_COUNT_LOW</literal></term>
<listitem><simpara>Few tries remain before token blocks.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PIN-CONTEXT-SPECIFIC:CAPS" role="constant">
<term><literal>GNUTLS_PIN_CONTEXT_SPECIFIC</literal></term>
<listitem><simpara>The PIN is for a specific action and key like signing.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PIN-WRONG:CAPS" role="constant">
<term><literal>GNUTLS_PIN_WRONG</literal></term>
<listitem><simpara>Last given PIN was not correct.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-algorithm-get-name" role="function">
<title>gnutls_pk_algorithm_get_name ()</title>
<indexterm zone="gnutls-pk-algorithm-get-name"><primary>gnutls_pk_algorithm_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_pk_algorithm_get_name        (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a pk algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified public
key algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-algorithm-t" role="enum">
<title>enum gnutls_pk_algorithm_t</title>
<indexterm zone="gnutls-pk-algorithm-t"><primary>gnutls_pk_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_PK_UNKNOWN = 0,
    GNUTLS_PK_RSA = 1,
    GNUTLS_PK_DSA = 2,
    GNUTLS_PK_DH = 3,
    GNUTLS_PK_EC = 4,
} gnutls_pk_algorithm_t;
</programlisting>
<para>
Enumeration of different public-key algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-PK-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_PK_UNKNOWN</literal></term>
<listitem><simpara>Unknown public-key algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PK-RSA:CAPS" role="constant">
<term><literal>GNUTLS_PK_RSA</literal></term>
<listitem><simpara>RSA public-key algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PK-DSA:CAPS" role="constant">
<term><literal>GNUTLS_PK_DSA</literal></term>
<listitem><simpara>DSA public-key algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PK-DH:CAPS" role="constant">
<term><literal>GNUTLS_PK_DH</literal></term>
<listitem><simpara>Diffie-Hellman algorithm. Used to generate parameters.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PK-EC:CAPS" role="constant">
<term><literal>GNUTLS_PK_EC</literal></term>
<listitem><simpara>Elliptic curve algorithm. Used to generate parameters.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pk-bits-to-sec-param" role="function" condition="since:2.12.0">
<title>gnutls_pk_bits_to_sec_param ()</title>
<indexterm zone="gnutls-pk-bits-to-sec-param" role="2.12.0"><primary>gnutls_pk_bits_to_sec_param</primary></indexterm>
<programlisting><link linkend="gnutls-sec-param-t"><returnvalue>gnutls_sec_param_t</returnvalue></link>  gnutls_pk_bits_to_sec_param         (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algo</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);</programlisting>
<para>
This is the inverse of <link linkend="gnutls-sec-param-to-pk-bits"><function>gnutls_sec_param_to_pk_bits()</function></link>. Given an algorithm
and the number of bits, it will return the security parameter. This is
a rough indication.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>is a public key algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>is the number of bits</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The security parameter.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-pk-get-id" role="function" condition="since:2.6.0">
<title>gnutls_pk_get_id ()</title>
<indexterm zone="gnutls-pk-get-id" role="2.6.0"><primary>gnutls_pk_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> gnutls_pk_get_id                  (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
Convert a string to a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value.  The names are
compared in a case insensitive way.  For example,
gnutls_pk_get_id("RSA") will return <link linkend="GNUTLS-PK-RSA:CAPS"><literal>GNUTLS_PK_RSA</literal></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a string containing a public key algorithm name.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> id of the specified public key
algorithm string, or <link linkend="GNUTLS-PK-UNKNOWN:CAPS"><literal>GNUTLS_PK_UNKNOWN</literal></link> on failures.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-pk-get-name" role="function" condition="since:2.6.0">
<title>gnutls_pk_get_name ()</title>
<indexterm zone="gnutls-pk-get-name" role="2.6.0"><primary>gnutls_pk_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_pk_get_name                  (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a public key algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a string that contains the name of the
specified public key algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-pk-list" role="function" condition="since:2.6.0">
<title>gnutls_pk_list ()</title>
<indexterm zone="gnutls-pk-list" role="2.6.0"><primary>gnutls_pk_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> * gnutls_pk_list            (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of supported public key algorithms.
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> integers
indicating the available ciphers.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-pk-to-sign" role="function">
<title>gnutls_pk_to_sign ()</title>
<indexterm zone="gnutls-pk-to-sign"><primary>gnutls_pk_to_sign</primary></indexterm>
<programlisting><link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> gnutls_pk_to_sign               (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> pk</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash</parameter>);</programlisting>
<para>
This function maps public key and hash algorithms combinations
to signature algorithms.
</para><variablelist role="params">
<varlistentry><term><parameter>pk</parameter>&#160;:</term>
<listitem><simpara>is a public key algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara>a hash algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value, or <link linkend="GNUTLS-SIGN-UNKNOWN:CAPS"><literal>GNUTLS_SIGN_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pkcs11-privkey-st" role="struct">
<title>struct gnutls_pkcs11_privkey_st</title>
<indexterm zone="gnutls-pkcs11-privkey-st"><primary>gnutls_pkcs11_privkey_st</primary></indexterm>
<programlisting>struct gnutls_pkcs11_privkey_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pkcs11-privkey-t" role="typedef">
<title>gnutls_pkcs11_privkey_t</title>
<indexterm zone="gnutls-pkcs11-privkey-t"><primary>gnutls_pkcs11_privkey_t</primary></indexterm>
<programlisting>  typedef struct gnutls_pkcs11_privkey_st *gnutls_pkcs11_privkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-prf" role="function">
<title>gnutls_prf ()</title>
<indexterm zone="gnutls-prf"><primary>gnutls_prf</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_prf                          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> label_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *label</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> server_random_first</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> extra_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *extra</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outsize</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out</parameter>);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) on the master secret
and the provided data, seeded with the client and server random fields.
</para>
<para>
The <parameter>label</parameter> variable usually contains a string denoting the purpose
for the generated data.  The <parameter>server_random_first</parameter> indicates whether
the client random field or the server random field should be first
in the seed.  Non-0 indicates that the server random field is first,
0 that the client random field is first.
</para>
<para>
The <parameter>extra</parameter> variable can be used to add more data to the seed, after
the random variables.  It can be used to make sure the
generated output is strongly connected to some additional data
(e.g., a string used in user authentication).
</para>
<para>
The output is placed in <parameter>out</parameter>, which must be pre-allocated.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&#160;:</term>
<listitem><simpara>length of the <parameter>label</parameter> variable.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara>label used in PRF computation, typically a short string.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server_random_first</parameter>&#160;:</term>
<listitem><simpara>non-0 if server random field should be first in seed</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra_size</parameter>&#160;:</term>
<listitem><simpara>length of the <parameter>extra</parameter> variable.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>extra</parameter>&#160;:</term>
<listitem><simpara>optional extra data to seed the PRF with.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&#160;:</term>
<listitem><simpara>size of pre-allocated output buffer to hold the output.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>pre-allocated buffer to hold the generated data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-prf-raw" role="function">
<title>gnutls_prf_raw ()</title>
<indexterm zone="gnutls-prf-raw"><primary>gnutls_prf_raw</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_prf_raw                      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> label_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *label</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> seed_size</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *seed</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> outsize</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *out</parameter>);</programlisting>
<para>
Apply the TLS Pseudo-Random-Function (PRF) on the master secret
and the provided data.
</para>
<para>
The <parameter>label</parameter> variable usually contains a string denoting the purpose
for the generated data.  The <parameter>seed</parameter> usually contains data such as the
client and server random, perhaps together with some additional
data that is added to guarantee uniqueness of the output for a
particular purpose.
</para>
<para>
Because the output is not guaranteed to be unique for a particular
session unless <parameter>seed</parameter> includes the client random and server random
fields (the PRF would output the same data on another connection
resumed from the first one), it is not recommended to use this
function directly.  The <link linkend="gnutls-prf"><function>gnutls_prf()</function></link> function seeds the PRF with the
client and server random fields directly, and is recommended if you
want to generate pseudo random data unique for each session.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label_size</parameter>&#160;:</term>
<listitem><simpara>length of the <parameter>label</parameter> variable.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>label</parameter>&#160;:</term>
<listitem><simpara>label used in PRF computation, typically a short string.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed_size</parameter>&#160;:</term>
<listitem><simpara>length of the <parameter>seed</parameter> variable.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seed</parameter>&#160;:</term>
<listitem><simpara>optional extra data to seed the PRF with.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>outsize</parameter>&#160;:</term>
<listitem><simpara>size of pre-allocated output buffer to hold the output.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out</parameter>&#160;:</term>
<listitem><simpara>pre-allocated buffer to hold the generated data.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-certificate-type-list" role="function" condition="since:3.0">
<title>gnutls_priority_certificate_type_list ()</title>
<indexterm zone="gnutls-priority-certificate-type-list" role="3.0"><primary>gnutls_priority_certificate_type_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_certificate_type_list
                                                        (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);</programlisting>
<para>
Get a list of available certificate types in the priority
structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pcache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>will point to an integer list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of certificate types, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-priority-compression-list" role="function" condition="since:3.0">
<title>gnutls_priority_compression_list ()</title>
<indexterm zone="gnutls-priority-compression-list" role="3.0"><primary>gnutls_priority_compression_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_compression_list    (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);</programlisting>
<para>
Get a list of available compression method in the priority
structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pcache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>will point to an integer list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of methods, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-priority-deinit" role="function">
<title>gnutls_priority_deinit ()</title>
<indexterm zone="gnutls-priority-deinit"><primary>gnutls_priority_deinit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_priority_deinit              (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> priority_cache</parameter>);</programlisting>
<para>
Deinitializes the priority cache.
</para><variablelist role="params">
<varlistentry><term><parameter>priority_cache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-ecc-curve-list" role="function" condition="since:3.0">
<title>gnutls_priority_ecc_curve_list ()</title>
<indexterm zone="gnutls-priority-ecc-curve-list" role="3.0"><primary>gnutls_priority_ecc_curve_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_ecc_curve_list      (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);</programlisting>
<para>
Get a list of available elliptic curves in the priority
structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pcache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>will point to an integer list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of curves, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-priority-get-cipher-suite-index" role="function">
<title>gnutls_priority_get_cipher_suite_index ()</title>
<indexterm zone="gnutls-priority-get-cipher-suite-index"><primary>gnutls_priority_get_cipher_suite_index</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_get_cipher_suite_index
                                                        (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> idx</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *sidx</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-priority-init" role="function">
<title>gnutls_priority_init ()</title>
<indexterm zone="gnutls-priority-init"><primary>gnutls_priority_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_init                (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> *priority_cache</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *priorities</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);</programlisting>
<para>
Sets priorities for the ciphers, key exchange methods, macs and
compression methods.
</para>
<para>
The <link linkend="priorities"><type>priorities</type></link> option allows you to specify a colon
separated list of the cipher priorities to enable.
Some keywords are defined to provide quick access
to common preferences.
</para>
<para>
"PERFORMANCE" means all the "secure" ciphersuites are enabled,
limited to 128 bit ciphers and sorted by terms of speed
performance.
</para>
<para>
"NORMAL" means all "secure" ciphersuites. The 256-bit ciphers are
included as a fallback only.  The ciphers are sorted by security
margin.
</para>
<para>
"SECURE128" means all "secure" ciphersuites of security level 128-bit
or more.
</para>
<para>
"SECURE192" means all "secure" ciphersuites of security level 192-bit
or more.
</para>
<para>
"SUITEB128" means all the NSA SuiteB ciphersuites with security level
of 128.
</para>
<para>
"SUITEB192" means all the NSA SuiteB ciphersuites with security level
of 192.
</para>
<para>
"EXPORT" means all ciphersuites are enabled, including the
low-security 40 bit ciphers.
</para>
<para>
"NONE" means nothing is enabled.  This disables even protocols and
compression methods.
</para>
<para>
Special keywords are "!", "-" and "+".
"!" or "-" appended with an algorithm will remove this algorithm.
"+" appended with an algorithm will add this algorithm.
</para>
<para>
Check the GnuTLS manual section "Priority strings" for detailed
information.
</para>
<para>
Examples:
</para>
<para>
"NONE:+VERS-TLS-ALL:+MAC-ALL:+RSA:+AES-128-CBC:+SIGN-ALL:+COMP-NULL"
</para>
<para>
"NORMAL:-ARCFOUR-128" means normal ciphers except for ARCFOUR-128.
</para>
<para>
"SECURE:-VERS-SSL3.0:+COMP-DEFLATE" means that only secure ciphers are
enabled, SSL3.0 is disabled, and libz compression enabled.
</para>
<para>
"NONE:+VERS-TLS-ALL:+AES-128-CBC:+RSA:+SHA1:+COMP-NULL:+SIGN-RSA-SHA1", 
</para>
<para>
"NONE:+VERS-TLS-ALL:+AES-128-CBC:+ECDHE-RSA:+SHA1:+COMP-NULL:+SIGN-RSA-SHA1:+CURVE-SECP256R1", 
</para>
<para>
"SECURE256:+SECURE128",
</para>
<para>
Note that "NORMAL:<link linkend="COMPAT:CAPS"><literal>COMPAT</literal></link>" is the most compatible mode.
</para><variablelist role="params">
<varlistentry><term><parameter>priority_cache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priorities</parameter>&#160;:</term>
<listitem><simpara>is a string describing priorities</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&#160;:</term>
<listitem><simpara>In case of an error this will have the position in the string the error occured</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On syntax error <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link> is returned,
<link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-protocol-list" role="function" condition="since:3.0">
<title>gnutls_priority_protocol_list ()</title>
<indexterm zone="gnutls-priority-protocol-list" role="3.0"><primary>gnutls_priority_protocol_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_protocol_list       (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);</programlisting>
<para>
Get a list of available TLS version numbers in the priority
structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pcache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>will point to an integer list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of protocols, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-priority-set" role="function">
<title>gnutls_priority_set ()</title>
<indexterm zone="gnutls-priority-set"><primary>gnutls_priority_set</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_set                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> priority</parameter>);</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priority</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-set-direct" role="function">
<title>gnutls_priority_set_direct ()</title>
<indexterm zone="gnutls-priority-set-direct"><primary>gnutls_priority_set_direct</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_set_direct          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *priorities</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);</programlisting>
<para>
Sets the priorities to use on the ciphers, key exchange methods,
macs and compression methods.  This function avoids keeping a
priority cache and is used to directly set string priorities to a
TLS session.  For documentation check the <link linkend="gnutls-priority-init"><function>gnutls_priority_init()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>priorities</parameter>&#160;:</term>
<listitem><simpara>is a string describing priorities</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&#160;:</term>
<listitem><simpara>In case of an error this will have the position in the string the error occured</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On syntax error <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link> is returned,
<link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-priority-sign-list" role="function" condition="since:3.0">
<title>gnutls_priority_sign_list ()</title>
<indexterm zone="gnutls-priority-sign-list" role="3.0"><primary>gnutls_priority_sign_list</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_priority_sign_list           (<parameter><link linkend="gnutls-priority-t"><type>gnutls_priority_t</type></link> pcache</parameter>,
                                                         <parameter>const unsigned <link linkend="int"><type>int</type></link> **list</parameter>);</programlisting>
<para>
Get a list of available signature algorithms in the priority
structure.
</para><variablelist role="params">
<varlistentry><term><parameter>pcache</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-prioritity-t"><type>gnutls_prioritity_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>list</parameter>&#160;:</term>
<listitem><simpara>will point to an integer list</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the number of algorithms, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-priority-st" role="struct">
<title>struct gnutls_priority_st</title>
<indexterm zone="gnutls-priority-st"><primary>gnutls_priority_st</primary></indexterm>
<programlisting>struct gnutls_priority_st;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-priority-t" role="typedef">
<title>gnutls_priority_t</title>
<indexterm zone="gnutls-priority-t"><primary>gnutls_priority_t</primary></indexterm>
<programlisting>  typedef struct gnutls_priority_st *gnutls_priority_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-privkey-type-t" role="enum">
<title>enum gnutls_privkey_type_t</title>
<indexterm zone="gnutls-privkey-type-t"><primary>gnutls_privkey_type_t</primary></indexterm>
<programlisting>typedef enum {
      GNUTLS_PRIVKEY_X509,
      GNUTLS_PRIVKEY_OPENPGP,
      GNUTLS_PRIVKEY_PKCS11,
      GNUTLS_PRIVKEY_EXT
} gnutls_privkey_type_t;
</programlisting>
<para>
Enumeration of different private key types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-PRIVKEY-X509:CAPS" role="constant">
<term><literal>GNUTLS_PRIVKEY_X509</literal></term>
<listitem><simpara>X.509 private key, <link linkend="gnutls-x509-privkey-t"><type>gnutls_x509_privkey_t</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PRIVKEY-OPENPGP:CAPS" role="constant">
<term><literal>GNUTLS_PRIVKEY_OPENPGP</literal></term>
<listitem><simpara>OpenPGP private key, <link linkend="gnutls-openpgp-privkey-t"><type>gnutls_openpgp_privkey_t</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PRIVKEY-PKCS11:CAPS" role="constant">
<term><literal>GNUTLS_PRIVKEY_PKCS11</literal></term>
<listitem><simpara>PKCS11 private key, <link linkend="gnutls-pkcs11-privkey-t"><type>gnutls_pkcs11_privkey_t</type></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PRIVKEY-EXT:CAPS" role="constant">
<term><literal>GNUTLS_PRIVKEY_EXT</literal></term>
<listitem><simpara>External private key, operating using callbacks.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-id" role="function">
<title>gnutls_protocol_get_id ()</title>
<indexterm zone="gnutls-protocol-get-id"><primary>gnutls_protocol_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link>   gnutls_protocol_get_id              (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
The names are compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a protocol name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>an id of the specified protocol, or
<link linkend="GNUTLS-VERSION-UNKNOWN:CAPS"><literal>GNUTLS_VERSION_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-name" role="function">
<title>gnutls_protocol_get_name ()</title>
<indexterm zone="gnutls-protocol-get-name"><primary>gnutls_protocol_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_protocol_get_name            (<parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> version</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara>is a (gnutls) version number</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified TLS
version (e.g., "TLS1.0"), or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-get-version" role="function">
<title>gnutls_protocol_get_version ()</title>
<indexterm zone="gnutls-protocol-get-version"><primary>gnutls_protocol_get_version</primary></indexterm>
<programlisting><link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link>   gnutls_protocol_get_version         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get TLS version, a <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> value.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The version of the currently used protocol.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-list" role="function">
<title>gnutls_protocol_list ()</title>
<indexterm zone="gnutls-protocol-list"><primary>gnutls_protocol_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-protocol-t"><returnvalue>gnutls_protocol_t</returnvalue></link> * gnutls_protocol_list          (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of supported protocols, e.g. SSL 3.0, TLS 1.0 etc.
</para>
<para>
This function is not thread safe.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> integers
indicating the available protocols.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-protocol-t" role="enum">
<title>enum gnutls_protocol_t</title>
<indexterm zone="gnutls-protocol-t"><primary>gnutls_protocol_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SSL3 = 1,
    GNUTLS_TLS1_0 = 2,
    GNUTLS_TLS1 = GNUTLS_TLS1_0,
    GNUTLS_TLS1_1 = 3,
    GNUTLS_TLS1_2 = 4,
    GNUTLS_DTLS1_0 = 5,
    GNUTLS_DTLS0_9 = 6,
    GNUTLS_VERSION_MAX = GNUTLS_DTLS0_9,
    GNUTLS_VERSION_UNKNOWN = 0xff
} gnutls_protocol_t;
</programlisting>
<para>
Enumeration of different SSL/TLS protocol versions.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SSL3:CAPS" role="constant">
<term><literal>GNUTLS_SSL3</literal></term>
<listitem><simpara>SSL version 3.0.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-TLS1-0:CAPS" role="constant">
<term><literal>GNUTLS_TLS1_0</literal></term>
<listitem><simpara>TLS version 1.0.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-TLS1:CAPS" role="constant">
<term><literal>GNUTLS_TLS1</literal></term>
<listitem><simpara>Same as <link linkend="GNUTLS-TLS1-0:CAPS"><literal>GNUTLS_TLS1_0</literal></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-TLS1-1:CAPS" role="constant">
<term><literal>GNUTLS_TLS1_1</literal></term>
<listitem><simpara>TLS version 1.1.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-TLS1-2:CAPS" role="constant">
<term><literal>GNUTLS_TLS1_2</literal></term>
<listitem><simpara>TLS version 1.2.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DTLS1-0:CAPS" role="constant">
<term><literal>GNUTLS_DTLS1_0</literal></term>
<listitem><simpara>DTLS version 1.0.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-DTLS0-9:CAPS" role="constant">
<term><literal>GNUTLS_DTLS0_9</literal></term>
<listitem><simpara>DTLS version 0.9 (Cisco AnyConnect / OpenSSL 0.9.8e).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-VERSION-MAX:CAPS" role="constant">
<term><literal>GNUTLS_VERSION_MAX</literal></term>
<listitem><simpara>Maps to the highest supported TLS version.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-VERSION-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_VERSION_UNKNOWN</literal></term>
<listitem><simpara>Unknown SSL/TLS version.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-allocate-client-credentials" role="function">
<title>gnutls_psk_allocate_client_credentials ()</title>
<indexterm zone="gnutls-psk-allocate-client-credentials"><primary>gnutls_psk_allocate_client_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_psk_allocate_client_credentials
                                                        (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-allocate-server-credentials" role="function">
<title>gnutls_psk_allocate_server_credentials ()</title>
<indexterm zone="gnutls-psk-allocate-server-credentials"><primary>gnutls_psk_allocate_server_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_psk_allocate_server_credentials
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-client-get-hint" role="function" condition="since:2.4.0">
<title>gnutls_psk_client_get_hint ()</title>
<indexterm zone="gnutls-psk-client-get-hint" role="2.4.0"><primary>gnutls_psk_client_get_hint</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_psk_client_get_hint          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
The PSK identity hint may give the client help in deciding which
username to use.  This should only be called in case of PSK
authentication and in case of a client.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the identity hint of the peer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-psk-free-client-credentials" role="function">
<title>gnutls_psk_free_client_credentials ()</title>
<indexterm zone="gnutls-psk-free-client-credentials"><primary>gnutls_psk_free_client_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_free_client_credentials  (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-free-server-credentials" role="function">
<title>gnutls_psk_free_server_credentials ()</title>
<indexterm zone="gnutls-psk-free-server-credentials"><primary>gnutls_psk_free_server_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_free_server_credentials  (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-key-flags" role="enum">
<title>enum gnutls_psk_key_flags</title>
<indexterm zone="gnutls-psk-key-flags"><primary>gnutls_psk_key_flags</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_PSK_KEY_RAW = 0,
    GNUTLS_PSK_KEY_HEX
} gnutls_psk_key_flags;
</programlisting>
<para>
Enumeration of different PSK key flags.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-PSK-KEY-RAW:CAPS" role="constant">
<term><literal>GNUTLS_PSK_KEY_RAW</literal></term>
<listitem><simpara>PSK-key in raw format.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-PSK-KEY-HEX:CAPS" role="constant">
<term><literal>GNUTLS_PSK_KEY_HEX</literal></term>
<listitem><simpara>PSK-key in hex format.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-server-get-username" role="function">
<title>gnutls_psk_server_get_username ()</title>
<indexterm zone="gnutls-psk-server-get-username"><primary>gnutls_psk_server_get_username</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_psk_server_get_username      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This should only be called in case of PSK authentication and in
case of a server.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the username of the peer, or <link linkend="NULL:CAPS"><literal>NULL</literal></link> in case of an error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-client-credentials" role="function">
<title>gnutls_psk_set_client_credentials ()</title>
<indexterm zone="gnutls-psk-set-client-credentials"><primary>gnutls_psk_set_client_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_psk_set_client_credentials   (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>,
                                                         <parameter><link linkend="gnutls-psk-key-flags"><type>gnutls_psk_key_flags</type></link> flags</parameter>);</programlisting>
<para>
This function sets the username and password, in a
gnutls_psk_client_credentials_t structure.  Those will be used in
PSK authentication.  <parameter>username</parameter> should be an ASCII string or UTF-8
strings prepared using the "SASLprep" profile of "stringprep".  The
key can be either in raw byte format or in Hex format (without the
0x prefix).
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara>is the user's zero-terminated userid</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>is the user's key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>indicate the format of the key, either
<link linkend="GNUTLS-PSK-KEY-RAW:CAPS"><literal>GNUTLS_PSK_KEY_RAW</literal></link> or <link linkend="GNUTLS-PSK-KEY-HEX:CAPS"><literal>GNUTLS_PSK_KEY_HEX</literal></link>.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-client-credentials-function" role="function">
<title>gnutls_psk_set_client_credentials_function ()</title>
<indexterm zone="gnutls-psk-set-client-credentials-function"><primary>gnutls_psk_set_client_credentials_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_set_client_credentials_function
                                                        (<parameter><link linkend="gnutls-psk-client-credentials-t"><type>gnutls_psk_client_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-psk-client-credentials-function"><type>gnutls_psk_client_credentials_function</type></link> *func</parameter>);</programlisting>
<para>
This function can be used to set a callback to retrieve the username and
password for client PSK authentication.
The callback's function form is:
int (*callback)(gnutls_session_t, char** username,
 gnutls_datum_t* key);
</para>
<para>
The <parameter>username</parameter> and <parameter>key->data</parameter> must be allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
<parameter>username</parameter> should be ASCII strings or UTF-8 strings prepared using
the "SASLprep" profile of "stringprep".
</para>
<para>
The callback function will be called once per handshake.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-params-function" role="function">
<title>gnutls_psk_set_params_function ()</title>
<indexterm zone="gnutls-psk-set-params-function"><primary>gnutls_psk_set_params_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_set_params_function      (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman or RSA parameters for PSK authentication.  The
callback should return <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_psk_server_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-file" role="function">
<title>gnutls_psk_set_server_credentials_file ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-file"><primary>gnutls_psk_set_server_credentials_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_psk_set_server_credentials_file
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_file</parameter>);</programlisting>
<para>
This function sets the password file, in a
<link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.  This password file
holds usernames and keys and will be used for PSK authentication.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&#160;:</term>
<listitem><simpara>is the PSK password file (passwd.psk)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-function" role="function">
<title>gnutls_psk_set_server_credentials_function ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-function"><primary>gnutls_psk_set_server_credentials_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_set_server_credentials_function
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-psk-server-credentials-function"><type>gnutls_psk_server_credentials_function</type></link> *func</parameter>);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's PSK credentials.
The callback's function form is:
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* key);
</para>
<para>
<parameter>username</parameter> contains the actual username.
The <parameter>key</parameter> must be filled in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
The callback function will only be called once per handshake.  The
callback function should return 0 on success, while -1 indicates
an error.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-credentials-hint" role="function" condition="since:2.4.0">
<title>gnutls_psk_set_server_credentials_hint ()</title>
<indexterm zone="gnutls-psk-set-server-credentials-hint" role="2.4.0"><primary>gnutls_psk_set_server_credentials_hint</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_psk_set_server_credentials_hint
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *hint</parameter>);</programlisting>
<para>
This function sets the identity hint, in a
<link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.  This hint is sent to
the client to help it chose a good PSK credential (i.e., username
and password).
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hint</parameter>&#160;:</term>
<listitem><simpara>is the PSK identity hint string</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.4.0</para></refsect2>
<refsect2 id="gnutls-psk-set-server-dh-params" role="function">
<title>gnutls_psk_set_server_dh_params ()</title>
<indexterm zone="gnutls-psk-set-server-dh-params"><primary>gnutls_psk_set_server_dh_params</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_set_server_dh_params     (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-dh-params-t"><type>gnutls_dh_params_t</type></link> dh_params</parameter>);</programlisting>
<para>
This function will set the Diffie-Hellman parameters for an
anonymous server to use. These parameters will be used in
Diffie-Hellman exchange with PSK cipher suites.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a gnutls_psk_server_credentials_t structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>dh_params</parameter>&#160;:</term>
<listitem><simpara>is a structure that holds Diffie-Hellman parameters.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-psk-set-server-params-function" role="function">
<title>gnutls_psk_set_server_params_function ()</title>
<indexterm zone="gnutls-psk-set-server-params-function"><primary>gnutls_psk_set_server_params_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_psk_set_server_params_function
                                                        (<parameter><link linkend="gnutls-psk-server-credentials-t"><type>gnutls_psk_server_credentials_t</type></link> res</parameter>,
                                                         <parameter><link linkend="gnutls-params-function"><type>gnutls_params_function</type></link> *func</parameter>);</programlisting>
<para>
This function will set a callback in order for the server to get
the Diffie-Hellman parameters for PSK authentication.  The callback
should return <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) on success.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-certificate-credentials-t"><type>gnutls_certificate_credentials_t</type></link> structure</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the function to be called</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-pull-func" role="function">
<title>gnutls_pull_func ()</title>
<indexterm zone="gnutls-pull-func"><primary>gnutls_pull_func</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (*gnutls_pull_func)                 (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *Param2</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-pull-timeout-func" role="function">
<title>gnutls_pull_timeout_func ()</title>
<indexterm zone="gnutls-pull-timeout-func"><primary>gnutls_pull_timeout_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_pull_timeout_func)         (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> ms</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-push-func" role="function">
<title>gnutls_push_func ()</title>
<indexterm zone="gnutls-push-func"><primary>gnutls_push_func</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (*gnutls_push_func)                 (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *Param2</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param3</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-random-art" role="function">
<title>gnutls_random_art ()</title>
<indexterm zone="gnutls-random-art"><primary>gnutls_random_art</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_random_art                   (<parameter><link linkend="gnutls-random-art-t"><type>gnutls_random_art_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *key_type</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_size</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *fpr</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> fpr_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *art</parameter>);</programlisting>
<para>
This function will convert a given fingerprint to an "artistic"
image. The returned image is allocated using <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>
</para><variablelist role="params">
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>The type of the random art</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_type</parameter>&#160;:</term>
<listitem><simpara>The type of the key (RSA, DSA etc.)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_size</parameter>&#160;:</term>
<listitem><simpara>The size of the key in bits</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr</parameter>&#160;:</term>
<listitem><simpara>The fingerprint of the key</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fpr_size</parameter>&#160;:</term>
<listitem><simpara>The size of the fingerprint</simpara></listitem></varlistentry>
<varlistentry><term><parameter>art</parameter>&#160;:</term>
<listitem><simpara>The returned random art</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-random-art-t" role="enum">
<title>enum gnutls_random_art_t</title>
<indexterm zone="gnutls-random-art-t"><primary>gnutls_random_art_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_RANDOM_ART_OPENSSH=1,
} gnutls_random_art_t;
</programlisting>
<para>
Enumeration of different random art types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-RANDOM-ART-OPENSSH:CAPS" role="constant">
<term><literal>GNUTLS_RANDOM_ART_OPENSSH</literal></term>
<listitem><simpara>OpenSSH-style random art.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-read" role="macro">
<title>gnutls_read</title>
<indexterm zone="gnutls-read"><primary>gnutls_read</primary></indexterm>
<programlisting>#define gnutls_read gnutls_record_recv
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-realloc" role="variable">
<title>gnutls_realloc</title>
<indexterm zone="gnutls-realloc"><primary>gnutls_realloc</primary></indexterm>
<programlisting>  extern gnutls_realloc_function gnutls_realloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-realloc-function" role="function">
<title>gnutls_realloc_function ()</title>
<indexterm zone="gnutls-realloc-function"><primary>gnutls_realloc_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              (*gnutls_realloc_function)          (<parameter><link linkend="void"><type>void</type></link> *Param1</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> Param2</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-record-check-pending" role="function">
<title>gnutls_record_check_pending ()</title>
<indexterm zone="gnutls-record-check-pending"><primary>gnutls_record_check_pending</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              gnutls_record_check_pending         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function checks if there are unread data
in the gnutls buffers. If the return value is
non-zero the next call to <link linkend="gnutls-record-recv"><function>gnutls_record_recv()</function></link>
is guarranteed not to block.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Returns the size of the data or zero.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-disable-padding" role="function">
<title>gnutls_record_disable_padding ()</title>
<indexterm zone="gnutls-record-disable-padding"><primary>gnutls_record_disable_padding</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_record_disable_padding       (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Used to disabled padding in TLS 1.0 and above.  Normally you do not
need to use this function, but there are buggy clients that
complain if a server pads the encrypted data.  This of course will
disable protection against statistical attacks on the data.
</para>
<para>
Normally only servers that require maximum compatibility with everything
out there, need to call this function.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-get-direction" role="function">
<title>gnutls_record_get_direction ()</title>
<indexterm zone="gnutls-record-get-direction"><primary>gnutls_record_get_direction</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_record_get_direction         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function provides information about the internals of the
record protocol and is only useful if a prior gnutls function call
(e.g.  <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>) was interrupted for some reason, that
is, if a function returned <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or
<link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link>.  In such a case, you might want to call <link linkend="select"><function>select()</function></link>
or <link linkend="poll"><function>poll()</function></link> before calling the interrupted gnutls function again.  To
tell you whether a file descriptor should be selected for either
reading or writing, <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link> returns 0 if the
interrupted function was trying to read data, and 1 if it was
trying to write data.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 if trying to read data, 1 if trying to write data.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-get-max-size" role="function">
<title>gnutls_record_get_max_size ()</title>
<indexterm zone="gnutls-record-get-max-size"><primary>gnutls_record_get_max_size</primary></indexterm>
<programlisting><link linkend="size-t"><returnvalue>size_t</returnvalue></link>              gnutls_record_get_max_size          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get the record size.  The maximum record size is negotiated by the
client after the first handshake message.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The maximum record packet size in this connection.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-recv" role="function">
<title>gnutls_record_recv ()</title>
<indexterm zone="gnutls-record-recv"><primary>gnutls_record_recv</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             gnutls_record_recv                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);</programlisting>
<para>
This function has the similar semantics with <link linkend="recv"><function>recv()</function></link>.  The only
difference is that it accepts a GnuTLS session, and uses different
error codes.
In the special case that a server requests a renegotiation, the
client may receive an error code of <link linkend="GNUTLS-E-REHANDSHAKE:CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link>.  This
message may be simply ignored, replied with an alert
<link linkend="GNUTLS-A-NO-RENEGOTIATION:CAPS"><literal>GNUTLS_A_NO_RENEGOTIATION</literal></link>, or replied with a new handshake,
depending on the client's will.
If <link linkend="EINTR:CAPS"><literal>EINTR</literal></link> is returned by the internal push function (the default
is <link linkend="recv"><function>recv()</function></link>) then <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned.  If
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again to get the data.  See also
<link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>.
A server may also receive <link linkend="GNUTLS-E-REHANDSHAKE:CAPS"><literal>GNUTLS_E_REHANDSHAKE</literal></link> when a client has
initiated a handshake. In that case the server can only initiate a
handshake or terminate the connection.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the buffer that the data will be read into</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara>the number of requested bytes</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of bytes received and zero on EOF (for stream
connections).  A negative error code is returned in case of an error.
The number of bytes received might be less than the requested <parameter>data_size</parameter>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-recv-seq" role="function" condition="since:3.0">
<title>gnutls_record_recv_seq ()</title>
<indexterm zone="gnutls-record-recv-seq" role="3.0"><primary>gnutls_record_recv_seq</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             gnutls_record_recv_seq              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>,
                                                         <parameter>unsigned <link linkend="char"><type>char</type></link> *seq</parameter>);</programlisting>
<para>
This function is the same as <link linkend="gnutls-record-recv"><function>gnutls_record_recv()</function></link>, except that
it returns in addition to data, the sequence number of the data.
This is useful in DTLS where record packets might be received
out-of-order. The returned 8-byte sequence number is an
integer in big-endian format and should be
treated as a unique message identification.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>the buffer that the data will be read into</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara>the number of requested bytes</simpara></listitem></varlistentry>
<varlistentry><term><parameter>seq</parameter>&#160;:</term>
<listitem><simpara>is the packet's 64-bit sequence number. Should have space for 8 bytes.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of bytes received and zero on EOF.  A negative
error code is returned in case of an error.  The number of bytes
received might be less than <parameter>data_size</parameter>.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-record-send" role="function">
<title>gnutls_record_send ()</title>
<indexterm zone="gnutls-record-send"><primary>gnutls_record_send</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             gnutls_record_send                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> data_size</parameter>);</programlisting>
<para>
This function has the similar semantics with <link linkend="send"><function>send()</function></link>.  The only
difference is that it accepts a GnuTLS session, and uses different
error codes.
Note that if the send buffer is full, <link linkend="send"><function>send()</function></link> will block this
function.  See the <link linkend="send"><function>send()</function></link> documentation for full information.  You
can replace the default push function by using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link> with a call to <link linkend="send"><function>send()</function></link> with a
MSG_DONTWAIT flag if blocking is a problem.
If the EINTR is returned by the internal push function (the
default is <link linkend="send"><function>send()</function></link>) then <link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> will be returned. If
<link linkend="GNUTLS-E-INTERRUPTED:CAPS"><literal>GNUTLS_E_INTERRUPTED</literal></link> or <link linkend="GNUTLS-E-AGAIN:CAPS"><literal>GNUTLS_E_AGAIN</literal></link> is returned, you must
call this function again, with the same parameters; alternatively
you could provide a <link linkend="NULL:CAPS"><literal>NULL</literal></link> pointer for data, and 0 for
size. cf. <link linkend="gnutls-record-get-direction"><function>gnutls_record_get_direction()</function></link>. The errno value EMSGSIZE
maps to <link linkend="GNUTLS-E-LARGE-PACKET:CAPS"><literal>GNUTLS_E_LARGE_PACKET</literal></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contains the data to send</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_size</parameter>&#160;:</term>
<listitem><simpara>is the length of the data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of bytes sent, or a negative error code.  The
number of bytes sent might be less than <parameter>data_size</parameter>.  The maximum
number of bytes this function can send in a single call depends
on the negotiated maximum record size.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-record-set-max-size" role="function">
<title>gnutls_record_set_max_size ()</title>
<indexterm zone="gnutls-record-set-max-size"><primary>gnutls_record_set_max_size</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             gnutls_record_set_max_size          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> size</parameter>);</programlisting>
<para>
This function sets the maximum record packet size in this
connection.  This property can only be set to clients.  The server
may choose not to accept the requested size.
</para>
<para>
Acceptable values are 512(=2^9), 1024(=2^10), 2048(=2^11) and
4096(=2^12).  The requested record size does get in effect
immediately only while sending data. The receive part will take
effect after a successful handshake.
</para>
<para>
This function uses a TLS extension called 'max record size'.  Not
all TLS implementations use or even understand this extension.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>is the new size</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rehandshake" role="function">
<title>gnutls_rehandshake ()</title>
<indexterm zone="gnutls-rehandshake"><primary>gnutls_rehandshake</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_rehandshake                  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will renegotiate security parameters with the
client.  This should only be called in case of a server.
</para>
<para>
This message informs the peer that we want to renegotiate
parameters (perform a handshake).
</para>
<para>
If this function succeeds (returns 0), you must call the
<link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link> function in order to negotiate the new
parameters.
</para>
<para>
Since TLS is full duplex some application data might have been
sent during peer's processing of this message. In that case
one should call <link linkend="gnutls-record-recv"><function>gnutls_record_recv()</function></link> until GNUTLS_E_REHANDSHAKE
is returned to clear any pending data. Care must be taken if
rehandshake is mandatory to terminate if it does not start after
some threshold.
</para>
<para>
If the client does not wish to renegotiate parameters he will
should with an alert message, thus the return code will be
<link linkend="GNUTLS-E-WARNING-ALERT-RECEIVED:CAPS"><literal>GNUTLS_E_WARNING_ALERT_RECEIVED</literal></link> and the alert will be
<link linkend="GNUTLS-A-NO-RENEGOTIATION:CAPS"><literal>GNUTLS_A_NO_RENEGOTIATION</literal></link>.  A client may also choose to ignore
this message.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, otherwise a negative error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-rsa-params-t" role="typedef">
<title>gnutls_rsa_params_t</title>
<indexterm zone="gnutls-rsa-params-t"><primary>gnutls_rsa_params_t</primary></indexterm>
<programlisting>  typedef struct gnutls_x509_privkey_int *gnutls_rsa_params_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-safe-renegotiation-status" role="function" condition="since:2.10.0">
<title>gnutls_safe_renegotiation_status ()</title>
<indexterm zone="gnutls-safe-renegotiation-status" role="2.10.0"><primary>gnutls_safe_renegotiation_status</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_safe_renegotiation_status    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Can be used to check whether safe renegotiation is being used
in the current session.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 when safe renegotiation is not used and non (0) when
safe renegotiation is used.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-sec-param-get-name" role="function" condition="since:2.12.0">
<title>gnutls_sec_param_get_name ()</title>
<indexterm zone="gnutls-sec-param-get-name" role="2.12.0"><primary>gnutls_sec_param_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_sec_param_get_name           (<parameter><link linkend="gnutls-sec-param-t"><type>gnutls_sec_param_t</type></link> param</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-sec-param-t"><type>gnutls_sec_param_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>param</parameter>&#160;:</term>
<listitem><simpara>is a security parameter</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a pointer to a string that contains the name of the
specified security level, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-sec-param-t" role="enum">
<title>enum gnutls_sec_param_t</title>
<indexterm zone="gnutls-sec-param-t"><primary>gnutls_sec_param_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SEC_PARAM_INSECURE = -20,
    GNUTLS_SEC_PARAM_WEAK = -10,
    GNUTLS_SEC_PARAM_UNKNOWN = 0,
    GNUTLS_SEC_PARAM_LOW = 1,
    GNUTLS_SEC_PARAM_LEGACY = 2,
    GNUTLS_SEC_PARAM_NORMAL = 3,
    GNUTLS_SEC_PARAM_HIGH = 4,
    GNUTLS_SEC_PARAM_ULTRA = 5,
} gnutls_sec_param_t;
</programlisting>
<para>
Enumeration of security parameters for passive attacks.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SEC-PARAM-INSECURE:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_INSECURE</literal></term>
<listitem><simpara>Less than 72 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-WEAK:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_WEAK</literal></term>
<listitem><simpara>72 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_UNKNOWN</literal></term>
<listitem><simpara>Cannot be known
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-LOW:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_LOW</literal></term>
<listitem><simpara>80 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-LEGACY:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_LEGACY</literal></term>
<listitem><simpara>96 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-NORMAL:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_NORMAL</literal></term>
<listitem><simpara>112 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-HIGH:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_HIGH</literal></term>
<listitem><simpara>128 bits of security
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SEC-PARAM-ULTRA:CAPS" role="constant">
<term><literal>GNUTLS_SEC_PARAM_ULTRA</literal></term>
<listitem><simpara>192 bits of security
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sec-param-to-pk-bits" role="function" condition="since:2.12.0">
<title>gnutls_sec_param_to_pk_bits ()</title>
<indexterm zone="gnutls-sec-param-to-pk-bits" role="2.12.0"><primary>gnutls_sec_param_to_pk_bits</primary></indexterm>
<programlisting>unsigned <link linkend="int"><returnvalue>int</returnvalue></link>        gnutls_sec_param_to_pk_bits         (<parameter><link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> algo</parameter>,
                                                         <parameter><link linkend="gnutls-sec-param-t"><type>gnutls_sec_param_t</type></link> param</parameter>);</programlisting>
<para>
When generating private and public key pairs a difficult question
is which size of "bits" the modulus will be in RSA and the group size
in DSA. The easy answer is 1024, which is also wrong. This function
will convert a human understandable security parameter to an
appropriate size for the specific algorithm.
</para><variablelist role="params">
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>is a public key algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>param</parameter>&#160;:</term>
<listitem><simpara>is a security parameter</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The number of bits, or (0).</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-secure-malloc" role="variable">
<title>gnutls_secure_malloc</title>
<indexterm zone="gnutls-secure-malloc"><primary>gnutls_secure_malloc</primary></indexterm>
<programlisting>  extern gnutls_alloc_function gnutls_secure_malloc;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-server-name-get" role="function">
<title>gnutls_server_name_get ()</title>
<indexterm zone="gnutls-server-name-get"><primary>gnutls_server_name_get</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_server_name_get              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *data_length</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> *type</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> indx</parameter>);</programlisting>
<para>
This function will allow you to get the name indication (if any), a
client has sent.  The name indication may be any of the enumeration
gnutls_server_name_type_t.
</para>
<para>
If <parameter>type</parameter> is GNUTLS_NAME_DNS, then this function is to be used by
servers that support virtual hosting, and the data will be a null
terminated UTF-8 string.
</para>
<para>
If <parameter>data</parameter> has not enough size to hold the server name
GNUTLS_E_SHORT_MEMORY_BUFFER is returned, and <parameter>data_length</parameter> will
hold the required size.
</para>
<para>
<parameter>index</parameter> is used to retrieve more than one server names (if sent by
the client).  The first server name has an index of 0, the second 1
and so on.  If no name with the given index exists
GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE is returned.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>will hold the data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data_length</parameter>&#160;:</term>
<listitem><simpara>will hold the data length. Must hold the maximum size of data.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>will hold the server name indicator type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara>is the index of the server_name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-server-name-set" role="function">
<title>gnutls_server_name_set ()</title>
<indexterm zone="gnutls-server-name-set"><primary>gnutls_server_name_set</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_server_name_set              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-server-name-type-t"><type>gnutls_server_name_type_t</type></link> type</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *name</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> name_length</parameter>);</programlisting>
<para>
This function is to be used by clients that want to inform (via a
TLS extension mechanism) the server of the name they connected to.
This should be used by clients that connect to servers that do
virtual hosting.
</para>
<para>
The value of <parameter>name</parameter> depends on the <parameter>type</parameter> type.  In case of
<link linkend="GNUTLS-NAME-DNS:CAPS"><literal>GNUTLS_NAME_DNS</literal></link>, an ASCII (0)-terminated domain name string,
without the trailing dot, is expected.  IPv4 or IPv6 addresses are
not permitted.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>specifies the indicator type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a string that contains the server name.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name_length</parameter>&#160;:</term>
<listitem><simpara>holds the length of name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-server-name-type-t" role="enum">
<title>enum gnutls_server_name_type_t</title>
<indexterm zone="gnutls-server-name-type-t"><primary>gnutls_server_name_type_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_NAME_DNS = 1
} gnutls_server_name_type_t;
</programlisting>
<para>
Enumeration of different server name types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-NAME-DNS:CAPS" role="constant">
<term><literal>GNUTLS_NAME_DNS</literal></term>
<listitem><simpara>Domain Name System name type.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-channel-binding" role="function" condition="since:2.12.0">
<title>gnutls_session_channel_binding ()</title>
<indexterm zone="gnutls-session-channel-binding" role="2.12.0"><primary>gnutls_session_channel_binding</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_channel_binding      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-channel-binding-t"><type>gnutls_channel_binding_t</type></link> cbtype</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cb</parameter>);</programlisting>
<para>
Extract given channel binding data of the <parameter>cbtype</parameter> (e.g.,
<link linkend="GNUTLS-CB-TLS-UNIQUE:CAPS"><literal>GNUTLS_CB_TLS_UNIQUE</literal></link>) type.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cbtype</parameter>&#160;:</term>
<listitem><simpara>an <link linkend="gnutls-channel-binding-t"><type>gnutls_channel_binding_t</type></link> enumeration type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara>output buffer array with data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success,
<link linkend="GNUTLS-E-UNIMPLEMENTED-FEATURE:CAPS"><literal>GNUTLS_E_UNIMPLEMENTED_FEATURE</literal></link> if the <parameter>cbtype</parameter> is unsupported,
<link linkend="GNUTLS-E-CHANNEL-BINDING-NOT-AVAILABLE:CAPS"><literal>GNUTLS_E_CHANNEL_BINDING_NOT_AVAILABLE</literal></link> if the data is not
currently available, or an error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-session-enable-compatibility-mode" role="function">
<title>gnutls_session_enable_compatibility_mode ()</title>
<indexterm zone="gnutls-session-enable-compatibility-mode"><primary>gnutls_session_enable_compatibility_mode</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_session_enable_compatibility_mode
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function can be used to disable certain (security) features in
TLS in order to maintain maximum compatibility with buggy
clients. Because several trade-offs with security are enabled,
if required they will be reported through the audit subsystem.
</para>
<para>
Normally only servers that require maximum compatibility with
everything out there, need to call this function.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-data" role="function">
<title>gnutls_session_get_data ()</title>
<indexterm zone="gnutls-session-get-data"><primary>gnutls_session_get_data</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_get_data             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *session_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *session_data_size</parameter>);</programlisting>
<para>
Returns all session parameters needed to be stored to support resumption.
The client should call this, and store the returned session data. A session
may be resumed later by calling <link linkend="gnutls-session-set-data"><function>gnutls_session_set_data()</function></link>.  
This function must be called after a successful handshake.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&#160;:</term>
<listitem><simpara>is a pointer to space to hold the session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&#160;:</term>
<listitem><simpara>is the session_data's size, or it will be set by the function.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-data2" role="function">
<title>gnutls_session_get_data2 ()</title>
<indexterm zone="gnutls-session-get-data2"><primary>gnutls_session_get_data2</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_get_data2            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>);</programlisting>
<para>
Returns all session parameters needed to be stored to support resumption.
The client should call this, and store the returned session data. A session
may be resumed later by calling <link linkend="gnutls-session-set-data"><function>gnutls_session_set_data()</function></link>.  
This function must be called after a successful handshake. 
The returned <parameter>data</parameter> are allocated and must be released using <link linkend="gnutls-free"><function>gnutls_free()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a datum that will hold the session.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-id" role="function">
<title>gnutls_session_get_id ()</title>
<indexterm zone="gnutls-session-get-id"><primary>gnutls_session_get_id</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_get_id               (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *session_id</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *session_id_size</parameter>);</programlisting>
<para>
Returns the current session ID. This can be used if you want to
check if the next session you tried to resume was actually
resumed.  That is because resumed sessions share the same session ID
with the original session.
</para>
<para>
The session ID is selected by the server, that identify the
current session.  In TLS 1.0 and SSL 3.0 session id is always less
than 32 bytes.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id</parameter>&#160;:</term>
<listitem><simpara>is a pointer to space to hold the session id.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id_size</parameter>&#160;:</term>
<listitem><simpara>initially should contain the maximum <parameter>session_id</parameter> size and will be updated.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-id2" role="function" condition="since:3.1.4">
<title>gnutls_session_get_id2 ()</title>
<indexterm zone="gnutls-session-get-id2" role="3.1.4"><primary>gnutls_session_get_id2</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_get_id2              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *session_id</parameter>);</programlisting>
<para>
Returns the current session ID. The returned data should be
treated as constant.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id</parameter>&#160;:</term>
<listitem><simpara>will point to the session ID.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.4</para></refsect2>
<refsect2 id="gnutls-session-get-ptr" role="function">
<title>gnutls_session_get_ptr ()</title>
<indexterm zone="gnutls-session-get-ptr"><primary>gnutls_session_get_ptr</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link> *              gnutls_session_get_ptr              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Get user pointer for session.  Useful in callbacks.  This is the
  pointer set with <link linkend="gnutls-session-set-ptr"><function>gnutls_session_set_ptr()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the user given pointer from the session structure, or
<link linkend="NULL:CAPS"><literal>NULL</literal></link> if it was never set.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-get-random" role="function" condition="since:3.0">
<title>gnutls_session_get_random ()</title>
<indexterm zone="gnutls-session-get-random" role="3.0"><primary>gnutls_session_get_random</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_session_get_random           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server</parameter>);</programlisting>
<para>
This function returns pointers to the client and server
random fields used in the TLS handshake. The pointers are
not to be modified or deallocated.
</para>
<para>
If a client random value has not yet been established, the output
will be garbage.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client</parameter>&#160;:</term>
<listitem><simpara>the client part of the random</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server</parameter>&#160;:</term>
<listitem><simpara>the server part of the random</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-session-int" role="struct">
<title>struct gnutls_session_int</title>
<indexterm zone="gnutls-session-int"><primary>gnutls_session_int</primary></indexterm>
<programlisting>struct gnutls_session_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-is-resumed" role="function">
<title>gnutls_session_is_resumed ()</title>
<indexterm zone="gnutls-session-is-resumed"><primary>gnutls_session_is_resumed</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_is_resumed           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Check whether session is resumed or not.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>non zero if this session is resumed, or a zero if this is
a new session.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-resumption-requested" role="function">
<title>gnutls_session_resumption_requested ()</title>
<indexterm zone="gnutls-session-resumption-requested"><primary>gnutls_session_resumption_requested</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_resumption_requested (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Check whether the client has asked for session resumption.
This function is valid only on server side.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>non zero if session resumption was asked, or a zero if not.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-data" role="function">
<title>gnutls_session_set_data ()</title>
<indexterm zone="gnutls-session-set-data"><primary>gnutls_session_set_data</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_set_data             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="void"><type>void</type></link> *session_data</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> session_data_size</parameter>);</programlisting>
<para>
Sets all session parameters, in order to resume a previously
established session.  The session data given must be the one
returned by <link linkend="gnutls-session-get-data"><function>gnutls_session_get_data()</function></link>.  This function should be
called before <link linkend="gnutls-handshake"><function>gnutls_handshake()</function></link>.
</para>
<para>
Keep in mind that session resuming is advisory. The server may
choose not to resume the session, thus a full handshake will be
performed.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data</parameter>&#160;:</term>
<listitem><simpara>is a pointer to space to hold the session.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_data_size</parameter>&#160;:</term>
<listitem><simpara>is the session's size</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-premaster" role="function">
<title>gnutls_session_set_premaster ()</title>
<indexterm zone="gnutls-session-set-premaster"><primary>gnutls_session_set_premaster</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_set_premaster        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> entity</parameter>,
                                                         <parameter><link linkend="gnutls-protocol-t"><type>gnutls_protocol_t</type></link> version</parameter>,
                                                         <parameter><link linkend="gnutls-kx-algorithm-t"><type>gnutls_kx_algorithm_t</type></link> kx</parameter>,
                                                         <parameter><link linkend="gnutls-cipher-algorithm-t"><type>gnutls_cipher_algorithm_t</type></link> cipher</parameter>,
                                                         <parameter><link linkend="gnutls-mac-algorithm-t"><type>gnutls_mac_algorithm_t</type></link> mac</parameter>,
                                                         <parameter><link linkend="gnutls-compression-method-t"><type>gnutls_compression_method_t</type></link> comp</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *master</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *session_id</parameter>);</programlisting>
<para>
This function sets the premaster secret in a session. This is
a function intended for exceptional uses. Do not use this
function unless you are implementing a legacy protocol.
Use <link linkend="gnutls-session-set-data"><function>gnutls_session_set_data()</function></link> instead.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>entity</parameter>&#160;:</term>
<listitem><simpara>GNUTLS_SERVER or GNUTLS_CLIENT</simpara></listitem></varlistentry>
<varlistentry><term><parameter>version</parameter>&#160;:</term>
<listitem><simpara>the TLS protocol version</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kx</parameter>&#160;:</term>
<listitem><simpara>the key exchange method</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cipher</parameter>&#160;:</term>
<listitem><simpara>the cipher</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mac</parameter>&#160;:</term>
<listitem><simpara>the MAC algorithm</simpara></listitem></varlistentry>
<varlistentry><term><parameter>comp</parameter>&#160;:</term>
<listitem><simpara>the compression method</simpara></listitem></varlistentry>
<varlistentry><term><parameter>master</parameter>&#160;:</term>
<listitem><simpara>the master key to use</simpara></listitem></varlistentry>
<varlistentry><term><parameter>session_id</parameter>&#160;:</term>
<listitem><simpara>the session identifier</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-set-ptr" role="function">
<title>gnutls_session_set_ptr ()</title>
<indexterm zone="gnutls-session-set-ptr"><primary>gnutls_session_set_ptr</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_session_set_ptr              (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *ptr</parameter>);</programlisting>
<para>
This function will set (associate) the user given pointer <parameter>ptr</parameter> to
the session structure.  This pointer can be accessed with
<link linkend="gnutls-session-get-ptr"><function>gnutls_session_get_ptr()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>is the user pointer</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-session-t" role="typedef">
<title>gnutls_session_t</title>
<indexterm zone="gnutls-session-t"><primary>gnutls_session_t</primary></indexterm>
<programlisting>  typedef struct gnutls_session_int *gnutls_session_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-session-ticket-enable-client" role="function" condition="since:2.10.0">
<title>gnutls_session_ticket_enable_client ()</title>
<indexterm zone="gnutls-session-ticket-enable-client" role="2.10.0"><primary>gnutls_session_ticket_enable_client</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_ticket_enable_client (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Request that the client should attempt session resumption using
SessionTicket.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-session-ticket-enable-server" role="function" condition="since:2.10.0">
<title>gnutls_session_ticket_enable_server ()</title>
<indexterm zone="gnutls-session-ticket-enable-server" role="2.10.0"><primary>gnutls_session_ticket_enable_server</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_ticket_enable_server (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>);</programlisting>
<para>
Request that the server should attempt session resumption using
SessionTicket.  <parameter>key</parameter> must be initialized with
<link linkend="gnutls-session-ticket-key-generate"><function>gnutls_session_ticket_key_generate()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>key to encrypt session parameters.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-session-ticket-key-generate" role="function" condition="since:2.10.0">
<title>gnutls_session_ticket_key_generate ()</title>
<indexterm zone="gnutls-session-ticket-key-generate" role="2.10.0"><primary>gnutls_session_ticket_key_generate</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_session_ticket_key_generate  (<parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *key</parameter>);</programlisting>
<para>
Generate a random key to encrypt security parameters within
SessionTicket.
</para><variablelist role="params">
<varlistentry><term><parameter>key</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> which will contain a newly
created key.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-set-default-priority" role="function">
<title>gnutls_set_default_priority ()</title>
<indexterm zone="gnutls-set-default-priority"><primary>gnutls_set_default_priority</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_set_default_priority         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Sets some default priority on the ciphers, key exchange methods,
macs and compression methods.
</para>
<para>
This is the same as calling:
</para>
<para>
gnutls_priority_set_direct (session, "NORMAL", NULL);
</para>
<para>
This function is kept around for backwards compatibility, but
because of its wide use it is still fully supported.  If you wish
to allow users to provide a string that specify which ciphers to
use (which is recommended), you should use
<link linkend="gnutls-priority-set-direct"><function>gnutls_priority_set_direct()</function></link> or <link linkend="gnutls-priority-set"><function>gnutls_priority_set()</function></link> instead.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-algorithm-get" role="function" condition="since:3.1.1">
<title>gnutls_sign_algorithm_get ()</title>
<indexterm zone="gnutls-sign-algorithm-get" role="3.1.1"><primary>gnutls_sign_algorithm_get</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_sign_algorithm_get           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Returns the signature algorithm that is (or will be) used in this 
session to sign data.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The sign algorithm or <link linkend="GNUTLS-SIGN-UNKNOWN:CAPS"><literal>GNUTLS_SIGN_UNKNOWN</literal></link>.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.1</para></refsect2>
<refsect2 id="gnutls-sign-algorithm-get-name" role="macro">
<title>gnutls_sign_algorithm_get_name</title>
<indexterm zone="gnutls-sign-algorithm-get-name"><primary>gnutls_sign_algorithm_get_name</primary></indexterm>
<programlisting>#define gnutls_sign_algorithm_get_name gnutls_sign_get_name
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-sign-algorithm-get-requested" role="function" condition="since:2.10.0">
<title>gnutls_sign_algorithm_get_requested ()</title>
<indexterm zone="gnutls-sign-algorithm-get-requested" role="2.10.0"><primary>gnutls_sign_algorithm_get_requested</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_sign_algorithm_get_requested (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> indx</parameter>,
                                                         <parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> *algo</parameter>);</programlisting>
<para>
Returns the signature algorithm specified by index that was
requested by the peer. If the specified index has no data available
this function returns <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link>.  If
the negotiated TLS version does not support signature algorithms
then <link linkend="GNUTLS-E-REQUESTED-DATA-NOT-AVAILABLE:CAPS"><literal>GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE</literal></link> will be returned even
for the first index.  The first index is 0.
</para>
<para>
This function is useful in the certificate callback functions
to assist in selecting the correct certificate.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>indx</parameter>&#160;:</term>
<listitem><simpara>is an index of the signature algorithm to return</simpara></listitem></varlistentry>
<varlistentry><term><parameter>algo</parameter>&#160;:</term>
<listitem><simpara>the returned certificate type will be stored there</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise
an error code is returned.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.10.0</para></refsect2>
<refsect2 id="gnutls-sign-algorithm-t" role="enum">
<title>enum gnutls_sign_algorithm_t</title>
<indexterm zone="gnutls-sign-algorithm-t"><primary>gnutls_sign_algorithm_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SIGN_UNKNOWN = 0,
    GNUTLS_SIGN_RSA_SHA1 = 1,
    GNUTLS_SIGN_RSA_SHA = GNUTLS_SIGN_RSA_SHA1,
    GNUTLS_SIGN_DSA_SHA1 = 2,
    GNUTLS_SIGN_DSA_SHA = GNUTLS_SIGN_DSA_SHA1,
    GNUTLS_SIGN_RSA_MD5 = 3,
    GNUTLS_SIGN_RSA_MD2 = 4,
    GNUTLS_SIGN_RSA_RMD160 = 5,
    GNUTLS_SIGN_RSA_SHA256 = 6,
    GNUTLS_SIGN_RSA_SHA384 = 7,
    GNUTLS_SIGN_RSA_SHA512 = 8,
    GNUTLS_SIGN_RSA_SHA224 = 9,
    GNUTLS_SIGN_DSA_SHA224 = 10,
    GNUTLS_SIGN_DSA_SHA256 = 11,
    GNUTLS_SIGN_ECDSA_SHA1 = 12,
    GNUTLS_SIGN_ECDSA_SHA224 = 13,
    GNUTLS_SIGN_ECDSA_SHA256 = 14,
    GNUTLS_SIGN_ECDSA_SHA384 = 15,
    GNUTLS_SIGN_ECDSA_SHA512 = 16,
} gnutls_sign_algorithm_t;
</programlisting>
<para>
Enumeration of different digital signature algorithms.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SIGN-UNKNOWN:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_UNKNOWN</literal></term>
<listitem><simpara>Unknown signature algorithm.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA1:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA1</literal></term>
<listitem><simpara>Digital signature algorithm RSA with SHA-1
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA</literal></term>
<listitem><simpara>Same as <link linkend="GNUTLS-SIGN-RSA-SHA1:CAPS"><literal>GNUTLS_SIGN_RSA_SHA1</literal></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-DSA-SHA1:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_DSA_SHA1</literal></term>
<listitem><simpara>Digital signature algorithm DSA with SHA-1
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-DSA-SHA:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_DSA_SHA</literal></term>
<listitem><simpara>Same as <link linkend="GNUTLS-SIGN-DSA-SHA1:CAPS"><literal>GNUTLS_SIGN_DSA_SHA1</literal></link>.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-MD5:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_MD5</literal></term>
<listitem><simpara>Digital signature algorithm RSA with MD5.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-MD2:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_MD2</literal></term>
<listitem><simpara>Digital signature algorithm RSA with MD2.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-RMD160:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_RMD160</literal></term>
<listitem><simpara>Digital signature algorithm RSA with RMD-160.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA256:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA256</literal></term>
<listitem><simpara>Digital signature algorithm RSA with SHA-256.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA384:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA384</literal></term>
<listitem><simpara>Digital signature algorithm RSA with SHA-384.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA512:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA512</literal></term>
<listitem><simpara>Digital signature algorithm RSA with SHA-512.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-RSA-SHA224:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_RSA_SHA224</literal></term>
<listitem><simpara>Digital signature algorithm RSA with SHA-224.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-DSA-SHA224:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_DSA_SHA224</literal></term>
<listitem><simpara>Digital signature algorithm DSA with SHA-224
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-DSA-SHA256:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_DSA_SHA256</literal></term>
<listitem><simpara>Digital signature algorithm DSA with SHA-256
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-ECDSA-SHA1:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_ECDSA_SHA1</literal></term>
<listitem><simpara>ECDSA with SHA1.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-ECDSA-SHA224:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_ECDSA_SHA224</literal></term>
<listitem><simpara>Digital signature algorithm ECDSA with SHA-224.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-ECDSA-SHA256:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_ECDSA_SHA256</literal></term>
<listitem><simpara>Digital signature algorithm ECDSA with SHA-256.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-ECDSA-SHA384:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_ECDSA_SHA384</literal></term>
<listitem><simpara>Digital signature algorithm ECDSA with SHA-384.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SIGN-ECDSA-SHA512:CAPS" role="constant">
<term><literal>GNUTLS_SIGN_ECDSA_SHA512</literal></term>
<listitem><simpara>Digital signature algorithm ECDSA with SHA-512.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-get-hash-algorithm" role="function" condition="since:3.1.1">
<title>gnutls_sign_get_hash_algorithm ()</title>
<indexterm zone="gnutls-sign-get-hash-algorithm" role="3.1.1"><primary>gnutls_sign_get_hash_algorithm</primary></indexterm>
<programlisting><link linkend="gnutls-digest-algorithm-t"><returnvalue>gnutls_digest_algorithm_t</returnvalue></link> gnutls_sign_get_hash_algorithm
                                                        (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> sign</parameter>);</programlisting>
<para>
This function returns the digest algorithm corresponding to
the given signature algorithms.
</para><variablelist role="params">
<varlistentry><term><parameter>sign</parameter>&#160;:</term>
<listitem><simpara>is a signature algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return a <link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> value, or <link linkend="GNUTLS-DIG-UNKNOWN:CAPS"><literal>GNUTLS_DIG_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.1</para></refsect2>
<refsect2 id="gnutls-sign-get-id" role="function">
<title>gnutls_sign_get_id ()</title>
<indexterm zone="gnutls-sign-get-id"><primary>gnutls_sign_get_id</primary></indexterm>
<programlisting><link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> gnutls_sign_get_id              (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>);</programlisting>
<para>
The names are compared in a case insensitive way.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>is a sign algorithm name</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value corresponding to
the specified algorithm, or <link linkend="GNUTLS-SIGN-UNKNOWN:CAPS"><literal>GNUTLS_SIGN_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-get-name" role="function">
<title>gnutls_sign_get_name ()</title>
<indexterm zone="gnutls-sign-get-name"><primary>gnutls_sign_get_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_sign_get_name                (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<para>
Convert a <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> value to a string.
</para><variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a sign algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a string that contains the name of the specified sign
algorithm, or <link linkend="NULL:CAPS"><literal>NULL</literal></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-get-pk-algorithm" role="function" condition="since:3.1.1">
<title>gnutls_sign_get_pk_algorithm ()</title>
<indexterm zone="gnutls-sign-get-pk-algorithm" role="3.1.1"><primary>gnutls_sign_get_pk_algorithm</primary></indexterm>
<programlisting><link linkend="gnutls-pk-algorithm-t"><returnvalue>gnutls_pk_algorithm_t</returnvalue></link> gnutls_sign_get_pk_algorithm      (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> sign</parameter>);</programlisting>
<para>
This function returns the public key algorithm corresponding to
the given signature algorithms.
</para><variablelist role="params">
<varlistentry><term><parameter>sign</parameter>&#160;:</term>
<listitem><simpara>is a signature algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return a <link linkend="gnutls-pk-algorithm-t"><type>gnutls_pk_algorithm_t</type></link> value, or <link linkend="GNUTLS-PK-UNKNOWN:CAPS"><literal>GNUTLS_PK_UNKNOWN</literal></link> on error.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.1</para></refsect2>
<refsect2 id="gnutls-sign-is-secure" role="function">
<title>gnutls_sign_is_secure ()</title>
<indexterm zone="gnutls-sign-is-secure"><primary>gnutls_sign_is_secure</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_sign_is_secure               (<parameter><link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link> algorithm</parameter>);</programlisting>
<variablelist role="params">
<varlistentry><term><parameter>algorithm</parameter>&#160;:</term>
<listitem><simpara>is a sign algorithm</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Non-zero if the provided signature algorithm is considered to be secure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-sign-list" role="function">
<title>gnutls_sign_list ()</title>
<indexterm zone="gnutls-sign-list"><primary>gnutls_sign_list</primary></indexterm>
<programlisting>const <link linkend="gnutls-sign-algorithm-t"><returnvalue>gnutls_sign_algorithm_t</returnvalue></link> * gnutls_sign_list        (<parameter><type>void</type></parameter>);</programlisting>
<para>
Get a list of supported public key signature algorithms.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a (0)-terminated list of <link linkend="gnutls-sign-algorithm-t"><type>gnutls_sign_algorithm_t</type></link>
integers indicating the available ciphers.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-1024-group-generator" role="variable">
<title>gnutls_srp_1024_group_generator</title>
<indexterm zone="gnutls-srp-1024-group-generator"><primary>gnutls_srp_1024_group_generator</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1024-group-prime" role="variable">
<title>gnutls_srp_1024_group_prime</title>
<indexterm zone="gnutls-srp-1024-group-prime"><primary>gnutls_srp_1024_group_prime</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_1024_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1536-group-generator" role="variable">
<title>gnutls_srp_1536_group_generator</title>
<indexterm zone="gnutls-srp-1536-group-generator"><primary>gnutls_srp_1536_group_generator</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-1536-group-prime" role="variable">
<title>gnutls_srp_1536_group_prime</title>
<indexterm zone="gnutls-srp-1536-group-prime"><primary>gnutls_srp_1536_group_prime</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_1536_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-2048-group-generator" role="variable">
<title>gnutls_srp_2048_group_generator</title>
<indexterm zone="gnutls-srp-2048-group-generator"><primary>gnutls_srp_2048_group_generator</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-2048-group-prime" role="variable">
<title>gnutls_srp_2048_group_prime</title>
<indexterm zone="gnutls-srp-2048-group-prime"><primary>gnutls_srp_2048_group_prime</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_2048_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-3072-group-generator" role="variable">
<title>gnutls_srp_3072_group_generator</title>
<indexterm zone="gnutls-srp-3072-group-generator"><primary>gnutls_srp_3072_group_generator</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_3072_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-3072-group-prime" role="variable">
<title>gnutls_srp_3072_group_prime</title>
<indexterm zone="gnutls-srp-3072-group-prime"><primary>gnutls_srp_3072_group_prime</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_3072_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-4096-group-generator" role="variable">
<title>gnutls_srp_4096_group_generator</title>
<indexterm zone="gnutls-srp-4096-group-generator"><primary>gnutls_srp_4096_group_generator</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_4096_group_generator;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-4096-group-prime" role="variable">
<title>gnutls_srp_4096_group_prime</title>
<indexterm zone="gnutls-srp-4096-group-prime"><primary>gnutls_srp_4096_group_prime</primary></indexterm>
<programlisting>  extern const gnutls_datum_t gnutls_srp_4096_group_prime;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-srp-allocate-client-credentials" role="function">
<title>gnutls_srp_allocate_client_credentials ()</title>
<indexterm zone="gnutls-srp-allocate-client-credentials"><primary>gnutls_srp_allocate_client_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_allocate_client_credentials
                                                        (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-allocate-server-credentials" role="function">
<title>gnutls_srp_allocate_server_credentials ()</title>
<indexterm zone="gnutls-srp-allocate-server-credentials"><primary>gnutls_srp_allocate_server_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_allocate_server_credentials
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> *sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus this
helper function is provided in order to allocate it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a pointer to a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-decode" role="function">
<title>gnutls_srp_base64_decode ()</title>
<indexterm zone="gnutls-srp-base64-decode"><primary>gnutls_srp_base64_decode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_base64_decode            (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will decode the given encoded data, using the base64
encoding found in libsrp.
</para>
<para>
Note that <parameter>b64_data</parameter> should be null terminated.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.
</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara>contain the encoded data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where decoded data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-decode-alloc" role="function">
<title>gnutls_srp_base64_decode_alloc ()</title>
<indexterm zone="gnutls-srp-base64-decode-alloc"><primary>gnutls_srp_base64_decode_alloc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_base64_decode_alloc      (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *b64_data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);</programlisting>
<para>
This function will decode the given encoded data. The decoded data
will be allocated, and stored into result.  It will decode using
the base64 algorithm as used in libsrp.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.
</para><variablelist role="params">
<varlistentry><term><parameter>b64_data</parameter>&#160;:</term>
<listitem><simpara>contains the encoded data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where decoded data lie</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-encode" role="function">
<title>gnutls_srp_base64_encode ()</title>
<indexterm zone="gnutls-srp-base64-encode"><primary>gnutls_srp_base64_encode</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_base64_encode            (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *result</parameter>,
                                                         <parameter><link linkend="size-t"><type>size_t</type></link> *result_size</parameter>);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding, as used in the libsrp.  This is the encoding
used in SRP password files.  If the provided buffer is not long
enough GNUTLS_E_SHORT_MEMORY_BUFFER is returned.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contain the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>the place where base64 data will be copied</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result_size</parameter>&#160;:</term>
<listitem><simpara>holds the size of the result</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara><link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
long enough, or 0 on success.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-base64-encode-alloc" role="function">
<title>gnutls_srp_base64_encode_alloc ()</title>
<indexterm zone="gnutls-srp-base64-encode-alloc"><primary>gnutls_srp_base64_encode_alloc</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_base64_encode_alloc      (<parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *data</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *result</parameter>);</programlisting>
<para>
This function will convert the given data to printable data, using
the base64 encoding.  This is the encoding used in SRP password
files.  This function will allocate the required memory to hold
the encoded data.
</para>
<para>
You should use <link linkend="gnutls-free"><function>gnutls_free()</function></link> to free the returned data.
</para>
<para>
Warning!  This base64 encoding is not the "standard" encoding, so
do not use it for non-SRP purposes.
</para><variablelist role="params">
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara>contains the raw data</simpara></listitem></varlistentry>
<varlistentry><term><parameter>result</parameter>&#160;:</term>
<listitem><simpara>will hold the newly allocated encoded data</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>0 on success, or an error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-free-client-credentials" role="function">
<title>gnutls_srp_free_client_credentials ()</title>
<indexterm zone="gnutls-srp-free-client-credentials"><primary>gnutls_srp_free_client_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_srp_free_client_credentials  (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-free-server-credentials" role="function">
<title>gnutls_srp_free_server_credentials ()</title>
<indexterm zone="gnutls-srp-free-server-credentials"><primary>gnutls_srp_free_server_credentials</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_srp_free_server_credentials  (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> sc</parameter>);</programlisting>
<para>
This structure is complex enough to manipulate directly thus
this helper function is provided in order to free (deallocate) it.
</para><variablelist role="params">
<varlistentry><term><parameter>sc</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-server-get-username" role="function">
<title>gnutls_srp_server_get_username ()</title>
<indexterm zone="gnutls-srp-server-get-username"><primary>gnutls_srp_server_get_username</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_srp_server_get_username      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
This function will return the username of the peer.  This should
only be called in case of SRP authentication and in case of a
server.  Returns NULL in case of an error.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a gnutls session</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>SRP username of the peer, or NULL in case of error.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-client-credentials" role="function">
<title>gnutls_srp_set_client_credentials ()</title>
<indexterm zone="gnutls-srp-set-client-credentials"><primary>gnutls_srp_set_client_credentials</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_set_client_credentials   (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>);</programlisting>
<para>
This function sets the username and password, in a
<link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.  Those will be used in
SRP authentication.  <parameter>username</parameter> and <parameter>password</parameter> should be ASCII
strings or UTF-8 strings prepared using the "SASLprep" profile of
"stringprep".
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara>is the user's userid</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara>is the user's password</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-client-credentials-function" role="function">
<title>gnutls_srp_set_client_credentials_function ()</title>
<indexterm zone="gnutls-srp-set-client-credentials-function"><primary>gnutls_srp_set_client_credentials_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_srp_set_client_credentials_function
                                                        (<parameter><link linkend="gnutls-srp-client-credentials-t"><type>gnutls_srp_client_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-srp-client-credentials-function"><type>gnutls_srp_client_credentials_function</type></link> *func</parameter>);</programlisting>
<para>
This function can be used to set a callback to retrieve the
username and password for client SRP authentication.  The
callback's function form is:
</para>
<para>
int (*callback)(gnutls_session_t, char** username, char**password);
</para>
<para>
The <parameter>username</parameter> and <parameter>password</parameter> must be allocated using
<link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>.  <parameter>username</parameter> and <parameter>password</parameter> should be ASCII strings
or UTF-8 strings prepared using the "SASLprep" profile of
"stringprep".
</para>
<para>
The callback function will be called once per handshake before the
initial hello message is sent.
</para>
<para>
The callback should not return a negative error code the second
time called, since the handshake procedure will be aborted.
</para>
<para>
The callback function should return 0 on success.
-1 indicates an error.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-prime-bits" role="function" condition="since:2.6.0">
<title>gnutls_srp_set_prime_bits ()</title>
<indexterm zone="gnutls-srp-set-prime-bits" role="2.6.0"><primary>gnutls_srp_set_prime_bits</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_srp_set_prime_bits           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> bits</parameter>);</programlisting>
<para>
This function sets the minimum accepted number of bits, for use in
an SRP key exchange.  If zero, the default 2048 bits will be used.
</para>
<para>
In the client side it sets the minimum accepted number of bits.  If
a server sends a prime with less bits than that
<link linkend="GNUTLS-E-RECEIVED-ILLEGAL-PARAMETER:CAPS"><literal>GNUTLS_E_RECEIVED_ILLEGAL_PARAMETER</literal></link> will be returned by the
handshake.
</para>
<para>
This function has no effect in server side.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>bits</parameter>&#160;:</term>
<listitem><simpara>is the number of bits</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-srp-set-server-credentials-file" role="function">
<title>gnutls_srp_set_server_credentials_file ()</title>
<indexterm zone="gnutls-srp-set-server-credentials-file"><primary>gnutls_srp_set_server_credentials_file</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_set_server_credentials_file
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> res</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_file</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password_conf_file</parameter>);</programlisting>
<para>
This function sets the password files, in a
<link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.  Those password files
hold usernames and verifiers and will be used for SRP
authentication.
</para><variablelist role="params">
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_file</parameter>&#160;:</term>
<listitem><simpara>is the SRP password file (tpasswd)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password_conf_file</parameter>&#160;:</term>
<listitem><simpara>is the SRP password conf file (tpasswd.conf)</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-set-server-credentials-function" role="function">
<title>gnutls_srp_set_server_credentials_function ()</title>
<indexterm zone="gnutls-srp-set-server-credentials-function"><primary>gnutls_srp_set_server_credentials_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_srp_set_server_credentials_function
                                                        (<parameter><link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> cred</parameter>,
                                                         <parameter><link linkend="gnutls-srp-server-credentials-function"><type>gnutls_srp_server_credentials_function</type></link> *func</parameter>);</programlisting>
<para>
This function can be used to set a callback to retrieve the user's
SRP credentials.  The callback's function form is:
</para>
<para>
int (*callback)(gnutls_session_t, const char* username,
 gnutls_datum_t* salt, gnutls_datum_t *verifier, gnutls_datum_t* g,
 gnutls_datum_t* n);
</para>
<para>
<parameter>username</parameter> contains the actual username.
The <parameter>salt</parameter>, <parameter>verifier</parameter>, <parameter>generator</parameter> and <parameter>prime</parameter> must be filled
in using the <link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link>. For convenience <parameter>prime</parameter> and <parameter>generator</parameter>
may also be one of the static parameters defined in gnutls.h.
</para>
<para>
In case the callback returned a negative number then gnutls will
assume that the username does not exist.
</para>
<para>
In order to prevent attackers from guessing valid usernames,
if a user does not exist, g and n values should be filled in
using a random user's parameters. In that case the callback must
return the special value (1).
</para>
<para>
The callback function will only be called once per handshake.
The callback function should return 0 on success, while
-1 indicates an error.
</para><variablelist role="params">
<varlistentry><term><parameter>cred</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-srp-server-credentials-t"><type>gnutls_srp_server_credentials_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>is the callback function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srp-verifier" role="function">
<title>gnutls_srp_verifier ()</title>
<indexterm zone="gnutls-srp-verifier"><primary>gnutls_srp_verifier</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srp_verifier                 (<parameter>const <link linkend="char"><type>char</type></link> *username</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *password</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *salt</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *generator</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *prime</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *res</parameter>);</programlisting>
<para>
This function will create an SRP verifier, as specified in
RFC2945.  The <parameter>prime</parameter> and <parameter>generator</parameter> should be one of the static
parameters defined in gnutls/gnutls.h or may be generated.
</para>
<para>
The verifier will be allocated with <parameter><link linkend="gnutls-malloc"><function>gnutls_malloc()</function></link></parameter> and will be stored in
<parameter>res</parameter> using binary format.
</para><variablelist role="params">
<varlistentry><term><parameter>username</parameter>&#160;:</term>
<listitem><simpara>is the user's name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>password</parameter>&#160;:</term>
<listitem><simpara>is the user's password</simpara></listitem></varlistentry>
<varlistentry><term><parameter>salt</parameter>&#160;:</term>
<listitem><simpara>should be some randomly generated bytes</simpara></listitem></varlistentry>
<varlistentry><term><parameter>generator</parameter>&#160;:</term>
<listitem><simpara>is the generator of the group</simpara></listitem></varlistentry>
<varlistentry><term><parameter>prime</parameter>&#160;:</term>
<listitem><simpara>is the group's prime</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara>where the verifier will be stored.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, or an
error code.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-get-keys" role="function">
<title>gnutls_srtp_get_keys ()</title>
<indexterm zone="gnutls-srtp-get-keys"><primary>gnutls_srtp_get_keys</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_get_keys                (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="void"><type>void</type></link> *key_material</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> key_material_size</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client_key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *client_salt</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server_key</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *server_salt</parameter>);</programlisting>
<para>
This is a helper function to generate the keying material for SRTP.
It requires the space of the key material to be pre-allocated (should be at least
2x the maximum key size and salt size). The <parameter>client_key</parameter>, <parameter>client_salt</parameter>, <parameter>server_key</parameter>
and <parameter>server_salt</parameter> are convenience datums that point inside the key material. They may
be <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_material</parameter>&#160;:</term>
<listitem><simpara>Space to hold the generated key material</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key_material_size</parameter>&#160;:</term>
<listitem><simpara>The maximum size of the key material</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client_key</parameter>&#160;:</term>
<listitem><simpara>The master client write key, pointing inside the key material</simpara></listitem></varlistentry>
<varlistentry><term><parameter>client_salt</parameter>&#160;:</term>
<listitem><simpara>The master client write salt, pointing inside the key material</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server_key</parameter>&#160;:</term>
<listitem><simpara>The master server write key, pointing inside the key material</simpara></listitem></varlistentry>
<varlistentry><term><parameter>server_salt</parameter>&#160;:</term>
<listitem><simpara>The master server write salt, pointing inside the key material</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success the size of the key material is returned,
otherwise, <link linkend="GNUTLS-E-SHORT-MEMORY-BUFFER:CAPS"><literal>GNUTLS_E_SHORT_MEMORY_BUFFER</literal></link> if the buffer given is not
sufficient, or a negative error code.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-get-mki" role="function">
<title>gnutls_srtp_get_mki ()</title>
<indexterm zone="gnutls-srtp-get-mki"><primary>gnutls_srtp_get_mki</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_get_mki                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *mki</parameter>);</programlisting>
<para>
This function exports the negotiated Master Key Identifier,
received by the peer if any. The returned value in <parameter>mki</parameter> should be 
treated as constant and valid only during the session's lifetime.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mki</parameter>&#160;:</term>
<listitem><simpara>will hold the MKI</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-get-profile-id" role="function">
<title>gnutls_srtp_get_profile_id ()</title>
<indexterm zone="gnutls-srtp-get-profile-id"><primary>gnutls_srtp_get_profile_id</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_get_profile_id          (<parameter>const <link linkend="char"><type>char</type></link> *name</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> *profile</parameter>);</programlisting>
<para>
This function allows you to look up a profile based on a string.
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>The name of the profile to look up</simpara></listitem></varlistentry>
<varlistentry><term><parameter>profile</parameter>&#160;:</term>
<listitem><simpara>Will hold the profile id</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-get-profile-name" role="function">
<title>gnutls_srtp_get_profile_name ()</title>
<indexterm zone="gnutls-srtp-get-profile-name"><primary>gnutls_srtp_get_profile_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_srtp_get_profile_name        (<parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> profile</parameter>);</programlisting>
<para>
This function allows you to get the corresponding name for a
SRTP protection profile.
</para><variablelist role="params">
<varlistentry><term><parameter>profile</parameter>&#160;:</term>
<listitem><simpara>The profile to look up a string for</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, the name of a SRTP profile as a string,
otherwise NULL.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-get-selected-profile" role="function">
<title>gnutls_srtp_get_selected_profile ()</title>
<indexterm zone="gnutls-srtp-get-selected-profile"><primary>gnutls_srtp_get_selected_profile</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_get_selected_profile    (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> *profile</parameter>);</programlisting>
<para>
This function allows you to get the negotiated SRTP profile.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>profile</parameter>&#160;:</term>
<listitem><simpara>will hold the profile</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-profile-t" role="enum">
<title>enum gnutls_srtp_profile_t</title>
<indexterm zone="gnutls-srtp-profile-t"><primary>gnutls_srtp_profile_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80 = 0x0001,
    GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32 = 0x0002,
    GNUTLS_SRTP_NULL_HMAC_SHA1_80      = 0x0005,
    GNUTLS_SRTP_NULL_HMAC_SHA1_32      = 0x0006
} gnutls_srtp_profile_t;
</programlisting>
<para>
Enumeration of different SRTP protection profiles.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SRTP-AES128-CM-HMAC-SHA1-80:CAPS" role="constant">
<term><literal>GNUTLS_SRTP_AES128_CM_HMAC_SHA1_80</literal></term>
<listitem><simpara>128 bit AES with a 80 bit HMAC-SHA1
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SRTP-AES128-CM-HMAC-SHA1-32:CAPS" role="constant">
<term><literal>GNUTLS_SRTP_AES128_CM_HMAC_SHA1_32</literal></term>
<listitem><simpara>128 bit AES with a 32 bit HMAC-SHA1
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SRTP-NULL-HMAC-SHA1-80:CAPS" role="constant">
<term><literal>GNUTLS_SRTP_NULL_HMAC_SHA1_80</literal></term>
<listitem><simpara>NULL cipher with a 80 bit HMAC-SHA1
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SRTP-NULL-HMAC-SHA1-32:CAPS" role="constant">
<term><literal>GNUTLS_SRTP_NULL_HMAC_SHA1_32</literal></term>
<listitem><simpara>NULL cipher with a 32 bit HMAC-SHA1
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-set-mki" role="function">
<title>gnutls_srtp_set_mki ()</title>
<indexterm zone="gnutls-srtp-set-mki"><primary>gnutls_srtp_set_mki</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_set_mki                 (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *mki</parameter>);</programlisting>
<para>
This function sets the Master Key Identifier, to be
used by this session (if any).
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mki</parameter>&#160;:</term>
<listitem><simpara>holds the MKI</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-set-profile" role="function">
<title>gnutls_srtp_set_profile ()</title>
<indexterm zone="gnutls-srtp-set-profile"><primary>gnutls_srtp_set_profile</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_set_profile             (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-srtp-profile-t"><type>gnutls_srtp_profile_t</type></link> profile</parameter>);</programlisting>
<para>
This function is to be used by both clients and servers, to declare
what SRTP profiles they support, to negotiate with the peer.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>profile</parameter>&#160;:</term>
<listitem><simpara>is the profile id to add.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
otherwise a negative error code is returned.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-srtp-set-profile-direct" role="function">
<title>gnutls_srtp_set_profile_direct ()</title>
<indexterm zone="gnutls-srtp-set-profile-direct"><primary>gnutls_srtp_set_profile_direct</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_srtp_set_profile_direct      (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *profiles</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> **err_pos</parameter>);</programlisting>
<para>
This function is to be used by both clients and servers, to declare
what SRTP profiles they support, to negotiate with the peer.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>profiles</parameter>&#160;:</term>
<listitem><simpara>is a string that contains the supported SRTP profiles,
separated by colons.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err_pos</parameter>&#160;:</term>
<listitem><simpara>In case of an error this will have the position in the string the error occured, may be NULL.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On syntax error <link linkend="GNUTLS-E-INVALID-REQUEST:CAPS"><literal>GNUTLS_E_INVALID_REQUEST</literal></link> is returned,
<link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> on success, or an error code.
Since 3.1.4</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-store-commitment" role="function" condition="since:3.0">
<title>gnutls_store_commitment ()</title>
<indexterm zone="gnutls-store-commitment" role="3.0"><primary>gnutls_store_commitment</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_store_commitment             (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash_algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hash</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will store the provided hash commitment to 
the list of stored public keys. The key with the given
hash will be considered valid until the provided expiration time.
</para>
<para>
The <parameter>store</parameter> variable if non-null specifies a custom backend for
the storage of entries. If it is NULL then the
default file backend will be used.
</para>
<para>
Note that this function is not thread safe with the default backend.
</para><variablelist role="params">
<varlistentry><term><parameter>db_name</parameter>&#160;:</term>
<listitem><simpara>A file specifying the stored keys (use NULL for the default)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tdb</parameter>&#160;:</term>
<listitem><simpara>A storage structure or NULL to use the default</simpara></listitem></varlistentry>
<varlistentry><term><parameter>host</parameter>&#160;:</term>
<listitem><simpara>The peer's name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara>non-NULL if this key is specific to a service (e.g. http)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash_algo</parameter>&#160;:</term>
<listitem><simpara>The hash algorithm type</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hash</parameter>&#160;:</term>
<listitem><simpara>The raw hash</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expiration</parameter>&#160;:</term>
<listitem><simpara>The expiration time (use 0 to disable expiration)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be 0.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise a
negative error value.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-store-pubkey" role="function" condition="since:3.0">
<title>gnutls_store_pubkey ()</title>
<indexterm zone="gnutls-store-pubkey" role="3.0"><primary>gnutls_store_pubkey</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_store_pubkey                 (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> cert_type</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will store the provided certificate to 
the list of stored public keys. The key will be considered valid until 
the provided expiration time.
</para>
<para>
The <parameter>store</parameter> variable if non-null specifies a custom backend for
the storage of entries. If it is NULL then the
default file backend will be used.
</para><variablelist role="params">
<varlistentry><term><parameter>db_name</parameter>&#160;:</term>
<listitem><simpara>A file specifying the stored keys (use NULL for the default)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tdb</parameter>&#160;:</term>
<listitem><simpara>A storage structure or NULL to use the default</simpara></listitem></varlistentry>
<varlistentry><term><parameter>host</parameter>&#160;:</term>
<listitem><simpara>The peer's name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara>non-NULL if this key is specific to a service (e.g. http)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_type</parameter>&#160;:</term>
<listitem><simpara>The type of the certificate</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>The data of the certificate</simpara></listitem></varlistentry>
<varlistentry><term><parameter>expiration</parameter>&#160;:</term>
<listitem><simpara>The expiration time (use 0 to disable expiration)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be 0.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise a
negative error value.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-strdup" role="function">
<title>gnutls_strdup ()</title>
<indexterm zone="gnutls-strdup"><primary>gnutls_strdup</primary></indexterm>
<programlisting><link linkend="char"><returnvalue>char</returnvalue></link> *              (*gnutls_strdup)                    (<parameter>const <link linkend="char"><type>char</type></link> *Param1</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-strerror" role="function">
<title>gnutls_strerror ()</title>
<indexterm zone="gnutls-strerror"><primary>gnutls_strerror</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_strerror                     (<parameter><link linkend="int"><type>int</type></link> error</parameter>);</programlisting>
<para>
This function is similar to strerror.  The difference is that it
accepts an error number returned by a gnutls function; In case of
an unknown error a descriptive string is sent instead of <link linkend="NULL:CAPS"><literal>NULL</literal></link>.
</para>
<para>
Error codes are always a negative error code.
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>is a GnuTLS error code, a negative error code</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A string explaining the GnuTLS error message.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-strerror-name" role="function" condition="since:2.6.0">
<title>gnutls_strerror_name ()</title>
<indexterm zone="gnutls-strerror-name" role="2.6.0"><primary>gnutls_strerror_name</primary></indexterm>
<programlisting>const <link linkend="char"><returnvalue>char</returnvalue></link> *        gnutls_strerror_name                (<parameter><link linkend="int"><type>int</type></link> error</parameter>);</programlisting>
<para>
Return the GnuTLS error code define as a string.  For example,
gnutls_strerror_name (GNUTLS_E_DH_PRIME_UNACCEPTABLE) will return
the string "GNUTLS_E_DH_PRIME_UNACCEPTABLE".
</para><variablelist role="params">
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara>is an error returned by a gnutls function.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>A string corresponding to the symbol name of the error
code.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.6.0</para></refsect2>
<refsect2 id="gnutls-supplemental-data-format-type-t" role="enum">
<title>enum gnutls_supplemental_data_format_type_t</title>
<indexterm zone="gnutls-supplemental-data-format-type-t"><primary>gnutls_supplemental_data_format_type_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA = 0
} gnutls_supplemental_data_format_type_t;
</programlisting>
<para>
Enumeration of different supplemental data types (RFC 4680).
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SUPPLEMENTAL-USER-MAPPING-DATA:CAPS" role="constant">
<term><literal>GNUTLS_SUPPLEMENTAL_USER_MAPPING_DATA</literal></term>
<listitem><simpara>Supplemental user mapping data.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-tdb-deinit" role="function">
<title>gnutls_tdb_deinit ()</title>
<indexterm zone="gnutls-tdb-deinit"><primary>gnutls_tdb_deinit</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_tdb_deinit                   (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>);</programlisting>
<para>
This function will deinitialize a public key trust storage structure.
</para><variablelist role="params">
<varlistentry><term><parameter>tdb</parameter>&#160;:</term>
<listitem><simpara>The structure to be deinitialized</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-tdb-init" role="function">
<title>gnutls_tdb_init ()</title>
<indexterm zone="gnutls-tdb-init"><primary>gnutls_tdb_init</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_tdb_init                     (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> *tdb</parameter>);</programlisting>
<para>
This function will initialize a public key trust storage structure.
</para><variablelist role="params">
<varlistentry><term><parameter>tdb</parameter>&#160;:</term>
<listitem><simpara>The structure to be initialized</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned, otherwise a
negative error value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-tdb-int" role="struct">
<title>struct gnutls_tdb_int</title>
<indexterm zone="gnutls-tdb-int"><primary>gnutls_tdb_int</primary></indexterm>
<programlisting>struct gnutls_tdb_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-set-store-commitment-func" role="function">
<title>gnutls_tdb_set_store_commitment_func ()</title>
<indexterm zone="gnutls-tdb-set-store-commitment-func"><primary>gnutls_tdb_set_store_commitment_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_tdb_set_store_commitment_func
                                                        (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-store-commitment-func"><type>gnutls_tdb_store_commitment_func</type></link> cstore</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-set-store-func" role="function">
<title>gnutls_tdb_set_store_func ()</title>
<indexterm zone="gnutls-tdb-set-store-func"><primary>gnutls_tdb_set_store_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_tdb_set_store_func           (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-store-func"><type>gnutls_tdb_store_func</type></link> store</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-set-verify-func" role="function">
<title>gnutls_tdb_set_verify_func ()</title>
<indexterm zone="gnutls-tdb-set-verify-func"><primary>gnutls_tdb_set_verify_func</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_tdb_set_verify_func          (<parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-verify-func"><type>gnutls_tdb_verify_func</type></link> verify</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-store-commitment-func" role="function">
<title>gnutls_tdb_store_commitment_func ()</title>
<indexterm zone="gnutls-tdb-store-commitment-func"><primary>gnutls_tdb_store_commitment_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_tdb_store_commitment_func) (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter><link linkend="gnutls-digest-algorithm-t"><type>gnutls_digest_algorithm_t</type></link> hash_algo</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *hash</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-store-func" role="function">
<title>gnutls_tdb_store_func ()</title>
<indexterm zone="gnutls-tdb-store-func"><primary>gnutls_tdb_store_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_tdb_store_func)            (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="time-t"><type>time_t</type></link> expiration</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pubkey</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-t" role="typedef">
<title>gnutls_tdb_t</title>
<indexterm zone="gnutls-tdb-t"><primary>gnutls_tdb_t</primary></indexterm>
<programlisting>  typedef struct gnutls_tdb_int *gnutls_tdb_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-tdb-verify-func" role="function">
<title>gnutls_tdb_verify_func ()</title>
<indexterm zone="gnutls-tdb-verify-func"><primary>gnutls_tdb_verify_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*gnutls_tdb_verify_func)           (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *pubkey</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-time-func" role="function">
<title>gnutls_time_func ()</title>
<indexterm zone="gnutls-time-func"><primary>gnutls_time_func</primary></indexterm>
<programlisting><link linkend="time-t"><returnvalue>time_t</returnvalue></link>              (*gnutls_time_func)                 (<parameter><link linkend="time-t"><type>time_t</type></link> *t</parameter>);</programlisting>
<para>
Function prototype for <link linkend="time"><function>time()</function></link>-like function.  Set with
<link linkend="gnutls-global-set-time-function"><function>gnutls_global_set_time_function()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>where to store time.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>Number of seconds since the epoch, or (time_t)-1 on errors.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-get-ptr" role="function">
<title>gnutls_transport_get_ptr ()</title>
<indexterm zone="gnutls-transport-get-ptr"><primary>gnutls_transport_get_ptr</primary></indexterm>
<programlisting><link linkend="gnutls-transport-ptr-t"><returnvalue>gnutls_transport_ptr_t</returnvalue></link> gnutls_transport_get_ptr         (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>);</programlisting>
<para>
Used to get the first argument of the transport function (like
PUSH and PULL).  This must have been set using
<link linkend="gnutls-transport-set-ptr"><function>gnutls_transport_set_ptr()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>The first argument of the transport function.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-get-ptr2" role="function">
<title>gnutls_transport_get_ptr2 ()</title>
<indexterm zone="gnutls-transport-get-ptr2"><primary>gnutls_transport_get_ptr2</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_get_ptr2           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> *recv_ptr</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> *send_ptr</parameter>);</programlisting>
<para>
Used to get the arguments of the transport functions (like PUSH
and PULL).  These should have been set using
<link linkend="gnutls-transport-set-ptr2"><function>gnutls_transport_set_ptr2()</function></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&#160;:</term>
<listitem><simpara>will hold the value for the pull function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&#160;:</term>
<listitem><simpara>will hold the value for the push function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-ptr-t" role="typedef">
<title>gnutls_transport_ptr_t</title>
<indexterm zone="gnutls-transport-ptr-t"><primary>gnutls_transport_ptr_t</primary></indexterm>
<programlisting>  typedef void *gnutls_transport_ptr_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-transport-set-errno" role="function">
<title>gnutls_transport_set_errno ()</title>
<indexterm zone="gnutls-transport-set-errno"><primary>gnutls_transport_set_errno</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_errno          (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> err</parameter>);</programlisting>
<para>
Store <parameter>err</parameter> in the session-specific errno variable.  Useful values
for <parameter>err</parameter> is EAGAIN and EINTR, other values are treated will be
treated as real errors in the push/pull function.
</para>
<para>
This function is useful in replacement push and pull functions set by
<link linkend="gnutls-transport-set-push-function"><function>gnutls_transport_set_push_function()</function></link> and
<link linkend="gnutls-transport-set-pull-function"><function>gnutls_transport_set_pull_function()</function></link> under Windows, where the
replacements may not have access to the same <parameter>errno</parameter>
variable that is used by GnuTLS (e.g., the application is linked to
msvcr71.dll and gnutls is linked to msvcrt.dll).
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>err</parameter>&#160;:</term>
<listitem><simpara>error value to store in session-specific errno variable.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-errno-function" role="function" condition="since:2.12.0">
<title>gnutls_transport_set_errno_function ()</title>
<indexterm zone="gnutls-transport-set-errno-function" role="2.12.0"><primary>gnutls_transport_set_errno_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_errno_function (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-errno-func"><type>gnutls_errno_func</type></link> errno_func</parameter>);</programlisting>
<para>
This is the function where you set a function to retrieve errno
after a failed push or pull operation.
</para>
<para>
<parameter>errno_func</parameter> is of the form,
int (*gnutls_errno_func)(gnutls_transport_ptr_t);
and should return the errno.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>errno_func</parameter>&#160;:</term>
<listitem><simpara>a callback function similar to <link linkend="write"><function>write()</function></link></simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-transport-set-ptr" role="function">
<title>gnutls_transport_set_ptr ()</title>
<indexterm zone="gnutls-transport-set-ptr"><primary>gnutls_transport_set_ptr</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_ptr            (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> ptr</parameter>);</programlisting>
<para>
Used to set the first argument of the transport function (for push
and pull callbacks). In berkeley style sockets this function will set the
connection descriptor.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ptr</parameter>&#160;:</term>
<listitem><simpara>is the value.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-ptr2" role="function">
<title>gnutls_transport_set_ptr2 ()</title>
<indexterm zone="gnutls-transport-set-ptr2"><primary>gnutls_transport_set_ptr2</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_ptr2           (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> recv_ptr</parameter>,
                                                         <parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> send_ptr</parameter>);</programlisting>
<para>
Used to set the first argument of the transport function (for push
and pull callbacks). In berkeley style sockets this function will set the
connection descriptor.  With this function you can use two different
pointers for receiving and sending.
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>recv_ptr</parameter>&#160;:</term>
<listitem><simpara>is the value for the pull function</simpara></listitem></varlistentry>
<varlistentry><term><parameter>send_ptr</parameter>&#160;:</term>
<listitem><simpara>is the value for the push function</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-pull-function" role="function">
<title>gnutls_transport_set_pull_function ()</title>
<indexterm zone="gnutls-transport-set-pull-function"><primary>gnutls_transport_set_pull_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_pull_function  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-pull-func"><type>gnutls_pull_func</type></link> pull_func</parameter>);</programlisting>
<para>
This is the function where you set a function for gnutls to receive
data.  Normally, if you use berkeley style sockets, do not need to
use this function since the default recv(2) will probably be ok.
The callback should return 0 on connection termination, a positive
number indicating the number of bytes received, and -1 on error.
</para>
<para>
<parameter>gnutls_pull_func</parameter> is of the form,
ssize_t (*gnutls_pull_func)(gnutls_transport_ptr_t, void*, size_t);
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pull_func</parameter>&#160;:</term>
<listitem><simpara>a callback function similar to <link linkend="read"><function>read()</function></link></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-pull-timeout-function" role="function" condition="since:3.0">
<title>gnutls_transport_set_pull_timeout_function ()</title>
<indexterm zone="gnutls-transport-set-pull-timeout-function" role="3.0"><primary>gnutls_transport_set_pull_timeout_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_pull_timeout_function
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-pull-timeout-func"><type>gnutls_pull_timeout_func</type></link> func</parameter>);</programlisting>
<para>
This is the function where you set a function for gnutls to know
whether data are ready to be received. It should wait for data a
given time frame in milliseconds. The callback should return 0 on 
timeout, a positive number if data can be received, and -1 on error.
You'll need to override this function if <link linkend="select"><function>select()</function></link> is not suitable
for the provided transport calls. 
The callback function is used in DTLS only.
</para>
<para>
<parameter>gnutls_pull_timeout_func</parameter> is of the form,
ssize_t (*gnutls_pull_timeout_func)(gnutls_transport_ptr_t, unsigned int ms);
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&#160;:</term>
<listitem><simpara>a callback function</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-transport-set-push-function" role="function">
<title>gnutls_transport_set_push_function ()</title>
<indexterm zone="gnutls-transport-set-push-function"><primary>gnutls_transport_set_push_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_push_function  (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-push-func"><type>gnutls_push_func</type></link> push_func</parameter>);</programlisting>
<para>
This is the function where you set a push function for gnutls to
use in order to send data.  If you are going to use berkeley style
sockets, you do not need to use this function since the default
send(2) will probably be ok.  Otherwise you should specify this
function for gnutls to be able to send data.
The callback should return a positive number indicating the
bytes sent, and -1 on error.
</para>
<para>
<parameter>push_func</parameter> is of the form,
ssize_t (*gnutls_push_func)(gnutls_transport_ptr_t, const void*, size_t);
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>push_func</parameter>&#160;:</term>
<listitem><simpara>a callback function similar to <link linkend="write"><function>write()</function></link></simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-transport-set-vec-push-function" role="function" condition="since:2.12.0">
<title>gnutls_transport_set_vec_push_function ()</title>
<indexterm zone="gnutls-transport-set-vec-push-function" role="2.12.0"><primary>gnutls_transport_set_vec_push_function</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                gnutls_transport_set_vec_push_function
                                                        (<parameter><link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> session</parameter>,
                                                         <parameter><link linkend="gnutls-vec-push-func"><type>gnutls_vec_push_func</type></link> vec_func</parameter>);</programlisting>
<para>
Using this function you can override the default writev(2)
function for gnutls to send data. Setting this callback 
instead of <link linkend="gnutls-transport-set-push-function"><function>gnutls_transport_set_push_function()</function></link> is recommended
since it introduces less overhead in the TLS handshake process.
</para>
<para>
<parameter>vec_func</parameter> is of the form,
ssize_t (*gnutls_vec_push_func) (gnutls_transport_ptr_t, const giovec_t * iov, int iovcnt);
</para><variablelist role="params">
<varlistentry><term><parameter>session</parameter>&#160;:</term>
<listitem><simpara>is a <link linkend="gnutls-session-t"><type>gnutls_session_t</type></link> structure.</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vec_func</parameter>&#160;:</term>
<listitem><simpara>a callback function similar to <link linkend="writev"><function>writev()</function></link></simpara></listitem></varlistentry>
</variablelist><para role="since">Since 2.12.0</para></refsect2>
<refsect2 id="gnutls-url-is-supported" role="function" condition="since:3.1.0">
<title>gnutls_url_is_supported ()</title>
<indexterm zone="gnutls-url-is-supported" role="3.1.0"><primary>gnutls_url_is_supported</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_url_is_supported             (<parameter>const <link linkend="char"><type>char</type></link> *url</parameter>);</programlisting>
<para>
Check whether url is supported.  Depending on the system libraries
GnuTLS may support pkcs11 or tpmkey URLs.
</para><variablelist role="params">
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara>A PKCS 11 url</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>return non-zero if the given URL is supported, and zero if
it is not known.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.1.0</para></refsect2>
<refsect2 id="gnutls-vec-push-func" role="function">
<title>gnutls_vec_push_func ()</title>
<indexterm zone="gnutls-vec-push-func"><primary>gnutls_vec_push_func</primary></indexterm>
<programlisting><link linkend="ssize-t"><returnvalue>ssize_t</returnvalue></link>             (*gnutls_vec_push_func)             (<parameter><link linkend="gnutls-transport-ptr-t"><type>gnutls_transport_ptr_t</type></link> Param1</parameter>,
                                                         <parameter>const <link linkend="giovec-t"><type>giovec_t</type></link> *iov</parameter>,
                                                         <parameter><link linkend="int"><type>int</type></link> iovcnt</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-verify-stored-pubkey" role="function" condition="since:3.0">
<title>gnutls_verify_stored_pubkey ()</title>
<indexterm zone="gnutls-verify-stored-pubkey" role="3.0"><primary>gnutls_verify_stored_pubkey</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 gnutls_verify_stored_pubkey         (<parameter>const <link linkend="char"><type>char</type></link> *db_name</parameter>,
                                                         <parameter><link linkend="gnutls-tdb-t"><type>gnutls_tdb_t</type></link> tdb</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *host</parameter>,
                                                         <parameter>const <link linkend="char"><type>char</type></link> *service</parameter>,
                                                         <parameter><link linkend="gnutls-certificate-type-t"><type>gnutls_certificate_type_t</type></link> cert_type</parameter>,
                                                         <parameter>const <link linkend="gnutls-datum-t"><type>gnutls_datum_t</type></link> *cert</parameter>,
                                                         <parameter>unsigned <link linkend="int"><type>int</type></link> flags</parameter>);</programlisting>
<para>
This function will try to verify the provided certificate using
a list of stored public keys.  The <parameter>service</parameter> field if non-NULL should
be a port number.
</para>
<para>
The <parameter>retrieve</parameter> variable if non-null specifies a custom backend for
the retrieval of entries. If it is NULL then the
default file backend will be used. In POSIX-like systems the
file backend uses the $HOME/.gnutls/known_hosts file.
</para>
<para>
Note that if the custom storage backend is provided the
retrieval function should return <link linkend="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS"><literal>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</literal></link>
if the host/service pair is found but key doesn't match,
<link linkend="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS"><literal>GNUTLS_E_NO_CERTIFICATE_FOUND</literal></link> if no such host/service with
the given key is found, and 0 if it was found. The storage
function should return 0 on success.
</para><variablelist role="params">
<varlistentry><term><parameter>db_name</parameter>&#160;:</term>
<listitem><simpara>A file specifying the stored keys (use NULL for the default)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tdb</parameter>&#160;:</term>
<listitem><simpara>A storage structure or NULL to use the default</simpara></listitem></varlistentry>
<varlistentry><term><parameter>host</parameter>&#160;:</term>
<listitem><simpara>The peer's name</simpara></listitem></varlistentry>
<varlistentry><term><parameter>service</parameter>&#160;:</term>
<listitem><simpara>non-NULL if this key is specific to a service (e.g. http)</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert_type</parameter>&#160;:</term>
<listitem><simpara>The type of the certificate</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cert</parameter>&#160;:</term>
<listitem><simpara>The raw (der) data of the certificate</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara>should be 0.</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>If no associated public key is found
then <link linkend="GNUTLS-E-NO-CERTIFICATE-FOUND:CAPS"><literal>GNUTLS_E_NO_CERTIFICATE_FOUND</literal></link> will be returned. If a key
is found but does not match <link linkend="GNUTLS-E-CERTIFICATE-KEY-MISMATCH:CAPS"><literal>GNUTLS_E_CERTIFICATE_KEY_MISMATCH</literal></link>
is returned. On success, <link linkend="GNUTLS-E-SUCCESS:CAPS"><literal>GNUTLS_E_SUCCESS</literal></link> (0) is returned,
or a negative error value on other errors.</simpara></listitem></varlistentry>
</variablelist><para role="since">Since 3.0</para></refsect2>
<refsect2 id="gnutls-write" role="macro">
<title>gnutls_write</title>
<indexterm zone="gnutls-write"><primary>gnutls_write</primary></indexterm>
<programlisting>#define gnutls_write gnutls_record_send
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-int" role="struct">
<title>struct gnutls_x509_crl_int</title>
<indexterm zone="gnutls-x509-crl-int"><primary>gnutls_x509_crl_int</primary></indexterm>
<programlisting>struct gnutls_x509_crl_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crl-t" role="typedef">
<title>gnutls_x509_crl_t</title>
<indexterm zone="gnutls-x509-crl-t"><primary>gnutls_x509_crl_t</primary></indexterm>
<programlisting>  typedef struct gnutls_x509_crl_int *gnutls_x509_crl_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crq-int" role="struct">
<title>struct gnutls_x509_crq_int</title>
<indexterm zone="gnutls-x509-crq-int"><primary>gnutls_x509_crq_int</primary></indexterm>
<programlisting>struct gnutls_x509_crq_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crq-t" role="typedef">
<title>gnutls_x509_crq_t</title>
<indexterm zone="gnutls-x509-crq-t"><primary>gnutls_x509_crq_t</primary></indexterm>
<programlisting>  typedef struct gnutls_x509_crq_int *gnutls_x509_crq_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-fmt-t" role="enum">
<title>enum gnutls_x509_crt_fmt_t</title>
<indexterm zone="gnutls-x509-crt-fmt-t"><primary>gnutls_x509_crt_fmt_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_X509_FMT_DER = 0,
    GNUTLS_X509_FMT_PEM = 1
} gnutls_x509_crt_fmt_t;
</programlisting>
<para>
Enumeration of different certificate encoding formats.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-X509-FMT-DER:CAPS" role="constant">
<term><literal>GNUTLS_X509_FMT_DER</literal></term>
<listitem><simpara>X.509 certificate in DER format (binary).
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-X509-FMT-PEM:CAPS" role="constant">
<term><literal>GNUTLS_X509_FMT_PEM</literal></term>
<listitem><simpara>X.509 certificate in PEM format (text).
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gnutls-x509-crt-int" role="struct">
<title>struct gnutls_x509_crt_int</title>
<indexterm zone="gnutls-x509-crt-int"><primary>gnutls_x509_crt_int</primary></indexterm>
<programlisting>struct gnutls_x509_crt_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-crt-t" role="typedef">
<title>gnutls_x509_crt_t</title>
<indexterm zone="gnutls-x509-crt-t"><primary>gnutls_x509_crt_t</primary></indexterm>
<programlisting>  typedef struct gnutls_x509_crt_int *gnutls_x509_crt_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-privkey-int" role="struct">
<title>struct gnutls_x509_privkey_int</title>
<indexterm zone="gnutls-x509-privkey-int"><primary>gnutls_x509_privkey_int</primary></indexterm>
<programlisting>struct gnutls_x509_privkey_int;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-privkey-t" role="typedef">
<title>gnutls_x509_privkey_t</title>
<indexterm zone="gnutls-x509-privkey-t"><primary>gnutls_x509_privkey_t</primary></indexterm>
<programlisting>  typedef struct gnutls_x509_privkey_int *gnutls_x509_privkey_t;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="gnutls-x509-subject-alt-name-t" role="enum">
<title>enum gnutls_x509_subject_alt_name_t</title>
<indexterm zone="gnutls-x509-subject-alt-name-t"><primary>gnutls_x509_subject_alt_name_t</primary></indexterm>
<programlisting>typedef enum {
    GNUTLS_SAN_DNSNAME = 1,
    GNUTLS_SAN_RFC822NAME = 2,
    GNUTLS_SAN_URI = 3,
    GNUTLS_SAN_IPADDRESS = 4,
    GNUTLS_SAN_OTHERNAME = 5,
    GNUTLS_SAN_DN = 6,
    /* The following are "virtual" subject alternative name types, in
       that they are represented by an otherName value and an OID.
       Used by gnutls_x509_crt_get_subject_alt_othername_oid.  */
    GNUTLS_SAN_OTHERNAME_XMPP = 1000
} gnutls_x509_subject_alt_name_t;
</programlisting>
<para>
Enumeration of different subject alternative names types.
</para><variablelist role="enum">
<varlistentry id="GNUTLS-SAN-DNSNAME:CAPS" role="constant">
<term><literal>GNUTLS_SAN_DNSNAME</literal></term>
<listitem><simpara>DNS-name SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-RFC822NAME:CAPS" role="constant">
<term><literal>GNUTLS_SAN_RFC822NAME</literal></term>
<listitem><simpara>E-mail address SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-URI:CAPS" role="constant">
<term><literal>GNUTLS_SAN_URI</literal></term>
<listitem><simpara>URI SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-IPADDRESS:CAPS" role="constant">
<term><literal>GNUTLS_SAN_IPADDRESS</literal></term>
<listitem><simpara>IP address SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-OTHERNAME:CAPS" role="constant">
<term><literal>GNUTLS_SAN_OTHERNAME</literal></term>
<listitem><simpara>OtherName SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-DN:CAPS" role="constant">
<term><literal>GNUTLS_SAN_DN</literal></term>
<listitem><simpara>DN SAN.
</simpara></listitem>
</varlistentry>
<varlistentry id="GNUTLS-SAN-OTHERNAME-XMPP:CAPS" role="constant">
<term><literal>GNUTLS_SAN_OTHERNAME_XMPP</literal></term>
<listitem><simpara>Virtual SAN, used by
  gnutls_x509_crt_get_subject_alt_othername_oid.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="mutex-deinit-func" role="function">
<title>mutex_deinit_func ()</title>
<indexterm zone="mutex-deinit-func"><primary>mutex_deinit_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*mutex_deinit_func)                (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="mutex-init-func" role="function">
<title>mutex_init_func ()</title>
<indexterm zone="mutex-init-func"><primary>mutex_init_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*mutex_init_func)                  (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="mutex-lock-func" role="function">
<title>mutex_lock_func ()</title>
<indexterm zone="mutex-lock-func"><primary>mutex_lock_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*mutex_lock_func)                  (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="mutex-unlock-func" role="function">
<title>mutex_unlock_func ()</title>
<indexterm zone="mutex-unlock-func"><primary>mutex_unlock_func</primary></indexterm>
<programlisting><link linkend="int"><returnvalue>int</returnvalue></link>                 (*mutex_unlock_func)                (<parameter><link linkend="void"><type>void</type></link> **mutex</parameter>);</programlisting>
<para>
</para></refsect2>

</refsect1>

</refentry>
